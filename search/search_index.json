{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome!","text":"<p>\u81ea 2022.1 \u5f00\u59cb\u7684\u8bb0\u5f55\u3002</p>"},{"location":"#_1","title":"\u53cb\u60c5\u94fe\u63a5","text":"<ul> <li> <p>\u8a00\u4e00</p> </li> <li> <p>\u6c5f\u666f\u666f\u666f\u9875</p> </li> <li> <p>\u8fd9\u4e2aXD\u5f88\u61d2</p> </li> <li> <p>HobbitQia</p> </li> </ul>"},{"location":"CS231n/","title":"CS231n: Convolutional Neural Networks for Visual Recognition - 2017","text":""},{"location":"CS231n/#1","title":"1 \u8bfe\u7a0b\u4ecb\u7ecd","text":"<p>Image Classification \u56fe\u7247\u5206\u7c7b</p> <p>Object detection \u76ee\u6807\u68c0\u6d4b, Action classification \u52a8\u4f5c\u5206\u7c7b, Image captioning \u63cf\u8ff0\u56fe\u50cf</p> <p>\u53d8\u5316\uff1a\u7b97\u529b Computation \u5e26\u6709\u6807\u7b7e\u7684\u6570\u636e Data</p>"},{"location":"CS231n/#2","title":"2 \u56fe\u50cf\u5206\u7c7b","text":""},{"location":"CS231n/#_1","title":"\u6d41\u7a0b","text":"<p>\u8bed\u4e49\u9e3f\u6c9f semantic gap: \u8ba1\u7b97\u673a\u53ea\u80fd\u770b\u5230 RGB \u503c\uff0c\u8fd9\u548c\u4eba\u7684\u5b9e\u9645\u89c6\u89c9\u662f\u6709\u5dee\u5f02\u7684</p> <p>\u6211\u4eec\u7684\u7b97\u6cd5\u5e94\u8be5\u5bf9\u4ee5\u4e0b\u6761\u4ef6\u9c81\u68d2\uff1a\u906e\u6321/\u5149\u7ebf/\u59ff\u6001/\u80cc\u666f\u6df7\u4e71/\u7c7b\u5185\u5dee\u5f02/...</p> <p>train &amp; predict</p> <pre><code>def train(images, lables):\n    # Machine learning!\n    return model\n\ndef predict(model, test_images):\n    # Use model to predict labels\n    return test_labels\n</code></pre>"},{"location":"CS231n/#k","title":"\u6700\u8fd1\u90bb &amp; K\u8fd1\u90bb \u5224\u522b\u5206\u6790","text":"<p>Nearest Neighbor &amp; K-Nearest Neighbor</p> <p>\u4f7f\u7528 L1 \u8ddd\u79bb\uff1asum of absolute value differences</p> <pre><code>import numpy as np\nclass NearestNeighbor:\n    def __init__(self):\n        pass\n    def train(self, X, y):\n        self.Xtr = X # N * D, each row is an example\n        self.ytr = y # N * 1\n    def predict(self, X):\n        num_test = X.shape[0] # X: num_test * D\n        Ypred = np.zeros(num_test, dtype = self.ytr.dtype) # y: num_test * 1\n\n        for i in xrange(num_test):\n            distances = np.sum(np.abs(self.Xtr - X[i, :]), axis = 1)\n            min_index = np.argmin(distance)\n            Ypred[i] = self.ytr[min_index]\n\n        return Ypred\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1atrain O(1), predict O(n)\u3002</p> <p>\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u9884\u6d4b\u4e0a\u8981\u82b1\u5c3d\u53ef\u80fd\u5c11\u7684\u65f6\u95f4\uff0c\u4f46\u662f\u5bf9\u8bad\u7ec3\u7684\u65f6\u95f4\u53cd\u800c\u6ca1\u6709\u592a\u591a\u8981\u6c42\u3002</p> <p>\u6700\u8fd1\u90bb\u7684\u7f3a\u9677\uff1a\u5e72\u6270\u70b9\uff0c\u53ef\u80fd\u5728\u5212\u5206\u540e\u6709\u592a\u8fc7\u6ce2\u52a8\u7684\u8fb9\u754c\u3002</p> <p>\u6240\u4ee5\u5f15\u5165\u6700\u8fd1\u90bb\uff0c\u91c7\u7528\u591a\u6570\u6295\u7968\u7684\u65b9\u5f0f\u786e\u5b9a\u5206\u7c7b\u3002</p> <p></p> <p>\u4e0d\u7528\u4e8e\u56fe\u50cf\u8bc6\u522b\uff1a\u53ef\u4ee5\u6784\u9020\u51fa\u5b8c\u5168\u4e0d\u540c\u7684\u7167\u7247\u76f8\u5bf9\u4e8e\u539f\u7167\u7247\u5f97\u5230\u7684\u8ddd\u79bb\u662f\u76f8\u540c\u7684; Curse of dimensionality</p> <p>L1 distance (Manhattan distance)\uff1a45\u00b0\u503e\u659c\u7684\u6b63\u65b9\u5f62\uff1b\u53d7\u5230\u6240\u9009\u7684\u5750\u6807\u8f74\u5f71\u54cd\uff0c\u5982\u679c\u65cb\u8f6c\u5750\u6807\u8f74\u53ef\u80fd\u4f1a\u5f71\u54cdL1\u8ddd\u79bb\u7684\u503c\uff0c\u5750\u6807\u8f74\u5f80\u5f80\u6709\u5177\u4f53\u7684\u542b\u4e49 $$ d_1(I_1, I_2) = \\sum_p{|I<sup>p_1-I</sup>p_2|} $$ L2 distance (Euclidean distance)\uff1a\u5706\u5f62\uff1b\u4e0d\u53d7\u5750\u6807\u8f74\u7684\u9009\u53d6\u7684\u5f71\u54cd\uff0c\u5f53\u5750\u6807\u8f74\u6ca1\u6709\u5177\u4f53\u542b\u4e49\u65f6\u66f4\u5b9e\u7528 $$ d_2(I_1, I_2) = \\sqrt{\\sum_p{(I<sup>p_1-I</sup>p_2)^2}} $$ http://vision.stanford.edu/teaching/cs231n-demos/knn/</p> <p></p> <p>L1 \u8ddd\u79bb\u662f\u4e0e\u5750\u6807\u8f74\u76f8\u5173\u7684\uff0c\u800c L2 \u8ddd\u79bb\u548c\u5750\u6807\u8f74\u4e0d\u76f8\u5173\u3002\u6240\u4ee5\u5982\u679c\u5750\u6807\u8f74\u662f\u6709\u4e00\u4e9b\u7279\u6b8a\u542b\u4e49\u7684\uff0c\u6bd4\u5982\u7279\u5f81\u5411\u91cf\u4e4b\u7c7b\uff0c\u90a3\u53ef\u4ee5\u7528 L1\uff1b\u5982\u679c\u5750\u6807\u8f74\u662f\u968f\u4fbf\u627e\u7684\uff0c\u90a3\u5c31 L2\u3002</p> <p>1-Nearest Neighbor Classifier \u65e0\u6cd5\u8fa8\u522b\u566a\u58f0</p> <p>K-Nearest Neighbor Classifier \u6700\u8fd1\u7684K\u4e2a\u70b9</p> <p>Hyperparameters \u8d85\u53c2\u6570\uff1a\u6bd4\u5982\u521a\u521a\u7684\u8ddd\u79bb\u9009\u62e9\u3001K\u7684\u9009\u62e9 choices about the algorithm that we set rather than learn. </p> <p>\u4f1a\u4ea7\u751f\u7ef4\u5ea6\u707e\u96be\uff1a\u7ef4\u5ea6\u589e\u52a0\u65f6\uff0c\u8981\u60f3\u5f97\u5230\u76f8\u540c\u7684\u7cbe\u5ea6\uff0c\u6240\u9700\u8981\u7684\u6570\u636e\u662f\u6307\u6570\u7ea7\u589e\u957f\u7684\u3002</p>"},{"location":"CS231n/#assignment-knn","title":"Assignment - KNN","text":"<p>\u5728\u6b64\u8bb0\u5f55\u4e00\u4e9b\u5b8c\u6210\u4f5c\u4e1a\u8fc7\u7a0b\u4e2d\uff0c\u5728\u6837\u4f8b\u4e2d\u53d1\u73b0\u7684\u8f83\u597d\u7528\u6cd5\uff0c\u4ee5\u53ca <code>numpy</code> \u7684\u57fa\u672c\u4f7f\u7528\u3002</p>"},{"location":"CS231n/#numpy","title":"numpy","text":"<p><code>arr.shape</code>\uff1a\u4e00\u4e2a <code>tuple</code>\uff0c\u8fd4\u56de\u5404\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002</p> <p><code>numpy</code>\u4e2d<code>np.flatnonzero()</code>\u7684\u7528\u6cd5</p> <p>\u8fd4\u56de\u5411\u91cf\u5316\u77e9\u9635\u540e\uff0c\u6ee1\u8db3\u62ec\u53f7\u5185\u6761\u4ef6\u7684\u5143\u7d20\u4e0b\u6807\u3002</p> <pre><code>&gt;&gt;&gt; x = np.array([1,2,3,0,2])\n&gt;&gt;&gt; np.flatnonzero(x)\narray([0, 1, 2, 4])\n&gt;&gt;&gt; x = np.array([[1,2,3], [0,8,2]])\n&gt;&gt;&gt; np.flatnonzero(x == 2)\narray([1, 5])\n</code></pre> <p><code>numpy</code>\u4e2d<code>np.random.choice()</code>\u7684\u7528\u6cd5</p> <p>\u4ece\u4e00\u7ef4\u6570\u7ec4\uff08\u79bb\u6563\u603b\u4f53\uff09\u4e2d\u968f\u673a\u62bd\u6837\uff1a<code>numpy.random.choice(a, size=None, replace=True, p=None)</code>\u3002</p> <ul> <li><code>a</code>: \u62bd\u6837\u603b\u4f53\uff0c\u53ef\u4ee5\u662f\u4e00\u7ef4\u6570\u7ec4\u6216\u8005\u662f\u4e00\u4e2a\u6570\u5b57\uff08\u8868\u793arange\uff09</li> <li><code>size</code>: \u62bd\u6837\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a1\u3002</li> <li><code>replace</code>: <code>True</code>\u8868\u793a\u53ef\u4ee5\u53d6\u76f8\u540c\u6570\u5b57\uff0c<code>False</code>\u8868\u793a\u4e0d\u53ef\u4ee5\u53d6\u76f8\u540c\u6570\u5b57</li> <li>\u6570\u7ec4<code>p</code>: \u8868\u793a\u53d6\u6570\u7ec4<code>a</code>\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u4e3a\u9009\u53d6\u6bcf\u4e2a\u5143\u7d20\u7684\u6982\u7387\u76f8\u540c\u3002</li> </ul> <pre><code>&gt;&gt;&gt; np.random.choice(5) # \u4ece[0, 5)\u4e2d\u968f\u673a\u8f93\u51fa\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u76f8\u5f53\u4e8enp.random.randint(0, 5)\n3\n&gt;&gt;&gt; x = tuple((1, 2, 3, 5))\n&gt;&gt;&gt; np.random.choice(x, 2, replace=False)\narray([5, 2])\n</code></pre> <p><code>numpy</code>\u4e2d<code>np.reshape()</code>\u7684\u7528\u6cd5</p> <p><code>np.reshape(arr, newshape, order='C')</code>\uff0c<code>arr.reshape(newshape, order='C')</code></p> <ul> <li><code>newshape</code>: <code>int</code>\u6216tuple\u7684\u6574\u6570\uff1a\u5982\u679c\u662f\u6574\u6570D\uff0c\u5219\u7ed3\u679c\u5c06\u662f\u8be5\u957f\u5ea6\u76841-D\u6570\u7ec4\uff1b\u67d0\u4e00\u5f62\u72b6\u7ef4\u5ea6\u53ef\u4ee5\u662f-1\uff0c\u6b64\u65f6\u4ece\u5176\u4f59\u7ef4\u5ea6\u63a8\u65ad\u8be5\u503c\u3002</li> <li><code>order</code>: \u7d22\u5f15\u987a\u5e8f\uff0c\u53ef\u9009{'C'\uff0c'F'\uff0c'A'}\u3002\u4f7f\u7528\u6b64\u7d22\u5f15\u987a\u5e8f\u8bfb\u53d6<code>arr</code>\u7684\u5143\u7d20\uff0c\u5e76\u4f7f\u7528\u6b64\u7d22\u5f15\u987a\u5e8f\u5c06\u5143\u7d20\u653e\u7f6e\u5230\u91cd\u65b0\u5f62\u6210\u7684\u6570\u7ec4\u4e2d\u3002<code>'C'</code>\u610f\u5473\u7740\u4f7f\u7528\u987a\u5e8f\u8bfb\u53d6/\u5199\u5165\u5143\u7d20\uff0c\u6700\u540e\u4e00\u4e2a\u8f74\u7d22\u5f15\u53d8\u5316\u6700\u5feb\uff0c\u56de\u5230\u7b2c\u4e00\u4e2a\u8f74\u7d22\u5f15\u53d8\u5316\u6700\u6162\u3002<code>'F'</code>\u610f\u5473\u7740\u4f7f\u7528Fortran\u6837\u7d22\u5f15\u987a\u5e8f\u8bfb\u53d6/\u5199\u5165\u5143\u7d20\uff0c\u7b2c\u4e00\u4e2a\u7d22\u5f15\u53d8\u5316\u6700\u5feb\uff0c\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u53d8\u5316\u6700\u6162\u3002</li> </ul> <p>\u6ce8\u610f\uff0c<code>reshape</code>\u6539\u53d8\u6570\u7ec4\u65f6\uff0c\u662f\u5f15\u7528\u6539\u53d8\u7684\uff0c\u6539\u53d8<code>reshape</code>\u540e\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\u539f\u6570\u7ec4\u7684\u503c\u3002</p> <pre><code>arr.reshape(m, -1) #\u6539\u53d8\u7ef4\u5ea6\u4e3am\u884c\u3001d\u5217 (-1\u8868\u793a\u5217\u6570\u81ea\u52a8\u8ba1\u7b97\uff0cd= a*b /m)\narr.reshape(-1, m) #\u6539\u53d8\u7ef4\u5ea6\u4e3ad\u884c\u3001m\u5217 (-1\u8868\u793a\u884c\u6570\u81ea\u52a8\u8ba1\u7b97\uff0cd= a*b /m)\n\n&gt;&gt;&gt; x = np.array((1, 2, 3, 5))\n&gt;&gt;&gt; y = np.reshape(x, (2,2))\n&gt;&gt;&gt; y\narray([[1, 2],\n       [3, 5]])\n&gt;&gt;&gt; y[1][1] = 6\n&gt;&gt;&gt; x\narray([1, 2, 3, 6])\n&gt;&gt;&gt; y = x.reshape((1, -1))\n&gt;&gt;&gt; y\narray([[1, 2, 3, 6]])\n&gt;&gt;&gt; x = y.reshape(1)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: cannot reshape array of size 4 into shape (1,1)\n&gt;&gt;&gt; x = y.reshape((4))\n&gt;&gt;&gt; x\narray([1, 2, 3, 6])\n&gt;&gt;&gt; x = y.reshape((-1,4))\n&gt;&gt;&gt; x\narray([[1, 2, 3, 6]])\n&gt;&gt;&gt; x = y.reshape((4,-1))\n&gt;&gt;&gt; x\narray([[1],\n       [2],\n       [3],\n       [6]])\n</code></pre> <p><code>numpy</code>\u4e2d<code>np.sum()</code>\u7684\u7528\u6cd5</p> <p>\u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c<code>axis</code>\uff0c\u4ee3\u8868\u5bf9\u7b2c\u51e0\u7ef4\u6c42\u548c\u3002</p> <pre><code>&gt;&gt;&gt; X = np.array([[2,3,4], [7,8,9]])\n&gt;&gt;&gt; Y = np.array([[11, 12, 13], [5, 6, 7]])\n&gt;&gt;&gt; np.sum(X[0] - Y[0])\n-27\n&gt;&gt;&gt; np.sum(X - Y, axis = 1)\narray([-27,   6])\n</code></pre> <p><code>numpy</code>\u4e2d<code>np.multiply()</code>\u7684\u7528\u6cd5</p> <p>\u5982\u679c\u4e00\u4e2a\u77e9\u9635\u4e3a\u6570\uff0c\u5219\u5c31\u662f\u6570\u4e58\u3002</p> <p>\u9ed8\u8ba4\uff1a\u77e9\u9635\u7684 Hadamard \u79ef\uff0c\u5bf9\u5e94\u9879\u76f8\u4e58\u3002</p> <p>\u77e9\u9635\u4e58\u6cd5\uff1a<code>np.dot()</code>\u3002\u5982\u679c\u5411\u91cf\u548c\u77e9\u9635\u76f8\u4e58\uff0c\u4f1a\u628a\u5411\u91cf\u8f6c\u4e3a\u77e9\u9635\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u4e58\u6570\u4e3a\u6570\uff0c\u5219\u89c6\u4e3a\u6570\u4e58\u3002</p> <p><code>numpy</code>\u4e2d<code>np.bincount()</code>\u7684\u7528\u6cd5</p> <p>\u8ba1\u7b97\u4e00\u7ef4\u975e\u8d1f\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 <code>bincount(x, weights=None, minlength=0)</code></p> <p><code>minlength</code>\uff1a\u8f93\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u77ed\u957f\u5ea6\u3002</p> <pre><code>&gt;&gt;&gt; np.bincount(np.array([0, 1, 1, 3, 2, 1, 7]))\narray([1, 3, 1, 1, 0, 0, 0, 1])\n&gt;&gt;&gt; np.bincount(np.arange(5))\narray([1, 1, 1, 1, 1])\n&gt;&gt;&gt; w = np.array([0.3, 0.5, 0.2, 0.7, 1., -0.6]) # weights\n&gt;&gt;&gt; x = np.array([0, 1, 1, 2, 2, 2])\n&gt;&gt;&gt; np.bincount(x, weights=w)\narray([ 0.3,  0.7,  1.1])\n</code></pre> <p><code>numpy</code> \u4e2d\u7684 <code>np.argsort()</code> <code>np.argmax()</code> <code>np.argmin()</code></p> <p>\u6392\u5e8f/\u53d6\u6700\u503c\u540e\uff0c\u8fd4\u56de\u4e0b\u6807\u6570\u7ec4\u3002</p>"},{"location":"CS231n/#_2","title":"\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\u6b27\u5f0f\u8ddd\u79bb","text":"\\begin{aligned} dist_{i,j} &amp;= \\sqrt{\\sum_{k = 1}^D(test_{i,k} - train^T_{k.j})^2}\\\\ &amp;= \\sqrt{\\sum_{k = 1}^D test_{i,k}^2 - 2test_{i,k}train^T_{k.j} + {train^T_{k.j}}^2}\\\\ \\end{aligned}  <pre><code>dists = np.repeat(np.sum(np.square(X), axis = 1), num_train).reshape(num_test, num_train)\ndists += np.repeat(np.sum(np.square(self.X_train.T), axis = 0), num_test).reshape(num_train, num_test).T\ndists += -2 * np.dot(X, self.X_train.T)\ndists = np.sqrt(dists)\n</code></pre>"},{"location":"CS231n/#data","title":"Data","text":"<p>Train Data &amp; Test Data: \u6211\u4eec\u4e0d\u80fd\u9009\u62e9\u5728 Train Data \u6216\u8005\u662f Test Data \u4e2d\u8868\u73b0\u6700\u597d\u7684\u8d85\u53c2\u6570\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u8ba9\u6211\u4eec\u7684\u8bad\u7ec3\u5177\u6709\u4f9d\u8d56\u6027\u3002</p> <p>Train Data &amp; Valuation Data &amp; Test Data: \u5728\u4ea4\u7a3f\u524d\u4e00\u5468\u518d\u53bb\u63a5\u89e6 Test Data \u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Train Data \u4e2d\u7684 Label\uff0c\u4f46\u662f\u4e0d\u80fd\u770b\u5230 Valuation Data \u4e2d\u7684 Label\uff0c\u53ea\u662f\u9a8c\u8bc1\u5b83\u662f\u4e0d\u662f\u6b63\u786e\u7684\u3002</p> <p>Cross Valuation \u4ea4\u53c9\u9a8c\u8bc1\uff1a\u5c0f\u6570\u636e\u96c6\u4e2d\u5e38\u7528\uff0c\u5c06 Test Data \u5206\u79bb\u51fa\u6765\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u6570\u636e\u5206\u7ec4\uff0c\u6bcf\u7ec4\u8f6e\u6d41\u5f53 Valuation Data\u3002</p> <p>\u8981\u5c3d\u91cf\u4f7f\u5f97\u5206\u7ec4\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u4e0d\u8981\u6709\u65f6\u95f4\u5dee\uff0c\u4e5f\u4e0d\u8981\u6709\u62cd\u6444\u8005/\u6570\u636e\u6765\u6e90\u7684\u504f\u5dee\u3002</p> <p>Test Data \u7684\u76ee\u7684\uff0c\u662f\u770b\u8fd9\u4e2a\u6a21\u578b\u5728\u672a\u77e5\u6570\u636e\u4e0a\u7684\u6548\u679c\u5982\u4f55\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u628a\u8fd9\u4e2a\u672a\u77e5\u6570\u636e\u7ed9\u53d8\u6210\u5df2\u77e5\uff0c\u5982\u679c\u8fd9\u6837\u90a3 Test Data \u5c31\u4e0d\u518d\u662f\u672a\u77e5\u7684\u6570\u636e\uff0c\u6ca1\u529e\u6cd5\u6d4b\u8bd5\u8fd9\u4e2a\u6a21\u578b\u5728\u4f4d\u7f6e\u6570\u636e\u4e0a\u9762\u7684\u6548\u679c\u4e86\u3002</p> <p>\u5047\u5b9a\u591a\u4e2a\u4e0d\u540c\u7684\u8d85\u53c2\u6570\u540e\uff0c\u901a\u8fc7 Train Data \u53bb\u8bad\u7ec3\uff0c\u7136\u540e\u518d\u53bb\u7528 Validation Data \u9a8c\u8bc1\u8fd9\u4e9b\u8d85\u53c2\u6570\u7684\u6548\u679c\uff0c\u627e\u5230\u6700\u597d\u7684\u90a3\u4e9b\u8d85\u53c2\u6570\u3002\u6700\u540e\u8fd9\u4e9b\u53c2\u6570\u5728 Test Data \u91cc\u7684\u6d4b\u8bd5\u6548\u679c\u5c31\u662f\u8fd9\u4e2a\u8d85\u53c2\u6570\u4ee5\u53ca\u8fd9\u4e2a\u6a21\u578b\u5bf9\u4e8e\u672a\u77e5\u6570\u636e\u7684\u6548\u679c\u3002</p>"},{"location":"CS231n/#linear-classification","title":"Linear Classification \u7ebf\u6027\u5206\u7c7b","text":"<p>\u5728\u9884\u6d4b\u65f6\uff0c\u6211\u4eec\u4e0d\u4f7f\u7528\u5b9e\u9645\u7684\u8bad\u7ec3\u6570\u636e\u9884\u6d4b\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u5b9a\u7684\u7b97\u6cd5\u8ba1\u7b97\u51fa\u8fd9\u4e9b\u6570\u636e\u6240\u5bf9\u5e94\u7684 Weight\uff0c\u518d\u5c06 Weight \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002</p> <p>\u5206\u7c7b\u5668 f \u662f\u4e00\u4e2a\u6620\u5c04\uff1a $$ f:x, w\\to scores_{G_i} $$ x \u662f\u8981\u9884\u6d4b\u7684\u6570\u636e\uff0cw \u662f\u8bad\u7ec3\u51fa\u7684\u53c2\u6570\uff0cscores_{G_i} \u662f\u628a x \u5206\u7c7b\u4e3a G_i \u7684\u5f97\u5206\u3002\u82e5 f \u7684\u5f62\u5f0f\u662f\u7ebf\u6027\u7684\uff0c\u5373 f(x, w) = wx\uff0c\u5219\u79f0\u4e4b\u4e3a \u7ebf\u6027\u5206\u7c7b\u5668 Linear Classifier\u3002\u8fd9\u65f6\uff0cf(x,w) \u662f\u4e00\u4e2a GroupCnt\\times 1 \u7684\u5411\u91cf\uff0cx \u662f n\\times 1 \u5411\u91cf\uff0c\u800c\u8bad\u7ec3\u51fa\u7684 w \u662f GroupCnt\\times n \u7684\u77e9\u9635\u3002\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u628a p\\times p \u4e2a\u50cf\u7d20\u7684\u56fe\u7247\u7684 3 \u4e2a\u901a\u9053\u62c9\u4f38\u6210 (p\\times p\\times3)\\times 1 \u7684\u5411\u91cf\u4f5c\u4e3a x\u3002</p> <p>\u5982\u679c\u6709\u4e00\u4e9b\u5148\u9a8c\u77e5\u8bc6\uff0c\u6bd4\u5982\u5df2\u7ecf\u77e5\u9053\u732b\u7684\u6570\u91cf\u8fdc\u591a\u4e8e\u72d7\uff0c\u90a3\u53ef\u4ee5\u5728 wx \u540e\u9762\u52a0\u4e00\u4e2a Bias \u5411\u91cf b\uff0c\u5f97\u5230 f(x,w) = wx + b\uff0c\u901a\u8fc7\u8fd9\u6837\u5f97\u5230\u7684 f(x,w) \u7684 score \u518d\u53bb\u5224\u5b9a\u5206\u7c7b\u3002</p> <p>\u6bcf\u4e00\u4e2a\u7c7b\u522b\u90fd\u80fd\u5bf9\u5e94\u4e00\u5e45 image\uff0c\u8fd9\u4e2a image \u53ef\u4ee5\u7528\u4e00\u4e2a\u884c\u5411\u91cf\u6765\u8868\u793a\uff1b\u884c\u5411\u91cf\u7ec4\u5408\u8d77\u6765\u4fbf\u6210\u4e3a\u6743\u503c\u77e9\u9635 w\u3002\u8fd9\u4e2a\u6743\u503c\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u662f\u6709\u610f\u4e49\u7684\uff0c\u628a\u5b83\u4f7f\u7528 RGB \u753b\u51fa\u4e4b\u540e\uff0c\u662f\u53ef\u4ee5\u5bf9\u5e94\u4e00\u526f\u56fe\u7247\u7684\u3002</p> <p>\u5982\u679c\u628a\u6240\u6709\u7684\u56fe\u7247\u90fd\u770b\u4f5c\u662f\u5206\u5e03\u5728\u4e00\u4e2a\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u90a3\u4e48 Linear Classifier \u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u6761\u7ebf\uff0c\u628a\u67d0\u4e00\u7c7b\u7684\u56fe\u7247\u4e0e\u5176\u4ed6\u79cd\u7c7b\u7684\u56fe\u7247\u533a\u5206\u5f00\u3002</p> <p>\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff1a</p> <ol> <li>\u5947\u5076\u5206\u7c7b\u662f\u7ebf\u6027\u5206\u7c7b\u5668\u4ee5\u53ca\u4f20\u7edf\u5206\u7c7b\u5668\u6240\u65e0\u6cd5\u89e3\u51b3\u6389\u7684\uff0c\u56e0\u4e3a\u5fc5\u5b9a\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7ebf\u6027\u7684\u7ed3\u6784\u4f7f\u5f97\u53ef\u4ee5\u628a\u4ed6\u4eec\u5206\u79bb\u5f00\u3002</li> <li>\u65e0\u6cd5\u89e3\u51b3\u4e0d\u8fde\u7eed\u7684\u591a\u6a21\u6001\u6570\u636e\uff1a\u9a6c\u53ef\u4ee5\u5411\u5de6\u770b\uff0c\u4e5f\u53ef\u4ee5\u5411\u53f3\u770b\uff1b\u4f46\u662f\u5e76\u4e0d\u80fd\u6709\u4e00\u6761\u7ebf\u6027\u8fb9\u754c\u628a\u4ed6\u4eec\u5212\u5206\u6210\u540c\u4e00\u7c7b\uff0c\u4e14\u4e0d\u5305\u542b\u5176\u4ed6\u6570\u636e\u3002\u5b83\u4f1a\u9009\u53d6\u6240\u6709\u53d8\u4f53\u7684\u5e73\u5747\u503c\uff1b\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u677f\uff0c\u6765\u8bc6\u522b\u67d0\u4ef6\u4e8b\u7269\u7684\u6240\u6709\u79cd\u7c7b\uff1b\u67d0\u4e2a\u7c7b\u522b\u5bf9\u5e94\u7684\u6743\u503c\u77e9\u9635\u4e2d\u7684\u90a3\u4e00\u884c\u6240\u753b\u51fa\u7684\u90a3\u4e2a image \u53ef\u80fd\u51fa\u73b0\u4e24\u53ea\u5934\u7684\u9a6c\u3002</li> </ol>"},{"location":"CS231n/#3-loss-function-and-optimization","title":"3 Loss Function and Optimization","text":"<p>How can we tell whether this W is good or bad? \u6b63\u786e\u5206\u7c7b\uff0c\u4e14\u8981\u8ba9\u6b63\u786e\u7684\u5206\u7c7b\u5bf9\u5e94\u7684 Score \u5c3d\u53ef\u80fd\u7684\u9ad8\u3002</p> <p>We need some way (Loss Function) to quantify the badness of any particular W. </p> <p>We need to find and come up with an efficient procedure for searching through the space of all possible Ws and actually come up with what is the correct value of W that is the least bad. </p> <p>\u6211\u4eec\u6709\u4e00\u4e2a training dataset $ {(x_i, y_i)} \uff0cx_i$ \u662f\u56fe\u7247\uff0cy_i \u662f\u6807\u7b7e\u3002\u9884\u6d4b\u51fd\u6570 f(x_i, {\\rm W}) \u53ef\u4ee5\u5f97\u5230\u56fe\u7247 x_i \u5728 \\rm W \u4e0b\uff0c\u5bf910\u4e2a\u5206\u7c7b\u5f97\u5230\u7684\u503c\uff1b\u635f\u5931\u51fd\u6570 L_i(y^{predict}_i = f(x_i, {\\rm W}), y_i) \u5f97\u5230\u9884\u6d4b\u503c\u4e0e\u5b9e\u9645\u503c\u76f8\u6bd4\u7684\u8bc4\u5206\uff0c\u603b\u7684\u635f\u5931\u51fd\u6570 L=\\frac{1}{N}\\sum L_i(f(x_i, {\\rm W}), y_i)\u3002\u8fd9\u91cc i \u5bf9\u5e94\u7684\u662f\u6837\u672c\uff0c\u4e0d\u662f\u5bf9\u6837\u672c\u9884\u6d4b\u65f6\u7684\u5404\u79cd\u5206\u7c7b\u3002</p>"},{"location":"CS231n/#multi-class-svm-loss","title":"Multi-Class SVM Loss","text":"<p>\u591a\u5206\u7c7b\u652f\u6301\u5411\u91cf\u673a\uff0c\u662f\u4e8c\u5143\u652f\u6301\u5411\u91cf\u673a\u6a21\u578b\u7684\u63a8\u5e7f\u3002</p> <p>\u5904\u7406\u591a\u5206\u7c7b\u95ee\u9898\u7684\u591a\u5206\u7c7b SVM \u7684\u635f\u5931\u51fd\u6570\uff1a $$ \\begin{align} L_i &amp; = \\sum_{j\\neq y_i}\\begin{cases}          0 &amp;, {\\rm if} s_{y_i} \\ge s_j+1\\         s_j-s_{y_i}+1 &amp;, {\\rm otherwise}\\          \\end{cases} \\ &amp; = \\sum_{j\\neq y_i} \\max(0, s_j-s_{y_i}+1) \\ \\end{align} $$</p> <p>But what this is saying is that the loss L_i for any individual example, the way we'll compute it is we're going to perform a sum over all of the categories y except for the true category y_i. So, we're going to sum over all the incorrect categories, and the we're going to compare the score of the correct category, and the score of the incorrect category. And now if the score for the correct category is greater than the score of the incorrect category , greater than the incorrect score by some safety margin, that we set to 1, if that is the case that means that the score of true category is much larger than any of the false categories, then the loss is zero. And we'll sum this up over all of the incorrect categories for our images, and this will give us our final loss for this one example in the data set. And again, we'll take the average of this loss over the whole training data set. </p> <p>\u5982\u679c\u5206\u7c7b\u5230 j \u7684\u5206\u6570\u6bd4\u5206\u7c7b\u5230 y_i \u7684\u5206\u6570\u9ad8\u7684\u592a\u591a\uff0c\u6216\u8005\u8bf4\u5206\u7c7b\u5230 j \u7684\u5206\u6570\u548c\u5206\u7c7b\u5230 y_i \u7684\u5206\u6570\u662f\u5f88\u63a5\u8fd1\u7684\uff08\u5728\u9608\u503c\u5185\uff09\uff0c\u90a3\u6211\u4eec\u90fd\u8ba4\u4e3a\u8fd9\u662f\u5b58\u5728 Loss \u7684\u3002\u5f53\u5bf9\u6b63\u786e\u5206\u7c7by_i\u7684\u9884\u6d4b\u5206\u6570\u660e\u663e\u9ad8\u4e8e\u5176\u4ed6\u5206\u7c7b\uff0c\u90a3\u6211\u4eec\u624d\u4f1a\u6ee1\u610f\u3002</p> <p>y_i \u8868\u793a\u7b2c i \u6761\u56fe\u7247\u6570\u636e\u5bf9\u5e94\u7684 Class\uff0c\u8868\u793a\u5e94\u8be5\u5206\u5230\u7b2c y_i \u7c7b\u3002\u901a\u8fc7\u6bd4\u8f83 Score \u5f97\u5230\u7684 Score \u6700\u9ad8\u7684\u5206\u7c7b\u662f \\hat{y_i}\uff0c\u8868\u793a\u5bf9 i \u5206\u7c7b\u7684\u9884\u6d4b\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a**\u5408\u9875\u635f\u5931\u51fd\u6570**/\u94f0\u94fe\u635f\u5931\u51fd\u6570\uff08Hinge Loss Function\uff09</p> <p>\u5982\u679c\u7528x\u8f74\u8868\u793a\u5bf9\u8fd9\u4e2a\u6837\u672c\u8ba1\u7b97\u51fa\u6765\u7684\u5206\u6570\uff0c\u7528y\u8f74\u8868\u793a\u8fd9\u4e2a\u5206\u6570\u6240\u4ee3\u8868\u7684\u635f\u5931\u3002\u90a3\u8fd9\u4e2a\u51fd\u6570\u65f6\u5355\u8c03\u7ebf\u6027\u4e0b\u964d\u7684\uff0c\u4f46\u5f53y\u503c\u4e0b\u964d\u52300\u65f6\uff0c\u4fbf\u4e0d\u518d\u4e0b\u964d\uff1b\u4e14x\u518d\u589e\u52a0\uff0cy\u4e5f\u6052\u4e3a0\u3002</p> <p>\u8fd9\u91cc\u7684\u9608\u503c\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\uff0c\u56e0\u4e3a\u53c2\u6570\u77e9\u9635 w \u662f\u8bad\u7ec3\u51fa\u6765\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u5b9a\u7684 Scale \u6765\u4f7f\u5f97\u8bad\u7ec3\u51fa\u76f8\u540c\u6548\u679c\u7684\u6a21\u578b\u3002</p> <p>\u7b2c\u4e00\u6b21\u8fed\u4ee3\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u53d6 w \u7684\u521d\u503c\u4e3a\u4e00\u4e9b\u7edd\u5bf9\u503c\u8f83\u5c0f\u7684\u968f\u673a\u6570\uff0c\u8fd9\u6837\u5f97\u5230\u7684 Score \u4e00\u5f00\u59cb\u90fd\u5f88\u5c0f\uff0c\u4e14\u7c7b\u4f3c\u5747\u5300\u5206\u5e03\u3002\u5982\u679c\u4e00\u5171\u6709 C \u5f20\u56fe\u7247\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u7ed3\u679c\u5e94\u8be5\u662f \\Delta\\times (C-1)\uff08\u5728\u4e0a\u9762\u7684\u6848\u4f8b\u4e2d \\Delta = 1 \uff09\uff0c\u56e0\u4e3a s_i \u5e94\u8be5\u90fd\u975e\u5e38\u63a5\u8fd1\uff0c\u6240\u4ee5 s_j-s_{y_i}\\approx 0\u3002\u5982\u679c\u7b2c\u4e00\u6b21\u8fed\u4ee3\u65f6\u7684\u7ed3\u679c\u4e0d\u5bf9\uff0c\u90a3\u5f88\u53ef\u80fd\u662f\u4ee3\u7801\u9519\u4e86\u3002</p> <p>\u6211\u4eec\u4f7fj\\neq y_i\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u907f\u514d\u7ed9L_i\u52a0\u4e0a\u4e00\u4e2a\u591a\u4f59\u7684\\Delta\u3002\u5982\u679c\u52a0\u4e86\uff0c\u4f1a\u9020\u6210\u5f53\\Delta\u53d6\u4e0d\u540c\u7684\u503c\u7684\u65f6\u5019\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\uff0c\u4e14\u4e0d\u4e3a0\uff0c\u6211\u4eec\u60f3\u8ba9\u4ed6\u662f0\u3002</p> <p>\u6211\u4eec\u5e76\u4e0d\u5728\u610fL_i\u7684\u5177\u4f53\u503c\uff0c\u6211\u4eec\u53ea\u5728\u610f\u5b83\u662f\u4e0d\u662f0\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d6\u5e73\u5747\u503c\uff0c\u6216\u8005\u662f\u4e58\u4e0a\u4e00\u4e2a\u4ec0\u4e48\u7cfb\u6570\u3002</p> <p>\u9009\u62e9\u5e73\u65b9\u7684\u635f\u5931\u51fd\u6570\uff0c\u5373 \\max(0, (s_j-s_{y_i}+1)^2)\uff0c\u53ef\u80fd\u66f4\u5173\u6ce8\u51cf\u5c11\u5355\u4e2a\u5206\u7c7b\u7684\u635f\u5931\uff0c\u56e0\u4e3a\u5982\u679c\u67d0\u4e2a\u635f\u5931\u7279\u522b\u5927\u90a3\u5c31\u4f1a\u5bfc\u81f4 Loss Function \u8fd9\u4e2a\u6574\u4f53\u7279\u522b\u5927\uff1b\u800c\u9009\u62e9\u7ebf\u6027\u7684\u635f\u5931\u51fd\u6570\uff0c\u53ef\u80fd\u66f4\u5173\u6ce8\u51cf\u5c0f\u6574\u4f53\u7684\u635f\u5931\u3002</p> <pre><code>def L_i_vectorized(x, y, W):\n    scores = W.dot(x)\n    margins = np.maximum(0, scores - scores[y] + 1)\n    margins[y] = 0\n    loss_i = np.sum(margins)\n    return loss_i\n</code></pre>"},{"location":"CS231n/#assignment-svm","title":"Assignment - SVM","text":""},{"location":"CS231n/#numpy_1","title":"numpy","text":"<p><code>numpy</code>\u4e2d\u7684\u6570\u7ec4\u62fc\u63a5</p> <p><code>np.stack</code> \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a tuple\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a int\uff0c\u8868\u793a\u90fd\u53bb\u6389\u4e00\u4e2a\u4e2d\u62ec\u53f7\u540e\u5bf9 tuple \u5185\u7684\u591a\u4e2a\u5143\u7d20\u8fdb\u884c\u4f9d\u6b21\u62fc\u63a5\uff0c\u62fc\u63a5\u4e4b\u540e\u518d\u6253\u4e00\u4e2a\u4e2d\u62ec\u53f7\u3002</p> <pre><code>&gt;&gt;&gt; a = np.array([[[1,2],\n...              [9,10]],\n...             [[3,4],\n...              [11,12]]])\n&gt;&gt;&gt; b = np.array([[[5,6],\n...              [13,14]],\n...             [[7,8],\n...              [15,16]]])\n&gt;&gt;&gt; np.stack((a,b),0)\narray([[[[ 1,  2],\n         [ 9, 10]],\n        [[ 3,  4],\n         [11, 12]]],\n       [[[ 5,  6],\n         [13, 14]],\n        [[ 7,  8],\n         [15, 16]]]])\n&gt;&gt;&gt; np.stack((a,b),1)\narray([[[[ 1,  2],\n         [ 9, 10]],\n        [[ 5,  6],\n         [13, 14]]],\n       [[[ 3,  4],\n         [11, 12]],\n        [[ 7,  8],\n         [15, 16]]]])\n&gt;&gt;&gt; np.stack((a,b),2)\narray([[[[ 1,  2],\n         [ 5,  6]],\n        [[ 9, 10],\n         [13, 14]]],\n       [[[ 3,  4],\n         [ 7,  8]],\n        [[11, 12],\n         [15, 16]]]])\n</code></pre> <p><code>np.hstack</code> <code>np.vstack</code> \u6c34\u5e73/\u5782\u76f4\u8fde\u63a5</p> <pre><code>&gt;&gt;&gt; a = np.array([[1,2],\n                  [3,4]])\n&gt;&gt;&gt; b = np.array([[5,6],\n                  [7,8]])\n&gt;&gt;&gt; np.vstack((a,b)) #\u5782\u76f4\u5806\u53e0\narray([[1, 2],\n       [3, 4],\n       [5, 6],\n       [7, 8]])\n&gt;&gt;&gt; np.hstack((a,b))#\u5782\u76f4\u5806\u53e0\narray([[1, 2, 5, 6],\n       [3, 4, 7, 8]])\n</code></pre>"},{"location":"CS231n/#_3","title":"\u68af\u5ea6\u6c42\u89e3\u4e0e\u5411\u91cf\u4f18\u5316","text":"Loss = \\frac{1}{\\text{num\\_train}}\\sum_{i=1}^\\text{num\\_train}\\sum_{j\\neq y_i} \\max(0, s_{i,j} - s_{i, y_i} + 1) + \\lambda \\sum_i\\sum_j W_{i,j}^2  <p>\u800c <code>dW</code>\uff0c\u5373 \\dfrac{\\partial Loss}{\\partial W} = (\\dfrac{\\partial Loss}{\\partial W_{ij}})_{\\text{dim}\\times \\text{num\\_classes}}\u3002</p> <p>\u628a\u635f\u5931\u51fd\u6570\u770b\u4f5c\u4e24\u9879\uff0c\u7b2c\u4e8c\u9879\u6c42\u5bfc\u5373\u4e3a 2\\lambda W_{i,j}\uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e00\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9 score \u6c42\u5bfc\u518d\u4e58 score \u5bf9 W_{i,j} \u7684\u5bfc\u6570\u3002\u800c s_{i,j} \u5b9e\u9645\u4e3a <code>X[i, :].dot(W[:, j])</code>\uff0c\u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u8ba1\u7b97\u65f6\u4e0d\u59a8\u76f4\u63a5\u8ba1\u7b97 Loss \u5bf9 <code>W[:, j]</code> \u7684\u5bfc\u6570\uff0c\u800c\u4e0d\u5206\u522b\u8ba1\u7b97 Loss \u5bf9 <code>W[i, j]</code> \u7684\u5bfc\u6570\u3002</p> <pre><code>def svm_loss_naive(W, X, y, reg):\n    dW = np.zeros(W.shape)  # initialize the gradient as zero\n\n    # compute the loss and the gradient\n    num_classes = W.shape[1]\n    num_train = X.shape[0]\n    loss = 0.0\n    for i in range(num_train):\n        scores = X[i].dot(W)\n        correct_class_score = scores[y[i]]\n        for j in range(num_classes):\n            if j == y[i]:\n                continue\n            margin = scores[j] - correct_class_score + 1  # note delta = 1\n            if margin &gt; 0:\n                loss += margin\n                dW[:, y[i]] += -X[i].T\n                dW[:, j] += X[i].T\n\n    loss /= num_train\n    dW /= num_train\n\n    loss += reg * np.sum(W * W)\n    dW += 2 * reg * W\n</code></pre> <p>\u5bf9\u4e8e <code>loss</code> \u7684\u5411\u91cf\u4f18\u5316\uff0c\u4f7f\u7528 <code>np.maximum</code> \u51fd\u6570\u5373\u53ef\u89e3\u51b3\u3002\u800c\u5bf9\u4e8e <code>dW</code> \u8868\u8fbe\u5f0f\u4e2d\u7b2c\u4e00\u90e8\u5206\u7684\u5411\u91cf\u4f18\u5316\uff0c\u9700\u8981\u501f\u52a9\u77e9\u9635\u4e58\u6cd5\u3002\u6784\u9020 <code>tmp</code>\uff0c\u5176\u4e2d\u7684\u7b2c i \u884c\u7b2c j \u5217\u8868\u793a\u8981\u5728 <code>dW</code> \u7684\u7b2c j \u5217\u4e2d\u6dfb\u52a0\u591a\u5c11\u500d\u7684 <code>X[i].T</code>\u3002\u4e8e\u662f\u6709 $$ \\text{dW}[:, j] = \\sum_{i = 0}^{\\text{num_train}} \\text{tmp}[i, j] * (\\text{X}[i])^T\\ \\text{dW}[k, j] = \\sum_{i = 0}^{\\text{num_train}} \\text{tmp}[i, j] * (\\text{X}[i, k])^T = \\sum_{i = 0}^{\\text{num_train}} \\text{tmp}[i, j] * \\text{X}^T[k, i] = \\text{X}^T[k, :]\\cdot \\text{tmp}[:, j]\\ \\text{dW} = X^T\\cdot \\text{tmp} $$</p> <pre><code>def svm_loss_vectorized(W, X, y, reg):\n    loss = 0.0\n    dW = np.zeros(W.shape)  # initialize the gradient as zero\n\n    num_train = X.shape[0]\n    loss = 0.0\n    scores = X.dot(W)\n    scores = scores - scores[range(num_train), y].reshape(-1, 1) + 1\n    scores = np.maximum(scores, 0)\n    loss = np.sum(scores) - num_train\n    loss /= num_train\n    loss += reg * np.sum(W * W)\n\n    scores[range(num_train), y] = 0\n    tmp = np.zeros(scores.shape)\n    tmp[scores &gt; 0] = 1\n    row_sum = np.sum(tmp, axis = 1)\n    tmp[range(num_train), y] -= row_sum\n    dW = X.T.dot(tmp)\n    dW /= num_train    \n    dW += 2 * reg * W\n</code></pre>"},{"location":"CS231n/#regularization","title":"\u6b63\u5219\u5316 Regularization","text":"<p>\u89e3\u51b3**\u8fc7\u62df\u5408**\u7684\u95ee\u9898 $$ L(W) = \\frac{1}{N}\\sum_{i=1}^NL_i(f(x_i, W), y_i) + \\lambda R(W) $$</p> <p>\u9f13\u52b1\u6a21\u578b\u9009\u62e9\u66f4\u7b80\u5355\u7684 W\uff0c\u6240\u4ee5\u589e\u52a0\u4e00\u9879\u60e9\u7f5a\u9879\uff0c\\lambda \u662f\u8d85\u53c2\u6570 hyper-parameter\u3002</p> <p>\u5e38\u7528\u7684\u6b63\u5219\u5316\uff1a</p> <p>L2 \u6b63\u5219\u5316\uff1a\u8ba1\u7b97\u6743\u503c\u77e9\u9635\u7684\u6b27\u5f0f\u8303\u6570\uff0c\u4f1a\u5747\u8861\u5404\u4e2a\u6743\u503c\u7cfb\u6570\uff0c\u4e0d\u4f1a\u6709\u8fc7\u5927\u7684\u51fa\u73b0\uff0c\u53ef\u4ee5\u5229\u7528\u6bcf\u4e2a x \u7684\u4fe1\u606f\uff0c\u66f4\u4e3a\u6574\u4f53\u5316\uff1a R(W) = \\sum_k \\sum_l W_{k,l}^2</p> <p>L1 \u6b63\u5219\u5316\uff1a\u9f13\u52b1\u7a00\u758f\u77e9\u9635\uff0cR(W) = \\sum_k \\sum_l |W_{k,l}|</p>"},{"location":"CS231n/#multi-class-logistic-regression-softmax-loss","title":"Multi-Class Logistic Regression - Softmax Loss","text":"<p>\u5982\u679c\u4f7f\u7528 Softmax Loss\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u7ebf\u6027\u5206\u7c7b\u5668\u9884\u6d4b\u51fa\u7684 Score \u4e00\u4e2a\u7279\u6b8a\u7684\u542b\u4e49\u3002\u8054\u60f3 Logistic \u56de\u5f52\u4e2d\u7684\u53c2\u6570\u7684\u6982\u7387\u542b\u4e49\uff0c\u8fd9\u91cc\u4e5f\u6709\u7c7b\u4f3c\u7684\u610f\u4e49\u3002</p> <p>\u6211\u4eec\u7ed9 Score \u4e00\u4e2a\u542b\u4e49\uff0c\u4f7f\u5176\u4ee3\u8868\u672a\u6807\u51c6\u5316\u7684\u9009\u62e9\u8fd9\u4e00\u7c7b\u7684\u5bf9\u6570\u6982\u7387 Unnormalized log probabilities\uff1a $$ P(Y = k|X = x_i) = \\dfrac{\\exp(s_k)}{\\sum_j \\exp(s_j)} $$ \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f7f\u7528 Logistic \u56de\u5f52\u65f6\uff0c\u8fd9\u4ef6\u56fe\u7247\u9009\u62e9 i \u7c7b\u7684 Loss Function L_i\uff08\u8fd9\u662f\u4e00\u4e2a\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff09\uff1a $$ \\begin{aligned} L_i &amp;= -\\ln P(Y = y_i|X = x_i)\\ &amp;= -\\ln(\\dfrac{\\exp(s_k)}{\\sum_j \\exp(s_j)})\\ \\end{aligned} $$ \u5177\u4f53\u8fc7\u7a0b\uff1a\u5bf9\u4f7f\u7528\u7ebf\u6027\u5206\u7c7b\u5668\u9884\u6d4b\u5f97\u5230\u7684 Scores \u6c42\u6307\u6570\uff0c\u5f97\u5230 exp(Scores)\uff0c\u518d\u6807\u51c6\u5316\uff0c\u518d\u53d6\u8d1f\u5bf9\u6570\u3002</p> <p>\u5982\u679c\u53ea\u6709\u6b63\u786e\u7684\u5206\u7c7b\u7684 exp(Score) \u662f\u975e\u96f6\u7684\uff0c\u5176\u4ed6\u7684\u5206\u7c7b\u7684 exp(Score) \u90fd\u662f 0 \uff0c\u90a3\u4e48\u5f97\u5230\u7684 L_i = 0\u3002</p> <p>\u7b2c\u4e00\u6b21\u8fed\u4ee3\u65f6\u7684\u68c0\u9a8c\uff1a\u6211\u4eec\u4e00\u822c\u4f1a\u53d6 w \u7684\u521d\u503c\u4e3a\u4e00\u4e9b\u7edd\u5bf9\u503c\u8f83\u5c0f\u7684\u968f\u673a\u6570\uff0c\u8fd9\u6837\u5f97\u5230\u7684 Score \u4e00\u5f00\u59cb\u90fd\u5f88\u5c0f\uff0c\u4e14\u7c7b\u4f3c\u5747\u5300\u5206\u5e03\u3002\u5982\u679c\u4e00\u5171\u6709C\u5f20\u56fe\u7247\uff0c\u90a3\u4e48\u5f97\u5230\u7684 L_i \u7ed3\u679c\u5e94\u8be5\u662f -\\ln(1/C) = \\ln C\uff0c\u56e0\u4e3a s_i\\approx 0 \u3002\u5982\u679c\u7b2c\u4e00\u6b21\u8fed\u4ee3\u65f6\u7684\u7ed3\u679c\u4e0d\u5bf9\uff0c\u90a3\u5f88\u53ef\u80fd\u662f\u4ee3\u7801\u9519\u4e86\u3002</p> <p>\u8fd9\u91cc\u7684 i \u53ea\u53d6\u6b63\u786e\u7684 Class \u5bf9\u5e94\u7684 Score \u8ba1\u7b97\u51fa\u7684 L_i\uff0c\u800c SVM \u4e2d\u4f7f\u7528\u7684\u662f\u6240\u6709\u5176\u4ed6\u7684 j\\neq i \u7684\u5408\u9875\u635f\u5931\u4e4b\u548c\u3002\u6700\u7ec8\u7684\u635f\u5931\u51fd\u6570\u662f \\sum_i L_i / n\u3002</p>"},{"location":"CS231n/#loss-function","title":"\u4e24\u79cd Loss Function \u5bf9\u6bd4","text":"<p>SVM Loss \u4f1a\u5728\u5c06\u6b63\u786e\u5206\u7c7b\u548c\u5176\u4ed6\u5206\u7c7b\u62c9\u5f00\u5dee\u8ddd\uff08\u8d85\u8fc7\u9608\u503c\uff09\u540e\uff0c\u5c31\u4e0d\u518d\u7ba1\u5b83\u4e86\uff0c\u56e0\u4e3a\u518d\u600e\u4e48\u8c03\u6574\u90fd\u4e0d\u4f1a\u5bf9 L_i \u4ea7\u751f\u5f71\u54cd\u4e86\u3002</p> <p>Softmax Loss \u5219\u4f1a\u4e0d\u65ad\u62c9\u5f00\u6b63\u786e\u5206\u7c7b\u7684 Score \u548c\u4e0d\u6b63\u786e\u5206\u7c7b\u7684 Score \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u5f97\u6982\u7387\u5c3d\u53ef\u80fd\u8d8b\u8fd1\u4e8e 1\uff0c\u5373 L_i \u5c3d\u53ef\u80fd\u8d8b\u8fd1\u4e8e 0\u3002</p> <p></p>"},{"location":"CS231n/#optimization","title":"Optimization","text":"<p>\u600e\u6837\u53bb\u5728\u5df2\u6709\u7684 W \u7684\u57fa\u7840\u4e0a\uff0c\u5bfb\u627e\u5b83\u7684\u90bb\u57df\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230\u65b0\u7684 W' \u5e76\u8ba1\u7b97 Loss Function \u51b3\u5b9a\u662f\u5426\u66f4\u65b0\u3002</p> <p>\u6cbf\u68af\u5ea6\u65b9\u5411\u53ef\u4ee5\u4f7f\u5f97\u627e\u5230\u4e0a\u5347\u6700\u5feb\u7684\u8def\uff0c\u6cbf\u68af\u5ea6\u65b9\u5411\u7684\u8d1f\u65b9\u5411\u53ef\u4ee5\u627e\u5230\u4e0b\u964d\u6700\u5feb\u7684\u8def\u3002</p> <p>\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u5bf9\u6bcf\u4e00\u7ef4\u90fd\u8ba1\u7b97\u8fd1\u4f3c\u504f\u5bfc\u6570\uff1a\u4f7f\u7528\u5b9a\u4e49 $$ \\dfrac{\\partial{L}}{\\partial W_{ij}} = \\lim_{h\\to 0} \\dfrac{L(W_{(ij)}+h)-L(W_{ij})}{h} $$ L(W_{(ij)}+h) \u8868\u793a\u5728 W \u77e9\u9635\u7684\u7b2c i \u884c\u7b2c j \u5217\u52a0\u4e0a h\uff0c\u4e4b\u540e\u518d\u8ba1\u7b97 Loss Function\u3002\u5b9e\u9645\u5e94\u7528\u65f6\uff0c\u4e0d\u4f1a\u4f7f\u7528\u6c42\u6781\u9650\uff0c\u800c\u662f\u76f4\u63a5\u7ed9 h \u8d4b\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c\uff0c\u5982 0.0001\u3002\u5219\u68af\u5ea6\u5373\u53ef\u4ee5\u7528 \\Delta L / h \u6765\u4f30\u8ba1\u3002\u8fd9\u6837\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u7f3a\u9677\u662f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\u3002</p> <p>\u53e6\u4e00\u79cd\u89e3\u6790\u7684\u601d\u8def\u662f\uff0c\u9996\u5148\u8ba1\u7b97\u51fa \\mathrm{grad}W \u7684\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u76f4\u63a5\u4ee3\u5165\u4e0d\u540c\u7684 W \u503c\u3002</p> <p>\u901a\u5e38\u4f7f\u7528\u89e3\u6790\u6cd5\uff0c\u4f46\u662f\u4f1a\u4f7f\u7528\u6570\u503c\u6cd5\u6765\u8fdb\u884c Debug\u3002</p> <p>\u6734\u7d20\u7684\u68af\u5ea6\u4e0b\u964d</p> <pre><code>while True:\n    weights_grad = evaluate_gradient(loss_fun, data, weights)\n    weights += - step_size * weight_grad\n</code></pre> <p>\u6bcf\u4e00\u6b65\u7684\u6b65\u957f <code>step_size</code>\uff1a\u5b66\u4e60\u7387 - Learning Rate</p> <p>\u968f\u673a\u68af\u5ea6\u4e0b\u964d</p> <p>\u5f15\u5165 <code>batch_size</code>\u3002</p> <p>\u6bcf\u6b21\u4ece\u6837\u672c\u4e2d\u62bd\u53d6 <code>batch_size</code> \u4ef6\u6837\u672c\uff0c\u53ea\u7528\u8fd9\u4e00\u5c0f\u90e8\u5206\u6837\u672c\u53bb\u4f5c\u4e3a Loss Function \u4e2d\u7684\u6837\u672c\u5e76\u7531\u8fd9\u4e2a\u5c0f\u6837\u672c Loss Function \u8ba1\u7b97\u51fa W \u7684\u68af\u5ea6\uff0c\u7136\u540e\u518d\u68af\u5ea6\u4e0b\u964d\u3002</p> <pre><code>while True:\n    data_batch = sample_training_data(data, 256)\n    weights_grad = evaluate_gradient(loss_fun, data_batch, weights)\n    weights += - step_size * weights_grad\n</code></pre> <p>\u53ef\u4ee5\u89c6\u4f5c\u662f\u4e00\u79cd\u8499\u7279\u5361\u6d1b\u4f30\u8ba1\u3002</p> <p>http://vision.stanford.edu/teaching/cs231n-demos/linear-classify/</p>"},{"location":"CS231n/#feature-transform","title":"\u7279\u5f81\u8f6c\u6362 Feature Transform","text":"<p>\u6cbf\u7740\u7279\u5f81\u5411\u91cf\u65b9\u5411\u6295\u5f71\uff0c\u6216\u8005\u662f\u8fdb\u884c\u4e00\u4e9b\u975e\u7ebf\u6027\u7684\u6620\u5c04\uff0c\u7c7b\u4f3c\u8f83\u4e3a\u5e7f\u4e49\u7684 Fisher \u5224\u522b</p> <p>\u8fd9\u6837\u80fd\u628a\u4e00\u4e9b\u7ebf\u6027\u5206\u4e0d\u5f00\u7684\u4e1c\u897f\uff0c\u53d8\u6210\u7ebf\u6027\u53ef\u5206\u7684\uff0c\u5e76\u5c3d\u53ef\u80fd\u62c9\u5927\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p> <p>\u4e00\u4e9b\u7b80\u5355\u7684\u9488\u5bf9\u56fe\u50cf\u7684\u7279\u5f81\uff1a</p> <ul> <li>\u5149\u8c31\u76f4\u65b9\u56fe\uff0c\u628a\u5149\u8c31\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u5c0f\u533a\u95f4\uff0c\u7edf\u8ba1\u56fe\u7247\u4e2d\u7684\u50cf\u7d20\u5206\u5e03\u4e8e\u54ea\u4e9b\u5c0f\u533a\u95f4\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8ba1\u6570\u548c\u4f5c\u4e3a\u7279\u5f81\u3002</li> <li>\u6709\u5411\u68af\u5ea6\u76f4\u65b9\u56fe\uff1a\u628a\u56fe\u7247\u4e2d\u6bcf 8*8 \u4e2a\u50cf\u7d20\u4f5c\u4e3a\u4e00\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u7ec4\u4e2d\u7684\u5f62\u72b6\u8fb9\u7f18\u7684\u65b9\u5411</li> </ul>"},{"location":"CS231n/#4-backprop","title":"4 \u53cd\u5411\u4f20\u64ad Backprop","text":"<p>\u8ba1\u7b97\u56fe Computational Graphs</p> <p>\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u8fdb\u884c\u9012\u5f52\u8fd0\u7b97\uff0c\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\uff0c\u6700\u7ec8\u8ba1\u7b97\u51fa \\mathrm{grad} W\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8ba1\u7b97\u56fe\u4e2d\u7684\u4e2d\u95f4\u8282\u70b9\uff0c\u90fd\u6709\u51e0\u4e2a\u8f93\u51fa(local output)\u548c\u51e0\u4e2a\u8f93\u5165(local input)\uff0c\u8f93\u51fa\u53ef\u4ee5\u5bf9\u8f93\u5165\u6c42\u504f\u5bfc(local gradient)\u3002\u628a\u56fe\u4e2d\u4e00\u6761\u7ebf\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u504f\u5bfc\u4e58\u8d77\u6765\uff0c\u5c31\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u5f97\u5230\u4e86\u6700\u7ec8\u7ed3\u679c\u3002</p> <p>\u5728\u8ba1\u7b97\u56fe\u4e2d\uff0c\u9996\u5148\u901a\u8fc7\u521d\u59cb\u53d8\u91cf\u7684\u503c\u7b97\u51fa\u4e00\u4e2a\u4e2a\u4e2d\u95f4\u8282\u70b9\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4e2d\u95f4\u8282\u70b9\u7684\u8f93\u51fa\u89c6\u4e3a\u4e2d\u95f4\u53d8\u91cf\u3002\u800c\u7531\u4e8e \\dfrac{\\mathrm{d}f}{\\mathrm{d}x} = \\dfrac{\\mathrm{d}f}{\\mathrm{d}q} \\dfrac{\\mathrm{d}q}{\\mathrm{d}x}\uff0c\u8981\u60f3\u628a\u8fd9\u4e2a\u68af\u5ea6\u53cd\u5411\u4f20\u64ad\u56de\u53bb\uff0c\u5373\u5df2\u6709\u4e86 \\dfrac{\\mathrm{d}f}{\\mathrm{d}q}\uff0c\u518d\u4e58\u4e0a Local Gradient \u5373\u53ef\u3002\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u60f3\u8981\u6570\u503c\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6b63\u5411\u4f20\u64ad\u53bb\u7b97\u51fa x \u7684\u503c\u548c q \u7684\u503c\uff0c\u7136\u540e \\dfrac{\\mathrm{d}f}{\\mathrm{d}q} \u548c \\dfrac{\\mathrm{d}q}{\\mathrm{d}x} \u5c31\u53d8\u6210\u4e24\u4e2a\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e58\u79ef\u3002</p>"},{"location":"CS231n/#example","title":"Example","text":"<p>\u8981\u6ce8\u610f\uff0c\u6700\u540e\u9762\u7684 \\dfrac{\\mathrm{d}f}{\\mathrm{d}f} = 1\uff0c\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u53cd\u5411\u4f20\u64ad\u7684\u521d\u503c\u3002</p> <p>\u52a0\u6cd5: Gradient Distributer</p> <p></p> <p>\u4e58\u6cd5: Gradient Switcher</p> <p></p> <p>\u4e2d\u95f4\u8282\u70b9\u5408\u5e76 - Sigmoid Function $$ \\sigma(x) = \\frac{1}{1 + e^{-x}} $$ \u53ef\u4ee5\u76f4\u63a5\u6c42\u5bfc\uff0c\u7136\u540e\u628a\u51e0\u4e2a\u4e2d\u95f4\u8282\u70b9\u5408\u5728\u4e00\u8d77\u3002 $$ \\frac{\\mathrm{d}\\sigma(x)}{\\mathrm{d}x} = \\frac{e^{-x}}{(1 + e<sup>{-x})</sup>2} = (\\frac{1 + e^{-x} - 1}{1 + e^{-x}})(\\frac{1}{1 + e^{-x}}) = (1 - \\sigma(x))\\sigma(x) $$ \u56e0\u4e3a\u53ef\u4ee5\u6c42\u51fa\u5b83\u7684 Local Gradient\uff0c\u6240\u4ee5\u53ef\u4ee5\u7a0d\u5fae\u6574\u5408\u4e00\u4e0b\u3002</p> <p>\u6700\u503c: Gradient Router</p> <p></p> <p>\u591a\u4e2a\u8f93\u51fa</p> <p>\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\uff0c\u5c06\u4e24\u4e2a\u8f93\u51fa\u4f20\u8fc7\u6765\u7684\u68af\u5ea6\u76f8\u52a0\u3002 $$ \\frac{\\mathrm{d}f}{\\mathrm{d}x} = \\sum_i \\frac{\\mathrm{d}f}{\\mathrm{d}q_i}\\frac{\\mathrm{d}q_i}{\\mathrm{d}x} $$</p>"},{"location":"CS231n/#_4","title":"\u5411\u91cf\u60c5\u5f62","text":"<p>\u4f7f\u7528 Jacobi \u77e9\u9635\u548c\u77e9\u9635\u5fae\u5546\u66ff\u4ee3\u521a\u521a\u7684\u4e00\u7ef4\u5bfc\u6570\u3002</p> <p>\u77e9\u9635\u5fae\u5546\u5b9a\u4e49\uff1a\u8bbe X \u662f m\\times n \u77e9\u9635\uff0cy = f(X)\\in \\mathbb{R} \u662f X \u7684\u4e00\u4e2a\u5b9e\u503c\u51fd\u6570\uff0c\u5219\u5b9e\u6570 y \u5bf9 X \u7684\u5fae\u5546\u5b9a\u4e49\u4e3a $$ \\frac{\\partial y}{\\partial X} \\xlongequal{\\triangle} \\begin{bmatrix} \\frac{\\partial y}{\\partial x_{11}} &amp; \\frac{\\partial y}{\\partial x_{12}} &amp; \\cdots &amp; \\frac{\\partial y}{\\partial x_{1n}}\\ \\frac{\\partial y}{\\partial x_{21}} &amp; \\frac{\\partial y}{\\partial x_{22}} &amp; \\cdots &amp; \\frac{\\partial y}{\\partial x_{2n}}\\ \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots \\ \\frac{\\partial y}{\\partial x_{n1}} &amp; \\frac{\\partial y}{\\partial x_{n2}} &amp; \\cdots &amp; \\frac{\\partial y}{\\partial x_{nn}}\\ \\end{bmatrix} $$ \u6240\u4ee5\u8fd9\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u79cd\u8bb0\u53f7\uff0c\u5bf9\u77e9\u9635/\u5411\u91cf\u6c42\u5bfc\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6c42\u5bfc\uff0c\u518d\u6309\u7167\u539f\u6709\u7684\u987a\u5e8f\u6446\u597d\u3002</p> <p>\u7531\u6b64\u4e3e\u4f8b\uff1af(\\boldsymbol{x},W) = ||W\\boldsymbol{x}||^2 = \\boldsymbol{x}'W'W\\boldsymbol{x} = \\sum_{i=1}^n (W\\boldsymbol{x})_i^2\\xlongequal{\\triangle}\\sum_{k=1}^n q_k^2 = \\boldsymbol{q}'\\boldsymbol{q}\u3002\u6c42 \\dfrac{\\partial f}{\\partial W}\uff0c\\dfrac{\\partial f}{\\partial \\boldsymbol{x}}\u3002 $$ \\boldsymbol{q} = W\\boldsymbol{x} = \\begin{bmatrix} W_{11}x_1 + \\cdots + W_{1n} x_n\\ W_{21}x_1 + \\cdots + W_{2n} x_n\\ \\cdots\\ W_{n1}x_1 + \\cdots + W_{nn} x_n\\ \\end{bmatrix} $$ \u7531\u77e9\u9635\u5fae\u5546\uff0c\\dfrac{\\mathrm{d}f}{\\mathrm{d}\\boldsymbol{q}} = I_n\\boldsymbol{q} + I_n'\\boldsymbol{q} = 2\\boldsymbol{q}\uff0c\u662f\u4e2a\u5411\u91cf\u3002</p> <p>\u800c\u8981\u60f3\u6c42 \\dfrac{\\partial f}{\\partial W}\uff0c\u5373\u6c42 \\dfrac{\\partial f}{\\partial W_{ij}} $$ \\dfrac{\\partial f}{\\partial W_{ij}} = \\sum_{k=1}^n\\dfrac{\\partial f}{\\partial q_{k}}\\dfrac{\\partial q_k}{\\partial W_{ij}} = \\sum_{k=1}^n 2q_k x_j\\delta_{k-i} = 2q_ix_j $$ \u5f97\u5230 $$ \\dfrac{\\partial f}{\\partial W} = \\begin{bmatrix} 2q_1x_1 &amp; 2q_1x_2 &amp; \\cdots &amp; 2q_1x_n\\ 2q_2x_1 &amp; 2q_2x_2 &amp; \\cdots &amp; 2q_2x_n\\ \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots \\ 2q_nx_1 &amp; 2q_nx_2 &amp; \\cdots &amp; 2q_nx_n\\ \\end{bmatrix} $$ \u540c\u7406\uff0c\u8981\u60f3\u6c42 \\dfrac{\\partial f}{\\partial \\boldsymbol{x}}\uff0c\u5373\u6c42 \\dfrac{\\partial f}{\\partial x_i} $$ \\dfrac{\\partial f}{\\partial x_i} = \\sum_{k=1}^n\\dfrac{\\partial f}{\\partial q_{k}}\\dfrac{\\partial q_k}{\\partial x_{i}} = \\sum_{k=1}^n 2q_k W_{ki} $$ \u5f97\u5230 \\dfrac{\\partial f}{\\partial \\boldsymbol{x}} = 2W'\\boldsymbol{q}\u3002</p> <pre><code>class ComputationalGraph(object):\n    def forward(inputs):\n        for gate in self.graph.nodes_topologically_sorded():\n            gate.forward()\n        return loss # The final gate in the graph outputs the loss\n    def backward():\n        for gate in reversed(self.graph.nodes_topologically_sorded()):\n            gate.backward()\n        return inputs_gradients\nclass MultiplyGate(object):\n    def forawrd(x, y):\n        z = x * y\n        self.x = x\n        self.y = y\n        return z\n    def backward(dz):\n        dx = self.y * dz\n        dy = self.x * dz\n        return [dx, dy]\n</code></pre>"},{"location":"CS231n/#5-convolutional-neural-network","title":"5 Convolutional Neural Network","text":""},{"location":"CS231n/#neural-network","title":"Neural Network","text":"<pre><code>import numpy as np\nfrom numpy.random import randn\n\nN, D_in, H, D_out = 64, 1000, 100, 10\nx, y = randn(N, D_in), randn(N, D_out)\nw1, w2 = randn(D_in, H), randn(H, D_out)\n\nfor t in range(2000):\n    h = 1 / (1 + np.exp(-x.dot(w1)))\n    y_pred = h.dot(w2)\n    loss = np.square(y_pred - y).sum()\n    print(t, loss)\n\n    grad_y_pred = 2.0 * (y_pred - y)\n    grad_w2 = h.T.dot(grad_y_pred)\n    grad_h = grad_y_pred.dot(w2.T)\n    grad_w1 = x.T.dot(grad_h * h * (1 - h))\n\n    w1 -= 1e-4 * grad_w1\n    w2 -= 1e-4 * grad_w2\n</code></pre> <p>\u591a\u79cd\u6fc0\u6d3b\u51fd\u6570 Activation Functions\uff1aSigmoid, tanh, ReLU, Leaky ReLU, Maxout, ELU, ...</p> <p></p> <p>\u4e24\u5c42\u795e\u7ecf\u7f51\u7edc</p> <p></p> <p>\u5982\u679c\u518d\u52a0\u4e00\u4e2a\u9690\u85cf\u5c42\uff0c\u79f0\u4e3a\u4e09\u5c42\u795e\u7ecf\u7f51\u7edc\u3002</p> <pre><code>class Neuron:\n    def neuron_tick(inputs):\n        cell_body_sum = np.sum(inputs * self.weights) + self.bias\n        firing_rate = 1.0 / (1.0 + math.exp(-ceil_body_sum))\n        # \u7ecf\u8fc7\u6fc0\u6d3b\u51fd\u6570\u540e\u7684\u503c\n        return firing_rate\n</code></pre> <p>\u5168\u8fde\u63a5\u5c42\uff1a</p> <p>\u6bcf\u4e00\u4e2a\u6837\u672c\u8ba1\u7b97\u51fa\u4e00\u4e2a value\uff0c\u628a\u8fd9\u4e9b value \u5199\u5728\u4e00\u8d77\u5171\u540c\u7ec4\u6210\u4e00\u4e2a\u5411\u91cf\u79f0\u4e3a\u201c\u5168\u8fde\u63a5\u201d\u3002</p>"},{"location":"CodingBugNotes/","title":"Stupid Moments and Coding Notes","text":""},{"location":"CodingBugNotes/#multi-for","title":"Multi-<code>for</code>","text":"<pre><code>for (int i = 0; i &lt; size0; i++)\n    for (int i = 0; i &lt; size1; i++)\n        ;\n</code></pre> <p><code>i</code> and <code>j</code> !</p>"},{"location":"MkDocs/","title":"\u4f7f\u7528 MkDocs + Github \u642d\u5efa\u535a\u5ba2","text":"<p>\u5e76\u672a\u4f7f\u7528 GitHub Pages\uff0c\u53ea\u662f\u65b0\u5efa\u4e86\u666e\u901a\u7684 GitHub \u4ed3\u5e93\u3002</p>"},{"location":"MkDocs/#_1","title":"\u4e3b\u9898","text":"<p>MkDocs: https://www.mkdocs.org</p> <p>Material MkDocs: https://squidfunk.github.io/mkdocs-material</p>"},{"location":"MkDocs/#_2","title":"\u5e38\u7528\u547d\u4ee4","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Publish to *.github.io/{Repository_NAME}</li> </ul> <p>\u7531\u4e8e GitHub \u5728\u547d\u4ee4\u884c\u4e2d\u540c\u6b65\u53ef\u80fd\u51fa\u73b0\u4ee3\u7406\u7b49\u95ee\u9898\uff0c\u4e0d\u59a8\u4f7f\u7528 GitHub Desktop \u8fdb\u884c\u540c\u6b65\u3002\u5728 <code>master</code> \u5206\u652f\u4e2d\u8bbe\u7f6e workflow \u540e\uff0c\u5373\u53ef\u81ea\u52a8\u5c06\u66f4\u6539\u66f4\u65b0\u81f3\u7f51\u9875\u4e2d\u3002</p>"},{"location":"MkDocs/#_3","title":"\u641c\u7d22\u5f15\u64ce\u7d22\u5f15","text":""},{"location":"MkDocs/#google","title":"Google","text":"<p>\u5728 https://search.google.com/search-console \u4e2d\u6dfb\u52a0\u8d44\u6e90\u3002\u6dfb\u52a0\u65f6\u9700\u8981\u9a8c\u8bc1\u81ea\u5df1\u7684\u6240\u6709\u6743\uff0c\u91c7\u7528 HTML \u6807\u8bb0\u7684\u65b9\u5f0f\u3002</p> <p>\u4f7f\u7528\u8986\u76d6 HTML Title \u7684\u65b9\u6cd5\u5b8c\u6210\uff1ahttps://squidfunk.github.io/mkdocs-material/customization/#overriding-partials</p> <p>\u76ee\u5f55\uff1a</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 main.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p><code>main.html</code> \u4ee3\u7801\uff1a</p> <pre><code>{% extends \"base.html\" %}\n\n{% block htmltitle %}\n  &lt;title&gt;WJK's Blog&lt;/title&gt;\n  &lt;meta name=\"google-site-verification\" content=\"1234567812345678abcdefghijk1234567812345678\" /&gt;\n{% endblock %}\n</code></pre>"},{"location":"MkDocs/#bing","title":"Bing","text":"<p>\u5728 https://www.bing.com/webmasters \u4e2d\uff0c\u767b\u5f55\u5fae\u8f6f\u8d26\u6237\u6216\u8c37\u6b4c\u8d26\u6237\u540e\uff0c\u76f4\u63a5\u901a\u8fc7 Google Search Console \u5bfc\u5165\u5373\u53ef\u3002</p>"},{"location":"MkDocs/#_4","title":"\u516c\u5f0f","text":"<p>\u91c7\u7528 https://cyent.github.io/markdown-with-mkdocs-material/syntax/math_main/ \u4e2d\u7684\u65b9\u6cd5</p> <p>\u7528\u4e8eTeX\u6570\u5b66\u516c\u5f0f\u7684\u5c55\u793a\uff0c\u4f7f\u7528\u4e4b\u524d\u8981\u5148\u5728docs/\u91cc\u521b\u5efajavascripts\u76ee\u5f55\uff0c\u5e76\u5728\u76ee\u5f55\u4e2d\u653e\u7f6eextra.js</p> <p>\u4f9d\u8d56\u6a21\u5757: pymdownx.arithmatex</p> <p>\u76ee\u5f55\uff1a</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 js/ \n\u2502     \u2514\u2500 extra.js\n\u2514\u2500 mkdocs.yml\n</code></pre> <p><code>extra.js</code> \u4ee3\u7801\uff1a</p> <pre><code>window.MathJax = {\n  tex2jax: {\n    inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],\n    displayMath: [ [\"\\\\[\",\"\\\\]\"] ]\n  },\n  TeX: {\n    TagSide: \"right\",\n    TagIndent: \".8em\",\n    MultLineWidth: \"85%\",\n    equationNumbers: {\n      autoNumber: \"AMS\",\n    },\n    unicode: {\n      fonts: \"STIXGeneral,'Arial Unicode MS'\"\n    }\n  },\n  displayAlign: \"left\",\n  showProcessingMessages: false,\n  messageStyle: \"none\"\n};\n</code></pre> <p><code>mkdocs.yml</code> \u540e\u6dfb\u52a0\u5185\u5bb9\uff1a</p> <pre><code>extra_javascript:\n    - 'js/extra.js'\n    - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML'\n</code></pre>"},{"location":"MkDocs/#_5","title":"\u53c2\u8003","text":"<p>https://affectalways.github.io/hugo_seo/</p> <p>https://cyent.github.io/markdown-with-mkdocs-material/</p>"},{"location":"Data%20Structure/ADS%20Notes/","title":"Advanced","text":""},{"location":"Data%20Structure/ADS%20Notes/#lecture-0-introduction","title":"Lecture 0. Introduction","text":"<p>\u62a2\u4e00\u4e2a\u505a\u5c55\u793a\u7684Project\uff0c\u536020\u5206 + \u4e00\u4e2a\u4e0d\u505a\u5c55\u793a\u7684 Bonus</p> <p></p> <p>Omega \u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u9650 / O \u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9650</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-1-avl-trees-splay-trees-and-amortized-analysis","title":"Lecture 1. AVL Trees, Splay Trees, and Amortized Analysis","text":""},{"location":"Data%20Structure/ADS%20Notes/#avl-trees","title":"AVL Trees","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u5de6\u5b50\u6811\u6bd4\u6839\u5c0f\uff0c\u53f3\u5b50\u6811\u6bd4\u6839\u5927 - \u8981\u4f7f\u5f97\u5b83\u66f4\u53ef\u80fd\u5e73\u8861\u3002</p> <p>AVL: T is Height Balanced\uff1a\u5de6\u5b50\u6811 \u4e0e \u53f3\u5b50\u6811 \u7684 \u5dee \u7684\u7edd\u5bf9\u503c \\leq 1\u3002</p> <p>Balance Factor (BF) = h_L - h_R\uff0c\u5e73\u8861\u6811\u4e2d\u5e94\u4e3a -1, 0, \\text{or } 1\u3002</p> <p>siblings\uff1a\u5144\u5f1f\u59d0\u59b9\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#rotations","title":"Rotations","text":"<p>RR Rotation: Trouble Maker (\u521a\u8fdb\u5165\u7684\u8282\u70b9) in the RR (Right subtree's Right subtree) of Trouble Finder (\u53d1\u73b0\u4e0d\u5e73\u8861\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9)</p> <p></p> <p>\u628a B \u7684\u5de6\u5b50\u6811\u8fde\u5230 A \u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u628a A \u4f5c\u4e3a B \u7684\u5de6\u5b50\u6811\u3002\u8981\u8bb0\u5f97\u66f4\u65b0\u8fd9\u4e00\u5768\u4e0e\u4ed6\u4eec\u7684\u7236\u4eb2\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u5373\u628a A \u539f\u6765\u7684\u7236\u4eb2\u53d8\u6210 B \u7684\u7236\u4eb2\u3002</p> <p>LL Rotation: \u7c7b\u4f3c\u5730\uff0cTrouble Maker \u662f Trouble Finder \u7684 LL </p> <p></p> <p>\u628a B \u7684\u53f3\u5b50\u6811\u8fde\u5230 A \u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u628a A \u4f5c\u4e3a B \u7684\u53f3\u5b50\u6811\u3002\u540c\u65f6\u8981\u66f4\u65b0\u7236\u4eb2\u3002</p> <p>\u4e0a\u9762\u4e24\u79cd\u53eb\u4f5c \u201c\u5355\u65cb\u201d\u3002</p> <p>LR Rotation: Trouble Maker \u5728 Trouble Finder A \u7684 LR\uff0c\u5373 C\uff1b\u65e0\u8bba\u5728 C \u7684\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u4e0a\uff0c\u90fd\u628a C \u5f53\u6210\u65b0\u7684\u6839\u8282\u70b9\u3002</p> <p></p> <p>RL Rotation: </p> <p></p> <p>\u8fd9\u4e24\u79cd\u4e5f\u53eb\u505a \u201c\u53cc\u65cb\u201d\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#time-complexity","title":"Time Complexity","text":"<p>Let n_h be the minimum number of nodes in a height balanced tree of height h (the height of root is 0). </p> <p>\u9ad8\u4e3a h \u7684\u6811\u4e2d\u7684\u6700\u5c11\u8282\u70b9\u6570</p> <p>\u6211\u4eec\u6709\u9012\u63a8\u5f0f\uff1an_h = n_{h - 1} + n_{h - 2} + 1</p> <p></p> <p>\u53ef\u4ee5\u8bc1\u660e $$ n_h = Fib_{h + 2} - 1, \\forall h\\geq 0 $$ \u7531 Fibonacci \u6570\u5217\u901a\u9879\u516c\u5f0f\u77e5\uff0ch = O(\\log n)\u3002</p> <p>\u5220\u9664\uff1a\u5bf9\u4e8e\u53f6\u8282\u70b9\uff0c\u76f4\u63a5\u5220\u9664\uff1b\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\u7684\u5220\u9664\uff0c\u8f6c\u5316\u4e3a\u5bf9\u53f6\u5b50\u8282\u70b9\u7684\u5220\u9664</p> <ol> <li>\u82e5\u4e00\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u53ea\u6709\u5de6\u5b69\u5b50\u3002\u64cd\u4f5c\uff1a\u8be5\u8282\u70b9\u7684\u503c\u66ff\u6362\u4e3a\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u5220\u9664\u5de6\u5b69\u5b50\u8282\u70b9\u3002\u3010\u5de6\u5b69\u5b50\u8282\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u5220\u9664\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u60c5\u51b5\u4e3a\u7b2c1\u79cd\u60c5\u51b5\u3002\u3011\u3010\u4e3a\u4ec0\u4e48\u5de6\u5b69\u5b50\u8282\u70b9\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u56e0\u4e3a\u5220\u9664\u8282\u70b9\u524d\uff0c\u8be5\u6811\u662fAVL\u6811\uff0c\u7531AVL\u6811\u7684\u5b9a\u4e49\u77e5\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c&lt;=1,\u7531\u4e8e\u8be5\u8282\u70b9\u53ea\u6709\u5de6\u5b69\u5b50\uff0c\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u5982\u679c\u5de6\u5b69\u5b50\u8fd8\u6709\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c06\u4e0d\u6ee1\u8db3\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c&lt;=1\uff0c\u6240\u4ee5\u5de6\u5b69\u5b50\u8282\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\u3011</li> <li>\u82e5\u4e00\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u53ea\u6709\u53f3\u5b69\u5b50\u3002\u64cd\u4f5c\uff1a\u8be5\u8282\u70b9\u7684\u503c\u66ff\u6362\u4e3a\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u5220\u9664\u53f3\u5b69\u5b50\u8282\u70b9\u3002\u3010\u53f3\u5b69\u5b50\u8282\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u5220\u9664\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u60c5\u51b5\u4e3a\u7b2c1\u79cd\u60c5\u51b5\u3002\u3011\u3010\u4e3a\u4ec0\u4e48\u53f3\u5b69\u5b50\u8282\u70b9\u4e3a\u53f6\u5b50\u8282\u70b9\uff1f\u7b54\u6848\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e00\u6837\u3011</li> <li>\u82e5\u4e00\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u65e2\u6709\u5de6\u5b69\u5b50\uff0c\u53c8\u6709\u53f3\u5b69\u5b50\u3002\u64cd\u4f5c\uff1a\u8be5\u8282\u70b9\u7684\u503c\u66ff\u6362\u4e3a\u8be5\u8282\u70b9\u7684\u524d\u9a71\u8282\u70b9\uff08\u6216\u8005\u540e\u7ee7\u8282\u70b9\uff09\uff0c\u7136\u540e\u5220\u9664\u524d\u9a71\u8282\u70b9\uff08\u6216\u8005\u540e\u7ee7\u8282\u70b9\uff09\u3002\u3010\u524d\u9a71\u7ed3\u70b9:\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\uff0c\u5148\u627e\u5230\u8be5\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9\uff0c\u518d\u627e\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u53f3\u5b69\u5b50\u8282\u70b9\u3002\u5411\u5de6\u8d70\u4e00\u6b65\uff0c\u7136\u540e\u5411\u53f3\u8d70\u5230\u5934\u3002\u6700\u540e\u4e00\u4e2a\u53f3\u5b69\u5b50\u8282\u70b9\u5373\u4e3a\u524d\u9a71\u8282\u70b9\u3011\u3010\u540e\u7ee7\u8282\u70b9\uff1a\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\uff0c\u5148\u627e\u5230\u8be5\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u518d\u627e\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u5de6\u5b69\u5b50\u8282\u70b9\u3002\u5411\u53f3\u8d70\u4e00\u6b65\uff0c\u7136\u540e\u5411\u5de6\u8d70\u5230\u5934\u3002\u6700\u540e\u4e00\u4e2a\u5de6\u5b69\u5b50\u8282\u70b9\u5373\u4e3a\u524d\u9a71\u8282\u70b9\u3011</li> </ol> <p>\u5220\u9664\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u91cd\u65b0\u5e73\u8861\uff0c\u5e76\u66f4\u65b0 BF \u503c\uff0c\u8fd9\u662f O(\\log n) \u7684\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#assignment","title":"Assignment","text":"<p>\u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u8981\u628a\u8fde\u5411 <code>father</code> \u7684\u548c\u4ece <code>father</code> \u8fde\u51fa\u6765\u7684\uff0c\u90fd\u8fde\u597d\uff08\u8981\u6ce8\u610f\u6839\u7684\u95ee\u9898\uff09\u3002</p> <p>\u8981\u8bb0\u5f97\u8f6c\u4e4b\u524d\uff0c\u4ece\u6700\u4e0b\u9762\u5f80\u4e0a\u66f4\u65b0 Height</p> <p>\u8f6c\u7684\u65f6\u5019\uff0c\u8981\u628a\u8f6c\u7684\u8fc7\u7a0b\u4e2d Height \u7684\u6539\u53d8\u66f4\u65b0</p> <p>\u8f6c\u4e4b\u540e\uff0c\u8981\u628a\u5230\u6839\u7684 Height \u66f4\u65b0</p> <p>\u540c\u65f6\u8981\u7ef4\u62a4\u6839\uff0c\u4ee5\u4fbf\u627e\u5230\u6811\u5728\u54ea</p>"},{"location":"Data%20Structure/ADS%20Notes/#splay-trees","title":"Splay Trees","text":"<p>\u5bf9\u4e8e\u4efb\u610f M \u4e2a\u64cd\u4f5c\uff0c\u4ece\u7a7a\u6811\u5f00\u59cb\u9010\u6b65\u5b8c\u6210\u5b83\u4eec\u6240\u7528\u7684\u65f6\u95f4\u6700\u591a\u662f O(M\\log n) \u7684\u3002</p> <p>AVL Tree \u662f\u4e00\u79cd Splay Tree\u3002</p> <p>Splay Tree \u7684\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u4e0d\u4e00\u5b9a\u662f O(\\log n) \u7684\uff0c\u4f46\u662f Amotized Time\uff08\u644a\u8fd8\u65f6\u95f4\uff09\u662f O(\\log n) \u7684\u3002\u5355\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u53ef\u80fd\u574f\u5230 O(n)\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709 M \u6b21\u4e00\u76f4\u574f\u4e0b\u53bb\uff0c\u4e4b\u540e\u7684\u65f6\u95f4\u80af\u5b9a\u8ddf\u7b2c\u4e00\u6b21\u4e0d\u4e00\u6837\uff0c\u5728\u6162\u6162\u53d8\u597d\u3002</p> <p>\u5728\u4e00\u822c\u7684 Splay \u4e2d\uff0c\u6bcf\u6b21\u8bbf\u95ee\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u7528 AVL Rotation \u628a\u5b83\u8f6c\u5230\u6839\u8282\u70b9\u3002\u4f46\u662f\uff0c\u4e0d\u80fd\u53ea\u4f7f\u7528\u5355\u65cb\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u4f7f\u5f97\u60c5\u51b5\u66f4\u7cdf\u3002</p> <p>\u65cb\u8f6c</p> <p>\u4e09\u79cd\u60c5\u51b5\uff1aX.father = root(Zig), Zig-Zag, Zig-Zig</p> <p>\u52bf\u80fd\u51fd\u6570\uff1a\\Phi(T) = \\sum_{t\\in T} \\log S(t)\uff0cS(t) \u8868\u793a\u4ee5 t \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u70b9\u7684\u4e2a\u6570\uff08\u5305\u62ec\u8fd9\u4e2a\u6839\uff09\uff0c\u4e3a\u4fbf\u4e8e\u8868\u793a\uff0c\u6211\u4eec\u8bb0 \\log S(t) \u4e3a R(t)\uff0c\u79f0\u4e3a t \u7684 \\rank\u3002</p> <p>Zig:</p> <p>Zig-Zig: $$ \\hat{c} = c + \\phi(T_2) - \\phi(T_1) $$ \u5177\u4f53\u8ba1\u7b97\u8be6\u89c1YDS\u7684pdf\u3002</p> <p>\u52bf\u80fd\u51fd\u6570\u7684\u6539\u53d8\uff0c\u53ef\u80fd\u662f\u8d1f\u7684\uff0c\u56e0\u4e3a\u662fSUM S_i\uff0c\u4f46\u6211\u4eec\u53ea\u9700\u8981\u4e0a\u754c\u5373\u53ef</p> <p>\u67e5\u627e</p> <p>\u6bcf\u627e\u4e00\u4e2a\u70b9\uff0c\u5c31\u4f1a\u65cb\u8f6c\uff0c\u65cb\u8f6c\u4e00\u6b21\u5c31\u5f80\u4e0a\u8d70\u4e24\u5c42\u3002\u6240\u4ee5\u65cb\u8f6c\u7684\u6b21\u6570\u548c\u5f80\u4e0a\u8d70\u7684\u6b21\u6570\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u8ba4\u4e3a\u67e5\u627e\u7684\u6b21\u6570\u4e5f\u662f O(\\log n) \u7684\u3002</p> <p>\u63d2\u5165</p> <p>\u63d2\u5165 -&gt; \u8f6c\u5230\u6839</p> <p>\u63d2\u5165\u7684\u65f6\u5019\uff0c\u6539\u53d8\u8fc7\u52bf\u80fd\u7684\u53ea\u6709\u4ece\u6839\u5230\u63d2\u5165\u8282\u70b9\u8fd9\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u70b9\uff08\u8bbe\u4e3a Y_i\uff09\u7684\u52bf\u80fd\u51fd\u6570\u3002 $$ \\Delta \\Phi = \\sum \\log (S(Y_i) + 1) - \\log S(Y_i) = \\log\\prod \\frac{S(Y_i) + 1}{S(Y_i)}\\leq \\log \\prod \\frac{S(Y_{i+1})}{S(Y_i)} \\ = \\log\\frac{S(Y_n) + 1}{S(Y_0)} \\leq \\log n $$ \u5220\u9664</p> <p>\u627e\u5230 X \u5e76\u8f6c\u5230\u6839 -&gt; \u5220\u9664\u6839 -&gt; \u627e\u5230\u5de6\u5b50\u6811\u4e2d\u6700\u5927\u7684\u8282\u70b9\u5e76\u8f6c\u5230\u6839\uff08\u5b83\u4e00\u5b9a\u6ca1\u6709\u53f3\u5b50\u6811\uff09 -&gt;  \u628a\u539f\u6765\u7684\u53f3\u5b50\u6811\u53d8\u6210\u5b83\u7684\u53f3\u5b50\u6811</p> <p>\u603b\u7ed3\uff1a\u5bf9\u4e8e Splay Tree\uff0c\u6211\u4eec\u4e0d\u5173\u5fc3\u662f\u5426\u5e73\u8861\uff0c\u6211\u4eec\u53ea\u53bb\u95ed\u7740\u773c\u775b\u505a\u65cb\u8f6c\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#amotized-analysis","title":"Amotized Analysis","text":"<p>Worst-Case Bound is Stronger than Amotized Bound: AVL Tree \u7684 Worst-Case Bound \u662f O(\\log n)\uff0c\u4f46\u662f Splay Tree \u53ea\u4fdd\u8bc1 Amotized Bound \u662f O(\\log n) \u7684\u3002</p> <p>Average-Case Bound is Weaker than Amotized Bound : \u4e00\u822c\u4f1a\u52a0\u5165\u4e00\u4e9b\u6982\u7387\u5047\u8bbe\uff0c\u5047\u8bbe\u67d0\u4e00\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u662f\u591a\u5927\uff1a\u5982\uff0c\u5feb\u6392\u7684 Worst-Case Bound \u662f O(n^2) \u7684\uff0c\u4f46\u662f\u5982\u679c\u5047\u8bbe\u4efb\u4f55\u6392\u5217\u662f\u7b49\u6982\u7387\u53d1\u751f\u7684\uff0cAverage-Cost Bound \u5c31\u662f O(\\log n) \u7684</p> <p>Amotized Bound \u6ca1\u6709\u6982\u7387\u5047\u8bbe\uff0c\u662f\u6240\u6709\u60c5\u51b5\u7684\u771f\u5b9e\u5e73\u5747\u503c\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#aggregate-analysis","title":"Aggregate Analysis","text":"<p>\u603b\u548c/\u603b\u91cf\u5206\u6790\uff1aShow that for all n, a sequence of n operations takes worst-case time T(n) in total.  In the worst case, the average cost, or amortized cost, per operation is therefore T(n)/n.</p> <p></p>"},{"location":"Data%20Structure/ADS%20Notes/#accounting-method","title":"Accounting Method","text":"<p>\u4f1a\u8ba1\u6cd5\uff1aWhen an operation\u2019s amortized cost exceeds its actual cost, we assign the difference to specific objects in the data structure as credit. Credit can help pay for later operations whose amortized cost is less than their actual cost.</p> <p>\u628a\u591a\u51fa\u6765\u7684\u5b58\u8d77\u6765\uff0c\u518d\u5728\u5c11\u7684\u65f6\u5019\u8fd8\u56de\u53bb $$ T_{amortized} = \\frac{\\sum_{i}\\hat{c_i}}{n}\\geq \\frac{\\sum_{i}{c_i}}{n} $$ \\hat{c_i} is Amortized Cost for each opertion, c_i is Actual Cost, T is an upper bound.  $$ \\text{credit}_i = \\hat{c}_i-c_i $$ \u6211\u4eec\u53ef\u4ee5\u4eba\u4e3a\u5b9a\u4e49\u4e00\u4e2a\u6bd4\u771f\u6b63 Cost \u8981\u5927\u7684\u7684 Amortized Cost\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2a Amortized Cost \u662f\u5426\u900f\u652f\u4fe1\u7528\uff08\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u8fd9\u4e2a Credits \u65f6\u523b\u975e\u8d1f\uff09\uff0c\u5982\u679c\u4e0d\u900f\u652f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4eba\u4e3a\u5b9a\u4e49\u7684\u8fd9\u4e2a Amortized Cost \u6765\u8ba1\u7b97\u603b\u7684 Amortized Cost\u3002</p> <p></p> <p>\u5728\u8fd9\u91cc\uff0c\u6bcf\u4e00\u6b65\u64cd\u4f5c\u7684\u6d88\u8017\u662f\u4e0d\u540c\u7684\uff0c\u662f\u7531\u6211\u4eec\u4eba\u4e3a\u5b9a\u4e49\u5f97\u5230\u7684\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#potential-method","title":"Potential Method","text":"<p>\u52bf\u80fd\u51fd\u6570\u6cd5</p> <p>\u52bf\u80fd\u51fd\u6570\u53ef\u4ee5\u628a\u5f53\u524d\u7684\u7ed3\u6784\u6620\u5c04\u5230\u4e00\u4e2a\u6570\u5b57\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u7ed3\u6784\u7684 Potential\uff08\u52bf\uff09\u3002 $$ \\hat{c_i} - c_i = \\text{credit}i = \\Phi(D{\\text{after }op_i}) - \\Phi(D_{\\text{before }op_i}) $$ \u5b9e\u9645\u4e0a\u662f\u628a Accounting Method \u91cc\u7684 \\hat{c}_i\\geq c_i \u7ed9\u91cf\u5316\u4e3a \\hat{c}_i-c_i = \\Delta \\Phi \u4e86\u3002</p> <p>credit \u544a\u8bc9\u6211\u4eec\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5bf9\u5f53\u524d\u7ed3\u6784\u6539\u53d8\u4e86\u591a\u5c11 $$ \\sum_{i} \\hat{c_i} = \\sum_{i} \\big(c_i + \\Phi(D_i) - \\Phi(D_{i - 1})\\big) = \\sum_{i} c_i + \\Phi(D_n) - \\Phi(D_0) $$ \u96be\u70b9\u5728\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u597d\u7684\u52bf\u80fd\u51fd\u6570\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u5f00\u9500\u5927\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u60f3\u8ba9\u4ed6\u7684\u52bf\u80fd\u51fd\u6570\u5c3d\u53ef\u80fd\u964d\u4f4e\u3002</p> <p>\u67d0\u4e00\u6b65\u7684\u52bf\u80fd\u51fd\u6570\u53ef\u80fd\u662f\u8d1f\u7684\uff0c\u4f46\u662f\u603b\u4f53\u7684\u52bf\u80fd\u51fd\u6570\u7684\u5dee\u80af\u5b9a\u662f\u6b63\u7684???</p> <p>\u53ea\u8981\u4f7f\u5f97 \\Phi(D_n) - \\Phi(D_0)\\geq 0\uff0c\u5c31\u53ef\u4ee5\u7528 \\sum \\hat{c_i} / n \u6765\u4f5c\u4e3a Amortized Cost\u3002</p> <p>\u4e00\u822c\u6211\u4eec\u8981\u627e\u7684\u8fd9\u4e2a\u52bf\u80fd\u51fd\u6570\u5728 D_0 \u53d6\u6700\u5c0f\u503c\u3002</p> <p></p> <p>FALSE: For potential method, a good potential function should always assume its maximum at the start of the sequence</p>"},{"location":"Data%20Structure/ADS%20Notes/#charging-method","title":"Charging Method","text":"<p>Amortized Cost of Operation = Actural Cost + Total Change to past operation + total future change by future ops to this op</p> <p>e.g. vector \u52a8\u6001\u5f00\u5185\u5b58</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-2-red-black-trees-and-b-trees","title":"Lecture 2. Red-Black Trees and B+ Trees","text":""},{"location":"Data%20Structure/ADS%20Notes/#red-black-trees","title":"Red-Black Trees","text":"<p>\u5e73\u8861\u6811\uff1a\u53ea\u8981\u5c42\u6570\u662f O(\\log n) \u5373\u53ef\u3002</p> <p>AVL \u9700\u8981\u6bcf\u6b21\u90fd\u5f97\u7b97\uff0c\u66f4\u65b0\u4ee3\u4ef7\u6bcf\u6b21\u90fd\u662f O(\\log n)\uff0c\u5e38\u6570\u5927\uff1b\u7ea2\u9ed1\u6811\u7528\u989c\u8272\u4fdd\u6301\u5e73\u8861\uff0c\u7528 O(1) \u7684 Amotized Cost \u5373\u53ef\u3002</p> <ul> <li>\u6839\u662f\u9ed1\u7684</li> <li>\u53f6\u8282\u70b9(NIL)\u662f\u9ed1\u7684\uff0c\u5982\u679c\u53f6\u8282\u70b9\u662f\u7ea2\u7684\uff0c\u90a3\u5c31\u518d\u8fde\u4e0a\u4e00\u4e2a\u9ed1\u7684 NIL\u3002</li> <li>\u7ea2\u8272\u8282\u70b9\u7684\u5b69\u5b50\u90fd\u662f\u9ed1\u7684\uff08\u9ed1\u7684\u53ef\u4ee5\u8fde\u7eed \u4f46\u7ea2\u7684\u4e0d\u80fd\u8fde\u7eed\uff09</li> <li>\u5bf9\u6bcf\u4e00\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u5b50\u6811\u5230\u53f6\u8282\u70b9\u7684\u6bcf\u4e00\u6761\u8def\u4e0a\u6240\u7ecf\u8fc7\u7684\u9ed1\u8282\u70b9\u90fd\u76f8\u540c - \u628a\u591a\u4f59\u7684\u70b9\u505a\u6210\u7ea2\u8272\u7684</li> </ul> <p>Black-Height - bh(X): \u4ece X \u8282\u70b9\u5230\u53f6\u8282\u70b9\u7ecf\u8fc7\u591a\u5c11\u9ed1\u70b9\uff08\u4e0d\u7b97\u5b83\u81ea\u5df1\uff09</p> <p>\u6811\u7684 bh \u5b9a\u4e49\u4e3a\u6839\u8282\u70b9\u7684 bh\uff0c\u4e14\u6709\u4e0a\u754c 2\\ln (N + 1)\uff1a\u6570\u5b66\u5f52\u7eb3\u6cd5\u3002</p> <p></p> <p>https://www.cnblogs.com/LiaHon/p/11203229.html</p> <p>\u5220\u9664</p> <p>\u5220\u9664\u7684\u662f\u6839\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u5c06\u6839\u8282\u70b9\u7f6e\u4e3anull;</p> <p>\u5f85\u5220\u9664\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u4e3anull\uff0c\u5220\u9664\u65f6\u5c06\u8be5\u8282\u70b9\u7f6e\u4e3anull;</p> <p>\u5f85\u5220\u9664\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u6709\u4e00\u4e2a\u6709\u503c\uff0c\u5219\u7528\u6709\u503c\u7684\u8282\u70b9\u66ff\u6362\u8be5\u8282\u70b9\u5373\u53ef\uff1b</p> <p>\u5f85\u5220\u9664\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u4e0d\u4e3anull\uff0c\u5219\u627e\u524d\u9a71\u6216\u8005\u540e\u7ee7\uff0c\u5c06\u524d\u9a71\u6216\u8005\u540e\u7ee7\u7684\u503c\u590d\u5236\u5230\u8be5\u8282\u70b9\u4e2d\uff0c\u7136\u540e\u5220\u9664\u524d\u9a71\u6216\u8005\u540e\u7ee7\uff1b</p> <p>\u53d8\u8272\uff1a</p> <p>\u5982\u679c\u5220\u6389\u7ea2\u70b9\uff0c\u4e0d\u7528\u53d8\u8272</p> <p>\u5982\u679c\u5220\u6389\u9ed1\u70b9\uff0c\uff1f\uff1f\uff1f</p> <p>\u6700\u591a\u4e09\u6b21 \u53ef\u4ee5\u770b\u56de\u653e\uff0cworst case</p>"},{"location":"Data%20Structure/ADS%20Notes/#b-tree","title":"B+ Tree","text":"<p>\u5728\u6570\u636e\u5e93\u4e2d\u5efa\u7acb**\u7d22\u5f15**\uff0c\u6240\u6709\u6570\u636e\u90fd\u5b58\u5728\u53f6\u8282\u70b9\u4e0a\u9762\uff0c\u975e\u53f6\u8282\u70b9\u90fd\u662f\u7d22\u5f15\u3002</p> <p>Definition A B+ tree of order M is a tree with the following structural properties:</p> <p>(1)  The root is either a leaf or has between 2 and M children. (2)  All nonleaf nodes (except the root) have between \\lceil M/2\\rceil and M children. (3)  All leaves are at the same depth. Assume each nonroot leaf also has between $\\lceil M/2\\rceil $ and M children.</p> <p>\u5efa\u6811\u65f6\uff0c\u6309\u7167\u4ece\u4e0b\u5f80\u4e0a\u7684\u65b9\u5f0f\u5efa\u3002</p> <p>Find</p> <p>\u76f4\u63a5\u6309\u7167\u641c\u7d22\u6811\u7684\u7d22\u5f15\u627e</p> <p>Insert</p> <p>\u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\uff0c\u4e14\u6ee1\u8db3 between $\\lceil M/2\\rceil $ and M \u4e2a\u5143\u7d20\uff0c\u5c31\u76f4\u63a5\u63d2\u5165\uff1b</p> <p>\u5426\u5219\uff0c\u628a\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8282\u70b9\u632a\u5230\u4e0a\u4e00\u5c42\u4e0a\u53bb\uff0c\u7136\u540e\u628a\u5143\u7d20\u63d2\u8fdb\u53bb\uff0c\u628a\u539f\u6765\u7684\u62c6\u6210\u4e24\u534a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <p>\u6df1\u5ea6\uff1a\\lceil\\log_{\\lceil M/2\\rceil}N\\rceil</p> <p>\u67e5\u627e\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u5c42\u7684\u65f6\u95f4\u90fd\u662f \\log_2 M</p> <p>\u63d2\u5165\u7684\u65f6\u5019\uff0c???</p> <p>\u4f2a\u4ee3\u7801\u6ca1\u6709\u8003\u8651 M-1?</p> <p>\u53f6\u8282\u70b9\u4e5f\u662f\u770b\u4f5c\u6709\u5b69\u5b50\u7684\uff0c\u6240\u4ee5 Order \u4e3a M \u7684 B+ \u6811\uff0c\u53f6\u8282\u70b9\u4e2d\u6700\u5c11\u5b58 \\lceil M/2\\rceil-1 \u4e2a\u6570\uff0c\u6700\u591a\u5b58 M-1 \u4e2a\u6570\u3002\u975e\u53f6\u8282\u70b9\u4e5f\u4e00\u6837\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u6570\u4e0d\u5b58\uff0c\u6240\u4ee5\u5982\u679c\u6709 m \u4e2a\u5b69\u5b50\u7684\u8bdd\uff0c\u5c31\u5b58\u540e m-1 \u4e2a\u6570\u3002</p> <p>\u5220\u9664\uff1a\u8fd8\u9700\u8981\u627e\u5144\u5f1f\uff0c\u5982\u679c\u6709\u5144\u5f1f\u592a\u5c11\u4e86\uff0c\u5c31\u632a\u4e00\u4e9b\u5230\u5144\u5f1f\u90a3\u91cc\uff1a\u5982\u679c\u65c1\u8fb9\u8282\u70b9\u5b69\u5b50\u592a\u5c11\u4e86\uff0c\u5c31\u632a\u8fc7\u53bb\u4e00\u4e9b\uff1b\u5982\u679c\u8fd9\u4e00\u6574\u5c42\u90fd\u5df2\u7ecf\u6700\u5c11\u4e86\u8fd8\u5728\u5220\uff0c\u5c31\u76f4\u63a5\u53bb\u6389\u8fd9\u4e00\u5c42\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-3-inverted-file-index","title":"Lecture 3. Inverted File Index","text":"<p>\u5012\u6392\u7d22\u5f15</p> <p>\u641c\u7d22\u5f15\u64ce\uff1aBFS\u722c\u866b\uff08Hash\u786e\u5b9aVisit\u3001\u533a\u5206\u4f18\u5148\u7ea7\u4e0b\u8f7d\uff09 + \u5efa\u7acb\u7d22\u5f15 \u65b9\u4fbf\u627e\u5230 + Ranking</p> <p>Index \u7ed9\u5b9a\u4e00\u4e2a Term \u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 Index \u5728\u6587\u7ae0\u91cc\u786e\u5b9a\u4f4d\u7f6e</p> <p>Inverted File \u4ee5 Term \u4e3a Index \u518d\u8fdb\u884c\u641c\u7d22\uff0c\u800c\u4e0d\u662f\u4ece\u5404\u4e2a File \u5f00\u59cb\u641c\u7d22</p> <p>\u4f46\u662f\u5982\u679c\u53ea\u80fd\u8bb0\u4e0b\u6765\u67d0\u4e2a Term \u5728\u54ea\u4e9b Docs \u91cc\u51fa\u73b0\uff0c\u4e0d\u80fd\u8bb0\u5f55\u5177\u4f53\u5728\u54ea\u513f\uff0c\u4e4b\u540e\u518d\u627e\u5c31\u8fd8\u4f1a\u5f88\u6162\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u628a\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6765\u3002</p> <p>\u8bb0\u5f55\u7684\u6570\u636e\uff1a\u8bcd\u9891\u3001\u51fa\u73b0\u5728\u54ea\u4e9b\u6587\u6863\u3001\u51fa\u73b0\u5728\u5404\u4e2a\u6587\u6863\u7684\u54ea\u4e9b\u4f4d\u7f6e</p> <p>\u8bcd\u9891\u7684\u610f\u4e49\uff1a\u8bcd\u9891\u8d8a\u9ad8\uff0c\u5176\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u91cf\u8d8a\u5c11\uff1bAND\u64cd\u4f5c\u4ece\u6700\u5c0f\u9891\u7387\u7684 Term \u5f00\u59cb\u6c42\u4ea4\uff0c\u901f\u5ea6\u5feb</p> <pre><code>while ( read a document D ) {\n    while ( read a term T in D ) {\n        if ( Dictionary.Find(T) == false )\n            Dictionary.Insert(T);\n        Get T\u2019s posting list;\n        Insert a node to T\u2019s posting list;\n    }\n}\nWrite the inverted index to disk;\n</code></pre> <ul> <li>\u4ece D \u91cc\u5bfb\u627e\u4e00\u4e2a Term\uff1a\u5206\u8bcd\uff0c\u51e0\u4e2a\u5b57/\u5355\u8bcd\u786e\u5b9a\u4e3a\u4e00\u4e2a Term\uff1b\u9634\u9633\u65f6\u6001\u8bcd\u5f62\u53d8\u5316\uff0c\u5b57\u5f62\u53d8\u5316\uff1b\u5220\u9664\u4e0d\u5fc5\u8981\u7684 Stop Words (a, an, it, to) \u4f46\u662f\u6709\u4e9b\u8fde\u5728\u4e00\u8d77\u53c8\u662f\u6709\u542b\u4e49\u7684 To be or not to be\uff1b\u4e8c\u4e49\u6027\uff0c\u5403\u82f9\u679c\u548c\u82f9\u679c\u7535\u8111</li> <li>Dictionary \u9700\u8981\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff1a\u641c\u7d22\u6811\uff08B\u6811\u3001B+\u6811\u3001\u5b57\u5178\u6811\uff09/ Hash Map</li> </ul> <p>\u7a7a\u95f4\u4e0d\u591f\u65f6</p> <pre><code>BlockCnt = 0; \nwhile ( read a document D ) {\n  while ( read a term T in D ) {\n    if ( out of memory ) {\n      Write BlockIndex[BlockCnt] to disk;\n      BlockCnt ++;\n      FreeMemory;\n    }\n    if ( Find( Dictionary, T ) == false )\n      Insert( Dictionary, T );\n    Get T\u2019s posting list;\n    Insert a node to T\u2019s posting list;\n  }\n}\nfor ( i=0; i&lt;BlockCnt; i++ )\n  Merge( InvertedIndex, BlockIndex[i] );\n</code></pre> <p>\u5206\u5e03\u5f0f\uff1a\u4e0d\u8981\u628a\u6240\u6709\u7684\u4e1c\u897f\u4e22\u5728\u540c\u4e00\u53f0\u7535\u8111\u4e0a\u7b97/\u5b58\uff0c\u53ef\u4ee5\u628a\u4e0d\u540c\u7684\u6587\u7ae0\u653e\u5728\u4e0d\u540c\u7535\u8111\uff0cDocs \u968f\u4fbf\u5206</p> <p>\u5982\u679c Docs \u66f4\u65b0\u4e86\uff0c\u600e\u6837\u968f\u540c\u66f4\u65b0\uff1a\u7c7b\u4f3c Git\uff0c\u6709\u4e00\u4e2a Main Index\uff0c\u518d\u52a0\u4e00\u4e2a\u7c7b\u4f3c\u7f13\u5b58\u7684 Auxiliary index\uff0c\u6c47\u603b\u8d77\u6765\u53bb\u641c\u7d22 Search Results\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\u6ca1\u6709\u95ee\u9898\u4e86\u518d\u628a Auxiliary Index \u6c47\u603b\u5230 Main Index \u4e2d\u3002</p> <p>\u538b\u7f29\uff1a\uff1f\uff1f\u7528\u65f6\u95f4\u6362\u7a7a\u95f4</p> <p>Thresholding\uff1a\u9700\u8981\u53cd\u5e94\u7684\u6bd4\u8f83\u5feb\uff0c\u9996\u5148\u627e\u51fa\u6765\u524dk\u4e2a\uff0c\u7136\u540e\u4e0b\u4e00\u9875\u518d\u51fa\u6765\u540e\u9762\u7684</p> <p>Ranking\uff1aPageRank?</p> <p>\u5efa\u7acb\u65f6\u7684\u901f\u5ea6\u3001\u67e5\u8be2\u65f6\u7684\u901f\u5ea6\u3001\u76f8\u5173\u6027</p> <p>User happiness</p> <ul> <li>Data Retrieval Performance Evaluation (\u6570\u636e\u68c0\u7d22\u6027\u80fd\u8bc4\u4ef7 after establishing correctness)<ul> <li>Response time, Index space</li> </ul> </li> <li>Information Retrieval Performance Evaluation<ul> <li>How relevant is the answer set?Relevance measurement requires 3 elements:</li> </ul> </li> </ul> <p>\u76f8\u5173\u6027\u8bc4\u4ef7\u4e09\u8981\u7d20\uff1a</p> <ul> <li>A benchmark\uff08\u5178\u578b\u6d4b\u8bd5\u96c6\uff0c\u57fa\u51c6\uff09 document collection</li> <li>A benchmark suite of queries</li> <li>A binary assessment of either Relevant or Irrelevant for each query-doc pair</li> </ul> Relevant Irrelevant Retrieved R_R I_R Not Retrieved R_N I_N <p>\u7cbe\u51c6\u5ea6 Precision P = R_R / (R_R + I_R)</p> <p>\u53ec\u56de\u7387 Recall R = R_R / (R_R + R_N)</p> <p>\u6bd4\u5982\u65b0\u51a0\uff0c\u66f4\u5173\u6ce8 Recall\uff0c\u60f3\u5168\u90e8\u627e\u5230\uff1b\u6bd4\u5982\u5237\u89c6\u9891\uff0c\u60f3\u627e\u5230\u60f3\u627e\u5230\u7684\uff0c\u4e0d\u90a3\u4e48\u5173\u6ce8\u6709\u6ca1\u6709\u627e\u5230\u5168\u90e8\uff0c\u66f4\u5173\u6ce8 Precision</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-4-leftist-heaps-and-skew-heaps","title":"Lecture 4. Leftist Heaps and Skew Heaps","text":"<p>\u4e00\u822c\u7684\u5806\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff01</p> <p>\u597d\u5904\u81ea\u52a8\u4fdd\u6301\u5e73\u8861\uff0c\u627e\u6700\u503c\u5bb9\u6613\uff1b\u574f\u5904\u65e0\u6cd5\u67e5\u627e\u4e00\u4e2a\u5143\u7d20</p> <p>\u600e\u6837\u7528\u5806\u7ef4\u62a4\u4e2d\u4f4d\u6570\uff1f\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4\u8f83\u5927\u7684\u6570\uff0c\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a4\u8f83\u5c0f\u7684\u6570\uff0c\u90a3\u4e48\u5927\u6839\u5806\u7684\u5806\u9876\u5c31\u662f\u5927\u6839\u5806\u7684\u6240\u6709\u6570\u91cc\u6700\u5c0f\u7684\uff0c\u5c0f\u6839\u5806\u7684\u5806\u9876\u5c31\u662f\u5c0f\u6839\u5806\u7684\u6240\u6709\u6570\u91cc\u6700\u5927\u7684\uff1b\u7136\u540e\u5728\u63d2\u5165\u65f6\uff0c\u5982\u679c\u5927\u4e8e\u5927\u6839\u5806\u7684\u5806\u9876\uff0c\u5c31\u653e\u5165\u5c0f\u6839\u5806\uff1b\u5426\u5219\u653e\u5165\u5927\u6839\u5806\uff1b\u5982\u679c\u653e\u591a\u4e86\uff08\u4e24\u4e2a\u5806\u7684\u5143\u7d20\u4e2a\u6570\u5dee\u503c\u5927\u4e8e 1\uff09\uff0c\u5c31\u628a\u5c0f\u6839\u5806\u91cc\u7684\u4e1c\u897f\u653e\u5230\u5927\u6839\u5806\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#leftist-heaps","title":"Leftist Heaps","text":"<p>\u56e0\u4e3a\u4e00\u822c\u7684\u5806\u7684\u6027\u8d28\u4e2d\uff0c\u81ea\u52a8\u4fdd\u6301\u5e73\u8861\u5b9e\u9645\u662f\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5de6\u5f0f\u5806\u5e76\u4e0d\u662f\u5e73\u8861\u6811\uff0c\u56e0\u4e3a\u67e5\u627e\u7684\u65f6\u5019\u4e5f\u53ea\u4f1a\u6d89\u53ca\u5806\u9876\u3002\u8fd9\u53ea\u662f\u4fdd\u8bc1\u5408\u5e76\u901f\u5ea6\u7684\u4f18\u5316\u3002</p> <p>\u5408\u5e76\u4e24\u4e2a\u5806\uff1a\u4e00\u822c\u9700\u8981 O(n)\uff0c\u4f46\u662f\u4f7f\u7528\u5de6\u5f0f\u5806\u4f7f\u5f97\u53d8\u6210 O(\\log n)</p> <p>\u4e00\u822c\u5806\uff1a\u76f4\u63a5\u628a\u4e24\u4e2a\u5806\u4e22\u5728\u4e00\u8d77\uff0c\u7136\u540e\u4ece\u6700\u5e95\u5c42\u7684\u975e\u53f6\u8282\u70b9\u5f00\u59cb\u5c42\u5e8f\u904d\u5386\uff0c\u6bcf\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u8ba9\u5b83\u5806\u5316\uff08\u8ba9\u5b83\u7684\u5b50\u6811\u7b26\u5408\u5806\u7684\u6027\u8d28\uff0c\u5047\u8bbe\u5b83\u79bb\u53f6\u8282\u70b9\u7684\u9ad8\u5ea6\u4e3a h\uff0c\u5219\u6700\u591a\u8fdb\u884c h \u6b21\u5373\u53ef\u4f7f\u5f97\u5b50\u6811\u5806\u5316\uff09\u3002\u7531\u4e8e h \u5c42\u6709 2^{\\log_2{n}-h} = n/2^h \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e58\u8d77\u6765\u518d\u6c42\u548c\uff0c\u5219 n\\sum_{h=1}^{\\log_2{n}}h/2^h = 2n-(2+\\log_2(n)) = O(n)\u3002</p> <p>Definition The null path length, Npl(X), of any node X is the length of the shortest path from X to a node without two children.  Define Npl(NULL) = \u20131.</p> <p>Npl(X) = min { Npl(C) + 1 for all C as children of X }</p> <p>Definition The leftist heap property is that for every node X in the heap, the null path length of the left child is at least as large as that of the right child. \u5de6\u5b69\u5b50\u7684 NPL \u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e \u53f3\u5b69\u5b50\u7684 NPL</p> <p>\u53ea\u8981\u8bc1\u660e\u5408\u5e76\u65f6\u662f \\log \u7684\uff0c\u90a3\u63d2\u5165\u7684\u65f6\u5019\u5c31\u4e5f\u662f \\log\uff0c\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u8282\u70b9\u548c\u4e00\u68f5\u6811\u7684\u5408\u5e76\uff1b\u5220\u9664\u7684\u65f6\u5019\u4e5f\u662f \\log\uff0c\u53ef\u4ee5\u770b\u4f5c\u4e24\u68f5\u6811\u7684\u5408\u5e76\u3002</p> <p>Theorem A leftist tree with r nodes on the right path must have at least 2^r \u2013 1 nodes.</p> <p>\u5373\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u53f3\u8fb9\u7684 Npl \u8def\u5f84\u4e0a\u6709 r \u8282\u70b9\uff0c\u90a3\u603b\u5171\u4e00\u5b9a\u8981\u6709 2^r-1 \u8282\u70b9\u3002</p> <p>\u8bc1\uff1a\u53f3\u5b50\u6811\u7684 Npl \u8def\u5f84\u4e0a\u6709 r-1 \u4e2a\u8282\u70b9\uff0c\u90a3\u5b83\u6700\u5c11\u7684\u60c5\u51b5\u5c31\u662f\u6ee1\u7684\uff0c\u6b64\u65f6\u4f1a\u6709 2^{r-1}-1 \u4e2a\u70b9\uff0c\u5de6\u5b50\u6811\u7684 Npl \u8def\u5f84\u4e5f\u6700\u5c11 r-1 \u4e2a\u8282\u70b9\uff0c\u6700\u5c11\u6709 2^{r-1}-1\u3002\u52a0\u8d77\u6765\uff0c\u52a0\u4e0a\u6839\uff0c\u662f 2^r-1\u3002\u8fd8\u662f\u5f52\u7eb3\u6cd5\u3002</p> <p>Merge \u65f6\u7684\u4e24\u79cd\u5199\u6cd5\uff1a\u9012\u5f52/\u9012\u63a8</p> <p>\u9012\u5f52\uff1a\u6bcf\u6b21\u628a\u6839\u5c0f\u7684\u90a3\u68f5\u6811\u7684\u6839\u548c\u5de6\u5b50\u6811\u7559\u4e0b\u4e0d\u52a8\uff0c\u628a\u53f3\u8fb9\u7684\u5b50\u6811\u548c\u90a3\u68f5\u6839\u8f83\u5927\u7684\u6811\u5408\u5e76\uff08\u9012\u5f52\uff09\uff0c\u7136\u540e\u628a\u5408\u5e76\u540e\u7684\u6574\u4f53\u4f5c\u4e3a\u6839\u5c0f\u7684\u6811\u7684\u53f3\u5b50\u6811\uff0c\u518d\u770b\u5de6\u8fb9\u7684 Npl \u662f\u4e0d\u662f\u6bd4\u53f3\u8fb9\u7684\u5927\uff0c\u5982\u679c\u5c0f\u7684\u8bdd\u5c31 swap\u3002</p> <pre><code>PriorityQueue Merge( PriorityQueue H1, PriorityQueue H2 ) { \n  if (H1==NULL) return H2;\n  if (H2==NULL) return H1;\n  if (H1-&gt;Element &lt; H2-&gt;Element)\n    swap(H1, H2);  //swap H1 and H2\n  if (H1-&gt;Left == NULL)\n    H1-&gt;Left = H2;\n  else {\n    H1-&gt;Right = Merge( H1-&gt;Right, H2 );\n    if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )\n      SwapChildren( H1 );  //swap the left child and right child of H1\n    H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;\n  }\n  return H1;\n}\n</code></pre> <p>\u9012\u63a8\uff1a\u628a\u6240\u6709\u53f3\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u4f5c\u4e3a\u4e00\u4e2a\u6839\uff0c\u53ea\u4fdd\u7559\u5b83\u7684\u5de6\u5b50\u6811\u3002\u7136\u540e\u628a\u6240\u6709\u6839\u6309\u7167\u5927\u5c0f\u6392\u5e8f\uff0c\u8fde\u8d77\u6765\u3002\u7136\u540e**\u518d\u4ece\u4e0b\u5f80\u4e0a\u4f9d\u6b21\u770b\u662f\u5426\u9700\u8981 swap**\uff0c\u4e00\u5b9a\u8bb0\u5f97 SWAP\uff01SWAP \u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u8ba9\u53f3\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u5728\u53f3\u8def\u5f84\u4e86\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#skew-heaps","title":"Skew Heaps","text":"<p>Target: Any M consecutive operations take at most O(M log N) time. (N = N1 + N2)</p> <p>Merge: \u6bcf\u6b21\u90fd\u6362\uff0c\u4f46\u662f the largest of all the nodes on the right paths does not have its children swapped.  </p> <p>\u539f\u6765\u7684\u4e24\u68f5\u6811\u53f3\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u5fc5\u987b\u8981\u5728\u65b0\u6811\u7684\u5de6\u8def\u5f84\u4e0a\uff1b\u53f3\u8def\u5f84\u4e0a\u7684 Heavy Nodes \u4e00\u5b9a\u53d8\u6210\u4e86 Light Node</p> <p>Heavy Node: right-heavy - \u53f3\u5b50\u6811\u4e2d\u7684\u70b9\u66f4\u591a\uff0c\u5360\u6574\u68f5\u6811\u4e2d\u7684\u70b9\u81f3\u5c11\u4e00\u534a</p> <p>\u8981\u8bc1\u660e\u5408\u5e76\u5b8c\u4e4b\u540e heavy \u7684\u5f88\u5c11</p> <p>\\phi(H_i) Heavy Node \u7684 \u6570\u91cf</p> <p>\u6700\u7ec8\u7684 Amotized\uff1a\uff08\u6bcf\u4e00\u6b21\u90fd\u662f\u4e00\u4e2a\uff0c\u6700\u540e\u6c42\u548c\uff09 $$ \\sum\\hat{c}_i = \\sum c_i + \\phi(H_3) - (\\phi(H_1) + \\phi(H_2)) $$ \u5b9a\u4e49 H_i, i = 1, 2 \u4e2d\u53f3\u8def\u5f84\u4e0a\u6709 l_i \u4e2a Light Node\uff0c\u6709 h_i \u4e2a Heavy Node\u3002\u663e\u7136 l_i + h_i = \\text{right\\_path\\_nodes\\_cnt}</p> <p>\u56e0\u4e3a\u53ea\u6709\u53f3\u8def\u5f84\u4e0a\u7684\u70b9\u624d\u4f1a\u6539\u53d8\uff0c\u5176\u4ed6\u7684\u70b9\u90fd\u4e0d\u4f1a\u53d8\uff0c\u6240\u4ee5 Actual Cost \u53ef\u4ee5\u8868\u793a\u4e3a $$ \\sum c_i\\leq l_1 + h_1 + l_2 + h_2 $$ \u5728\u53d8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709 Light Nodes \u53d8\u6210 Heavy Nodes\uff0c\u4f46\u662f Heavy Nodes \u4e00\u5b9a\u53d8\u6210\u4e86 Light Node\uff1a</p> <p> $$ \\Delta \\phi\\leq (l_1 + l_2) - (h_1 + h_2) $$ \u7531\u6b64\uff0c\u6709 $$ \\begin{aligned} \\sum\\hat{c}_i &amp;= \\sum c_i + \\phi(H_3) - (\\phi(H_1) + \\phi(H_2))\\ &amp;\\leq l_1 + h_1 + l_2 + h_2 + (l_1 + l_2) - (h_1 + h_2)\\ &amp;\\leq 2(l_1 + l_2) \\end{aligned} $$ \u800c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0cl_1 = O(\\log n_1), l_2 = O(\\log n_2)\u3002\uff08\u6211\u4eec\u6ca1\u6cd5\u8bc1\u660e\u53f3\u8def\u5f84\u4e0a Heavy Nodes \u7684\u6570\u91cf\uff0c\u4f46\u662f\u53ef\u4ee5\u8bc1\u660e Light Nodes \u7684\u6570\u91cf\u662f\u88ab\u63a7\u5236\u4f4f\u7684\uff09\uff1a\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u53f3\u8def\u5f84\u4e0a\u6709 k \u4e2a Light Nodes\uff0c\u90a3\u8fd9\u4e2a\u6811\u81f3\u5c11\u6709 2^{k} - 1 \u4e2a\u70b9\u3002\u6240\u4ee5 l_i = O(\\log n_i)\u3002</p> <p>\u53f3\u8def\u5f84\u4e0a\u7684 Heavy Nodes \u6570\u91cf\u53ef\u4ee5\u4efb\u610f\u591a\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-5-binomial-queue","title":"Lecture 5. Binomial Queue","text":""},{"location":"Data%20Structure/ADS%20Notes/#binomial-queue","title":"Binomial Queue","text":"<p>\u4e00\u4e2a Binomial Queue \u7531 \u591a\u4e2a Binomial Tree - B_k \u7ec4\u6210</p> <p>Queue \u4e2d\u6709\u4efb\u610f\u4e2a\u70b9\uff0c\u90fd\u6709\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709\u552f\u4e00\u7684\u5bf9\u5e94 Binomial Tree \u4e2a\u6570\u548c\u7ec4\u6210\u3002</p> <ul> <li>B_0 \u53ea\u6709\u4e00\u4e2a\u70b9</li> <li>B_k \u662f\u628a\u4e24\u4e2a B_{k-1} \u5408\u5e76\u8d77\u6765\uff0c\u7b2c\u4e8c\u4e2a B_{k-1} \u4f5c\u4e3a \u7b2c\u4e00\u4e2a\u7684\u5b69\u5b50</li> </ul> <p>\u6027\u8d28\uff1a</p> <ul> <li>B_k \u7684\u6839\u6709 k \u4e2a\u5b69\u5b50\uff0c\u5206\u522b\u662f B_0, B_1, \\cdots, B_{k-1}\uff0c\u6811\u9ad8\u4e3a k\uff08\u5047\u8bbe\u6839\u8282\u70b9 Height = 0\uff09\u3002</li> <li>B_k \u6709 2^k \u4e2a\u8282\u70b9\u3002</li> <li>\u6df1\u5ea6\u4e3a d \u7684\u70b9\u5171\u6709 C_{k}^d \u4e2a</li> </ul> <p>\u64cd\u4f5c\uff1a</p> <p>Find Min\uff1a\u627e k \u68f5\u6811\u7684\u6839\uff0cO(\\log n)</p> <p>Merge\uff1a\u50cf\u52a0\u6cd5\u4e00\u6837\uff0c\u4ece B_0 \u5f00\u59cb\u52a0\uff0c\u8981\u8fdb\u4f4d\u3002O(\\log n)</p> <p>Delete Min\uff1a\u627e\u5230\u6700\u5c0f\uff0c\u628a\u5b83\u5220\u6389\uff0c\u628a\u5b83\u7684\u5b69\u5b50\u548c\u5269\u4e0b\u7684\u5408\u5e76 O(\\log n)</p> <p>Insert\uff1a\u4e00\u822c\u60c5\u51b5\u5c31\u662f\u7279\u6b8a\u7684 Merge\uff0c\u5982\u679c\u4f9d\u6b21\u6309\u987a\u5e8f\u63d2\u5165\uff0c\u662f O(n) \u7684\uff1a</p> <p>\u8bc11\uff1a\u53ea\u9700\u8981\u770b\u672b\u5c3e 0 \u7684\u4f4d\u7f6e\uff0c\u770b\u6700\u540e\u4e00\u4e2a 0 \u540e\u9762\u6709\u51e0\u4e2a 1\u3002\u672b\u5c3e\u662f 0 \u7684\uff0c\u6709 n/2 \u4e2a\uff1b\u672b\u5c3e\u662f 01 \u7684\uff0c\u6709 n/4 \u4e2a\uff1b\u672b\u5c3e\u662f 011 \u7684\uff0c\u6709 n/8 \u4e2a\uff1b... $$ \\begin{aligned} nS &amp;= n(1\\times \\frac{1}{2} + 2\\times \\frac{1}{2^2} + 3\\times \\frac{1}{2^3}+\\cdots)\\ &amp;\\leq n(2 - k/2^k - \u00bd^{k-1}) \\end{aligned} $$</p> <p>Expensive insertions remove trees, while cheap ones create trees. </p> <p>\u8bc12\uff1a\u770b\u667a\u4e91ppt</p> <p>For a binomial queue, Insertion takes a constant time on average.</p> <p>Decrease Key\uff1a\u4e13\u6307\u5df2\u7ecf\u77e5\u9053\u5728\u54ea\uff0c\u8981\u628a\u51cf\u5c0f\u5b83\u7684\u503c</p>"},{"location":"Data%20Structure/ADS%20Notes/#hash-table-amotized-analysis","title":"\u500d\u589e\u7684 Hash Table Amotized Analysis","text":"<p><code>size(T)</code> Table \u7684 Size</p> <p><code>num(T)</code> \u6307 Table \u4e2d\u7684\u5143\u7d20\u6570 $$ \\phi(T) = 2\\text{num}(T) - \\text{size}(T) $$ Insert\uff1a</p> <p>\u5206\u60c5\u51b5\uff1a\u5982\u679c\u7b2c i \u6b21 Insert\uff0c\u6ca1\u6709\u4f7f\u5f97\u8868\u500d\u589e\uff1b\u5982\u679c\u4f7f\u5f97\u8868\u500d\u589e</p> <p>\u5982\u679c\u6ca1\u6709\u4f7f\u5f97\u8868\u500d\u589e\uff0c\u90a3\u5047\u5b9a c_i=1\uff0c $$ \\begin{aligned} \\hat{c}i &amp;= c_i + \\phi_i - \\phi{i-1}\\ &amp;= c_i + 2\\text{num}{i} - 2\\text{num}{i-1}\\ &amp;= 1 + 2=3 \\end{aligned} $$ \u5982\u679c\u4f7f\u5f97\u8868\u500d\u589e\uff0c\u5219\u9700\u8981\u6709\u590d\u5236\u7684 cost\uff0cc_i=1+\\text{num}_{i-1}\uff0c $$ \\begin{aligned} \\hat{c}i &amp;= c_i + \\phi_i - \\phi{i-1}\\ &amp;= c_i + 2\\text{num}{i} - 2\\text{num}{i-1} - (i-1)\\ &amp;= 1 + i-1 + 2 - (i - 1)=3 \\end{aligned} $$ Delete\uff1a</p> <p>\u5f53 num&lt;size/4 \u65f6\uff0c\u7f29\u5c0f\u4e3a size/2</p> <p>\u5b9a\u4e49 \\alpha: Load of table - number of table / size of table $$ \\phi(T) = \\begin{cases} 2\\text{num}(t)-\\text{size}(T), &amp; \\text{if } \\alpha(T)\\geq \u00bd\\ \\text{size}(T)/2 - \\text{num}(T), &amp; \\text{if } \\alpha(T)\\lt \u00bd \\end{cases} $$</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-6-backtracking","title":"Lecture 6. Backtracking","text":""},{"location":"Data%20Structure/ADS%20Notes/#shortest-path","title":"Shortest Path","text":"<p>\u4ece\u8d77\u70b9\u7ec8\u70b9\u76f8\u9047\u641c\u7d22\uff0c\u5927\u6982\u4f1a\u6bd4\u76f4\u63a5\u5355\u6e90\u5feb 40%\u3002</p> <p>\u5206\u5c42\u6700\u77ed\u8def</p> <p>\u5982\u679c\u70b9\u4e0e\u70b9\u8ddd\u79bb\u592a\u591a \u7a7a\u95f4\u5b58\u4e0d\u4e0b\u600e\u4e48\u529e\uff1f\u53ef\u4ee5\u4f7f\u7528\u53ea\u5b58\u76f8\u90bb\u70b9\u6765\u6c42\u8fd1\u4f3c\u89e3\u3002</p> <p>\u8d1f\u5708\u56fe\uff0c\u600e\u4e48\u6c42\u65e0\u5708\u6700\u77ed\u8def\uff1f\u5982\u679c\u6240\u6709\u6743\u90fd\u662f-1\uff0c\u600e\u6837\u6bcf\u4e2a\u70b9\u53ea\u7ecf\u8fc7\u4e00\u6b21\u6c42\u6700\u77ed\u8def\uff1f\u54c8\u5bc6\u5c14\u987f\u56de\u8def</p> <p>\u7b97\u6cd5\u5206\u6790\uff1a\u6b63\u786e\u6027\u8fd1\u4f3c - \u590d\u6742\u5ea6 14\uff1a30\uff1f\uff1f\uff1f\uff1f\uff1f</p>"},{"location":"Data%20Structure/ADS%20Notes/#backtracking","title":"Backtracking","text":"<p>\u56de\u6eaf</p> <p>\u663e\u7136\uff0c\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u6240\u6709\u53ef\u884c\u89e3\u5e76\u4e00\u4e00\u9a8c\u8bc1\u7684\u65b9\u6cd5\u6765\u627e\u5230\u6240\u6709\u53ef\u884c\u89e3\uff1b\u56de\u6eaf\u6cd5\u662f\u9010\u6b65\u586b\u5199\u4e00\u79cd\u53ef\u80fd\uff0c\u4e4b\u540e\u5982\u679c\u51fa\u73b0\u77db\u76fe\uff0c\u518d\u56de\u53bb\u6362\u53e6\u4e00\u79cd\u53ef\u80fd\uff0c\u8fd9\u5927\u5927\u51cf\u5c11\u4e86\u5bf9\u4e0d\u53ef\u884c\u89e3\u7684\u9a8c\u8bc1\u3002</p> <p>The basic idea is that suppose we have a partial solution ( x1, ... , xi ) where each xk in Sk for  1 le k le i lt n.   First we add  x{i+1} in S{i+1} and check if ( x1, ... , xi, xi+1 ) satisfies the constrains.  If the answer is \u201cyes\u201d we continue to add the next x, else we delete xi and backtrack to the previous partial solution ( x1, ... , x{i-1} ).</p> <p>\u53ef\u4ee5\u627e\u5230\u6240\u6709\u53ef\u884c\u89e3\uff0cdp\u4e0d\u884c\u3002</p> <p>\u516b\u7687\u540e</p> <p>\u53ef\u4ee5\u8ba4\u4e3a\u662f\u535a\u5f08\uff0c\u6240\u6709\u4e8c\u4eba\u535a\u5f08\u90fd\u53ef\u4ee5\u753b Game Tree\uff0cGame Tree \u4e2d\u6bcf\u6761\u8fb9\u90fd\u662f\u4e00\u4e2a\u51b3\u7b56\uff0c\u70b9\u662f\u72b6\u6001\u3002</p> <p>\u91cd\u5efa\u8ddd\u79bb</p> <p>\u5982\u679c\u5df2\u77e5\u6570\u8f74\u4e0a\u51e0\u4e2a\u70b9\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u5171\u6709 n(n-1)/2 \u4e2a\uff1b\u90a3\u4e48\uff0c\u5982\u679c\u5df2\u77e5\u8fd9\u4e9b\u8ddd\u79bb\uff0c\u600e\u6837\u786e\u5b9a\u8fd9\u4e9b\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff1f</p> <p>\u9996\u5148\u89e3\u70b9\u7684\u4e2a\u6570 N(N-1)/2=tot\uff0c\u7136\u540e\u8bbe x_0=0,x_N=\\max\\text{dis}\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u63a8\u65ad\u53ef\u80fd\u7684\u7ed3\u679c\uff08\u4e00\u5b9a\u662f\u4e8c\u5206\u652f\u7684\uff0c\u4f1a\u7f29\u5c0f\u8003\u8651\u7684\u8303\u56f4\uff09\uff0c\u68c0\u67e5\u7684\u65f6\u5019\u6bcf\u786e\u5b9a\u4e86\u4e00\u4e2a\u70b9\uff0c\u90fd\u8981\u548c\u5df2\u7ecf\u786e\u5b9a\u7684\u70b9\u7b97\u51fa\u8ddd\u79bb\u68c0\u67e5\u5728\u4e0d\u5728\u8868\u91cc\u3002O(2^n n\\log n )\u3002</p> <p></p> <p>\u5982\u679c\u662f\u73af\uff0cO(n^n n\\log n)\u3002</p> <p>Tic Tac Toe</p> <p>\u53ef\u4ee5\u6784\u9020\u51fd\u6570\u53bb\u8bc4\u4f30\u67d0\u4e2a\u89e3\u7684 goodness \u7a0b\u5ea6</p> <p>\u4f8b\u5982\uff1af(P) = W_{computer} - W_{Human}</p> <p>human \u5c31\u60f3\u53bb minimize \u8fd9\u4e2a\u51fd\u6570\uff0ccomputer \u60f3\u53bb maximize \u5b83</p> <p>\u80dc\u4e3a1\uff0c\u8d1f\u4e3a-1\uff0c\u5e73\u4e3a0\u3002\u4ece\u7ed3\u679c\u6162\u6162\u5f80\u4e0a\u63a8\u3002</p> <p>\u8fd9\u79cd\u535a\u5f08\u91cc\u4e5f\u53ef\u4ee5\u526a\u679d\uff0c\\alpha pruning, \\beta pruning, \u7efc\u5408\u88ab\u79f0\u4f5c \\alpha-\\beta pruning\uff0c\u5927\u6982\u53ea\u9700\u8981\u641c\u7d22 O(\\sqrt{N}) \u4e2a\u70b9\u3002</p> <p> </p> <p>\u6570\u6570 Computer \u53ef\u80fd\u6709\u51e0\u884c\u53ef\u4ee5\u8d62 - \u6570\u6570 Human \u6709\u51e0\u884c\u53ef\u4ee5\u8d62\u3002</p> <p></p> <p>\\min \u5c42\uff0c\u662f\u53d6\u7b2c\u4e09\u5c42\u7684 \\min\uff0c\u5982\u679c x\\leq 13\uff0c\u90a3\u7b2c\u4e8c\u5c42\u4e2d\u95f4\u90a3\u4e2a\u5e94\u8be5\u662f x\uff1b\u5982\u679c x&gt;13\uff0c\u90a3\u7b2c\u4e8c\u5c42\u4e2d\u95f4\u90a3\u4e2a\u5e94\u8be5\u662f 13\u3002\u56e0\u4e3a\u53f3\u8fb9\u90a3\u4e00\u652f\u5df2\u7ecf\u6709 9\uff0c\u6240\u4ee5\u80af\u5b9a\u7b2c\u4e8c\u5c42\u53f3\u8fb9\u7684\u662f\u6bd4 9 \u5c0f\u6216\u7b49\u7684\u4e00\u4e2a\u6570\uff0c\u90a3\u53ea\u8981\u7b2c\u4e8c\u5c42\u4e2d\u95f4\u7684\u662f\u6bd4 9 \u5927\u7684\uff0c\u90a3\u6700\u9876\u5c42\u80af\u5b9a\u53ea\u80fd\u9009\u7b2c\u4e8c\u5c42\u4e2d\u95f4\u7684\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-7-divide-and-conquer","title":"Lecture 7. Divide and Conquer","text":"T(N) = aT(N/b) + f(N)  <p>\u4e00\u822c\u5f62\u5f0f\uff0ca\\neq b\uff0cf(N) \u662f Combine \u7684\u65f6\u95f4</p> <p>\u5b50\u95ee\u9898\uff0c\u4e00\u822c\u4f1a\u6bd4\u603b\u95ee\u9898\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f4e\u3002\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u590d\u6742\u5ea6\u662f\u7528\u8fc7\u5206\u6cbb\u8ba1\u7b97\u5f97\u5230\u7684\u3002</p> <p>\u53ef\u89e3\u51b3\u95ee\u9898\uff1a</p> <ul> <li>Closest Points Problem: \u5e73\u9762\u4e0a\u6700\u8fd1\u70b9\u5bf9</li> <li>Merge Sort</li> <li>Matrix Multiplication, \u5206\u5757\u4e58\u6cd5</li> <li>Count Inversions: \u9006\u5e8f\u5bf9</li> <li>Median of n numbers</li> <li>FFT: ploy * ploy</li> <li>x^n</li> <li>Convex Hull, \u51f8\u5305</li> </ul> <p>Asymptotic Analysis \u6e10\u8fdb\u60c5\u5f62\u5206\u6790\uff1a</p> <p>\u5e38\u6570\u9690\u85cf\u6389\uff0c\u4f4e\u9636\u7684\u9879\u4e5f\u53bb\u6389</p> <p>Machine Model</p> <p>Random Access Model \u4e2d \u5047\u5b9a Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>\uff0c\u5185\u5b58\u8bfb\u53d6\u7b49\u5355\u4e2a\u5355\u5143\u7684\u64cd\u4f5c\uff0c\u90fd\u8ba4\u4e3a\u662f O(1)\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#case-closest-points-problem","title":"Case: Closest Points Problem","text":"<p>Given N points in a plane. Find the closest pair of points. (If two points have the same position, then that pair is the closest with distance 0.)</p> <ol> <li>\u9884\u5904\u7406\u65f6\uff0c\u6309\u7167 x \u4e3a\u7b2c\u4e00\u4f18\u5148\u7ea7\uff0cy \u4e3a\u7b2c\u4e8c\u4f18\u5148\u7ea7\u9996\u5148\u6392\u597d\u5e8f\u3002\u5206\u5f00\u65f6\uff0c\u76f4\u63a5\u6309\u7167\u4e0b\u6807\u5206\u6210\u4e24\u534a\uff0c\u662f O(1) \u7684\u3002</li> <li>\u5408\u5e76\u65f6\uff0c\u5bf9\u5206\u754c\u7ebf\u5de6\u53f3\u4e24\u8fb9 \\delta\\xlongequal{\\triangle}\\min(cp(L_x), cp(R_x))\uff0c\u4ece (-\\delta, \\delta) \u7684\u70b9\u4e2d\uff0c\u6309\u7167 y \u6392\u5e8f\uff0c\u6bcf\u4e2a\u70b9\u90fd\u627e\u4ed6\u4e0b\u9762\u7684 \\delta \u8303\u56f4\u7684\u70b9\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u628a \\Delta x\\in(-\\delta,\\delta), \\Delta y\\in (0, \\delta) \u8fd9\u4e00\u4e2a\u533a\u95f4\uff0c\u5212\u5206\u62108\u4e2a\u65b9\u5f62\uff0c\u90a3\u6bcf\u4e2a\u65b9\u5f62\u91cc\u53ea\u6709\u6700\u591a 1 \u4e2a\u70b9\uff08\u5e38\u6570\uff09\uff0c\u6240\u4ee5\u5408\u5e76\u603b\u5171\u662f O(n) \u7684\u3002</li> <li>\u5408\u5e76\u65f6\u7684\u201c\u6309\u7167 y \u6392\u5e8f\u201d\uff0c\u53ef\u4ee5\u63d0\u524d\u628a\u6240\u6709\u70b9\u6309\u7167 y \u6392\u5e8f\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u53ea\u9700\u8981\u4f9d\u6b21\u626b\u63cf\u8fd9\u4e2a\u9884\u5904\u7406\u8868\u4e2d\u7684\u70b9\uff0c\u5224\u65ad\u548c\u5206\u754c\u7ebf\u7684 \\Delta x \u662f\u4e0d\u662f\u5728 (-\\delta, \\delta) \u8303\u56f4\u5185\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5 O(n) \u53d6\u5f97\u6309 y \u987a\u5e8f\u7684\u70b9\u3002</li> </ol>"},{"location":"Data%20Structure/ADS%20Notes/#tn-atnb-fntn-atnb-fn","title":"T(N) = aT(N/b) + f(N)","text":"<p>\u5f52\u7eb3\u5047\u8bbe</p> <p>\u9996\u5148\u731c\u4e00\u4e2a\uff0c\u7136\u540e\u53bb\u8bc1\u660e\u5b83\u5bf9\u4e0d\u5bf9\uff0c\u5982 \u82e5\u5047\u5b9a T(N) = O(g(N))\uff0c\u90a3\u4e48 T(N)\\leq cg(N)</p> <p>\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5047\u5b9a T(N/b)\\leq cg(N/b)\uff0c\u770b\u80fd\u5426\u63a8\u51fa T(N)\\leq cg(N)\uff0cc \u53ea\u8981\u5b58\u5728\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5bf9\u4efb\u610f\u7684 c \u90fd\u6ee1\u8db3\u3002</p> <p>especially. c \u5fc5\u987b\u662f\u4e00\u81f4\u7684\uff0c\u5982\u679c\u4ece T(N/b)\\leq cg(N/b)  \u53ea\u80fd\u63a8\u51fa\u6765 T(N)\\leq (c+1)g(N)\uff0c\u90a3\u80af\u5b9a\u662f\u4e0d\u5bf9\u7684\u3002</p> <p>\u9012\u5f52\u6811</p> <p>\u5047\u5b9a\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u662f\u4ee3\u8868 f(N)\uff0c\u7136\u540e\u6700\u540e\u628a\u6240\u6709\u8282\u70b9\u7684\u65f6\u95f4\u4ece\u4e0b\u5f80\u4e0a\u52a0\u8d77\u6765\u5c31\u597d\u3002</p> <p>\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u70b9\uff0c\u5b83\u672c\u8eab\u662f f(N)\uff0c\u90a3\u5b83\u6709 a \u4e2a\u5b69\u5b50\uff0c\u6bcf\u4e2a\u5b69\u5b50\u90fd\u662f f(N/b)\uff0c\u5b59\u5b50\u5c31\u662f f(N/b^2)\u3002 $$ T(n) = f(n) + af(n/b) + a<sup>2f(n/b</sup>2) + \\cdots + a<sup>Lf(n/b</sup>L) $$ \u6211\u4eec\u77e5\u9053\u5206\u5230\u6700\u540e\u80af\u5b9a\u662f O(1) \u7684\uff0c\u90a3\u4e48 1=n/b^L\\Rightarrow L = \\log_b n\u3002</p> <p>\u5c31 T(N) = 2T(N/2) + N \u800c\u8a00\uff0c\u8fd9\u91cc af(N/b)=f(N)\uff0c\u6240\u4ee5\u6709 $$ T(N) = N + N + N + \\cdots + N=N\\log_2N $$ \u603b\u5171 L = \\log_2N \u4e2a N \u52a0\u8d77\u6765\u3002</p> <p>\u4e00\u822c\u5730\uff0c\u5982\u679c af(N/b)=f(N)\uff0c\u6709 T(N) = f(N)\\log_bN\uff0c\u76f8\u5f53\u4e8e\u6bcf\u5c42\u590d\u6742\u5ea6\u90fd\u4e00\u6837\uff0c\u5c31\u662f\u8981\u4e58 \u5c42\u6570\u3002</p> <p>\u5982\u679c\u662f af(N/b) = \\kappa f(N), \\kappa&lt;1\uff0c\u90a3\u4e48\u6709 T(N) = O(f(N))\uff0c\u8bc1\u660e\uff1a $$ \\begin{aligned} T(N) &amp;= f(N) + af(N/b) + a<sup>2f(N/b</sup>2) + \\cdots + a^{\\log_b N}\\times 1\\ &amp;= f(N) + \\kappa f(N) + \\kappa^2f(N) + \\cdots + \\kappa^{\\log_b N}f(N)\\ &amp;= f(N)\\frac{1-\\kappa^{1+\\log_bN}}{1-\\kappa}\\ &amp;= \\frac{1}{1-\\kappa}f(N)-\\frac{\\kappa}{1-\\kappa}N^{\\log_b\\kappa}f(N) = O(f(N)) \\end{aligned} $$ \u5982\u679c\u662f af(N/b) = K f(N), K&gt;1\uff0c\u76f8\u5f53\u4e8e f(N) = O(N^{\\log_ba-\\epsilon})\uff0c\u90a3\u4e48\u6709 T(N) = O(N^{\\log_ba}) $$ \\begin{aligned} T(N) &amp;= f(N)\\frac{K^{1+\\log_bN}-1}{K-1}\\ &amp;= \\frac{K}{K-1}N^{\\log_bK}f(N) - \\frac{1}{K-1}f(N) \\end{aligned} $$</p> <p>\u7528\u5230\u4e00\u4e2a\u6052\u7b49\u5f0f\uff1aa^{\\log_b N} = (a^{\\log_aN})^{-{\\log_a b}} = N^{\\log_b a}</p> <p>\u66f4\u7279\u6b8a\u7684\uff1a $$ T(N) = 2f(N/2) + \\frac{n}{\\log n} $$ \u8ba1\u7b97 af(N/b) \u6709 $$ 2\\frac{n/2}{\\log n-\\log 2} = \\frac{n}{\\log n-\\log 2}\\neq \\frac{n}{\\log n} $$ \u6240\u4ee5\u5e76\u4e0d\u662f\u521a\u521a\u7684\u60c5\u5f62\uff0c\u4f7f\u7528\u9012\u5f52\u6811</p> <p>\u53e6\u5916\u4e00\u4e2a\u9898\uff1a</p> <p>$$ T(N) = 8 + 8^2 + \\cdots + (N/M)<sup>3f(N/2</sup>t) + 8^{t+1}M =N<sup>3/M</sup>2 $$ N/2^t = \\sqrt{M}\\Rightarrow t = \\log_2N/\\sqrt{M}</p> <p>\u518d\u4f8b $$ T(N) = \\frac{12}{5}N + T(\\frac{N}{5}) + T(\\frac{7N}{10}) $$ \u9012\u5f52\u6811\uff1a $$ \\begin{aligned} T(N) &amp;= \\frac{12}{5}N + \\frac{12}{5}(\\frac{N}{5}) + \\frac{12}{5}(\\frac{7N}{10}) + \\frac{12}{5}(\\frac{N}{5})^2 + \\frac{12}{5}(\\frac{7N}{10})^2 +\\cdots\\ &amp;= \\frac{12}{5}N(1 + \\frac{9}{10} + (\\frac{9}{10})^2+\\cdots) = O(N) \\end{aligned} $$ \u518d\u4f8b $$ T(n) = 2T(\\sqrt{n}) + \\log n $$ \u4e0d\u59a8\u8bbe\u9012\u5f52\u6811\u603b\u5171 M \u5c42\uff0c\u5219 n^{(1/2)^M} = 1 + \\epsilon\uff0c(1/2)^M =  \\log_n(1+\\epsilon)\\Rightarrow m = \\log_{1/2}\\log_{n}(1+\\epsilon)\uff0c\u6240\u4ee5\u603b\u5171\u7684\u65f6\u95f4\u590d\u6742\u5ea6 T(n) \u5373\u4e3a\u5c42\u6570 \\times \u6bcf\u5c42\u590d\u6742\u5ea6\u4e3a \\log n\uff0c\u603b\u5171 \\log n\\times \\log\\log n\u3002</p> <p>\u6216\u8005\uff0c\u6362\u5143\uff0c\u4ee4 k=\\log_2(n)\uff0c\u5219 $$ T(2^k) = 2T(2^{k/2}) + k\\ U(k) = 2U(k/2) + k\\ T(2^k) = U(k) = k\\log k = \\log n\\log\\log n $$ \u4e3b\u5b9a\u7406\uff0c\u8981\u518d\u770b\u770bppt\u91cc\u53e6\u4e00\u4e2a\u5f62\u5f0f\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u51d1\u5230 O(n^t) \u7684 t \u91cc\u3002</p> <p>\u6bd4\u5982 T(n)=3T(n/3)+n/\\lg n\uff0cO(n^{1-\\epsilon}) \u91cc\uff0c\u627e\u4e0d\u5230\u4e00\u4e2a \\epsilon \u4f7f\u5f97 n=O(n^{1-\\epsilon})</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-8-dynamic-programming","title":"Lecture 8. Dynamic Programming","text":"<p>\u5206\u6cbb\u6cd5\u5f53\u4e2d\uff0c\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u4e4b\u95f4\u662f\u6709\u9636\u6570/\u500d\u6570\u5dee\u5f02\u7684\uff0c\u800c\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u662f\u72ec\u7acb\u7684\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u4e2d\uff0c\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u7684\u5dee\u5f02\u662f\u5f88\u5c0f\u7684\uff0c\u4e00\u822c\u53ea\u76f8\u5dee\u5e38\u6570\u4e2a\u5355\u4f4d\uff0c\u4f46\u662f\u5b50\u95ee\u9898\u548c\u539f\u95ee\u9898\u4e4b\u95f4\u662f\u76f8\u5173\u7684\uff0c\u662f\u6709\u5f88\u591a\u91cd\u590d\u7684\u3002</p> <ol> <li>Characterize an optimal solution</li> <li>Recursively define the optimal values</li> <li>Compute the values in some order\uff08\u8ba1\u7b97\u503c\uff09</li> <li>Reconstruct the solving strategy\uff08\u91cd\u65b0\u56de\u53bb\u627e\u5230\u89e3\uff0c\u5373\u600e\u6837\u5f97\u5230\u503c\u7684\u8fc7\u7a0b\uff09</li> </ol> <p>\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <ul> <li>Memorization (Top Down)\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5982\u679c\u53d1\u73b0\u5f53\u524d\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e4b\u524d\u89e3\u51b3\u8fc7\u4e86\uff0c\u5c31\u76f4\u63a5\u7528\u4e4b\u524d\u8bb0\u4e0b\u6765\u7684\u7ed3\u679c</li> <li>Tabulation (Bottom Up): \u76f4\u63a5\u6784\u9020\u8868\uff0c\u4f46\u662f\u8981\u53bb\u6784\u9020 Order\uff0c\u8981\u5bf9\u95ee\u9898\u6709\u66f4\u6e05\u6670\u7684\u7406\u89e3\u3002</li> </ul> <p>\u5dee\u5f02\uff1aCoding Complexity, Speed, Stack Space, Find Order Manually. </p>"},{"location":"Data%20Structure/ADS%20Notes/#case-matrix-multiplications","title":"Case: Matrix Multiplications","text":"<p>\u77e9\u9635\u4e58\u6cd5\u4e2d\uff0c\u5982\u679c M_{a\\times b}\\times N_{b\\times c}\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(abc)\uff0c\u5373\u8fdb\u884c abc \u6b21\u4e58\u6cd5\u3002 \u5047\u8bbe\u73b0\u5728\u6709 n \u4e2a\u6309\u987a\u5e8f\u6392\u597d\u7684\u77e9\u9635\uff0c\u6211\u4eec\u8981\u60f3\u52a0\u62ec\u53f7\uff0c\u8ba9\u7b97\u51fa\u6574\u4e2a\u7ed3\u679c\u7684\u901f\u5ea6\u66f4\u5feb\u3002\u5982\u679c\u6211\u4eec\u60f3\u7b97\u51fa\u65b9\u6848\u6570\uff0c\u8bbe\u65b9\u6848\u6570\u4e3a b_n\uff0c\u5219 $$ b_n = \\sum_{i=1}^{n-1} b_i b_{n-i}, \\text{ where } n\\gt 1, \\text{and }b_1 = 1 $$ \u8fd9\u4e8b\u5b9e\u4e0a\u662f Catalan \u6570\uff0c\u5b83\u662f O(4^n/n\\sqrt{n}) \u7684\u3002</p> <p>\u90a3\u56de\u5230\u95ee\u9898\u672c\u8eab\uff0c\u6211\u4eec\u4e0d\u53ea\u662f\u60f3\u7b97\u51fa\u65b9\u6848\u6570\uff0c\u6211\u4eec\u60f3\u7b97\u51fa\u6765 Cost\uff0c\u90a3\u4e48\u8bbe m_{i,j} \u4e3a\u4ece\u7b2c i \u4e2a\u4e58\u5230\u7b2c j \u4e2a\u7684\u6700\u4f18 cost\uff0c\u5219\u5982\u679c\u8bbe M_i \u7684\u7ef4\u5ea6\u4e3a r_{i-1}\\times r_i\uff0c\u90a3\u4e48\u6709 $$ m_{ij} = \\begin{cases} 0, &amp;\\text{if }i = j\\ \\min_{i\\le l\\lt j}(m_{i,l} + m_{l + 1, j} + r_{i - 1}r_{l}r_{j}), &amp;\\text{if }i &lt; j\\ \\end{cases} $$</p>"},{"location":"Data%20Structure/ADS%20Notes/#case-floyd-warshall-algorithm","title":"Case: Floyd-Warshall Algorithm","text":"<p>\u5b9a\u4e49 D^k_{i,j}\\xlongequal{\\triangle} \\min_{l\\le k}(\\text{length of path from node}_i\\text{ through node}_l\\text{ to node}_j), 0\\le k\\lt n\uff0cD^{-1}_{i,j}\\xlongequal{\\triangle} cost_{i,j}\u3002</p> <p>\u4e2d\u95f4\u8282\u70b9\u7684\u6700\u591a\u4e2a\u6570</p> <p>Order\uff1aD^{-1}\\to D^{0}\\to\\cdots D^{n-1} $$ \\begin{aligned} D^k_{i,j} &amp;= \\begin{cases} D^{k-1}{i,j}, &amp;k\\notin \\text{ the shortest path from node}_i\\text{ through node}_l\\text{ to node}_j\\ D^{k-1}{i,k} + D^{k-1}{k,j}, &amp;k\\in \\text{ the shortest path from node}_i\\text{ through node}_l\\text{ to node}_j\\ \\end{cases}\\ &amp;=\\min(D<sup>{k-1}_{i,j},D</sup>{k-1}{i,k} + D^{k-1}_{k,j})\\ \\end{aligned} $$ \u5b9e\u9645\u8ba1\u7b97\u65f6\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5b58 k \u8fd9\u4e00\u7ef4\uff1f</p> <p>\u7b2c k \u884c\u548c\u7b2c k \u5217\u5728\u8ba1\u7b97 D^{k} \u65f6\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u5b83\u4e00\u5b9a\u7b49\u4e8e D^{k-1} \u65f6\u7684\u503c\uff0c\u6240\u4ee5\u66f4\u65b0\u65f6\u7528\u5230\u7684\u5b9e\u9645\u5c31\u662f D^{k-1} \u65f6\u7684\u503c\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#case-product-assembly","title":"Case: Product Assembly","text":"<p>Two assembly lines for the same car Different time for each stage One can change lines between stages Minimize the total assembly time</p> <p>\u4e24\u6761\u6d41\u6c34\u7ebf\uff0c</p> <p>\u6bcf\u4e2a\u9636\u6bb5\u65f6\u8ba4\u4e3a\u90fd\u662f\u5728\u5f53\u524d\u9636\u6bb5\u4e0a Optimal \u7684\uff0c\u7136\u540e\u5229\u7528\u4e4b\u524d\u9636\u6bb5\u7684\u6765\u8ba1\u7b97\u5f53\u524d\u9636\u6bb5\u6700\u4f18\u89e3\u3002</p> <p>Other Cases in Slides</p> <p>\u80cc\u5305</p> <p>\u7528\u524di \u4e2a\u7269\u54c1\u6b63\u597d\u83b7\u5f97\u6536\u76cap \u6240\u9700\u8981\u6700\u5c0f\u603b\u7a7a\u95f4\u3002\u6700\u540e\u53ea\u9700\u8981\u7b97\u51fa\u4f7f\u5f97W(i,q) &lt;= M \u7684\u6700\u5927\u7684q \u5373\u53ef\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-9-greedy-algorithms","title":"Lecture 9. Greedy Algorithms","text":"<p>Make the best decision at each stage, under some greedy criterion. </p>"},{"location":"Data%20Structure/ADS%20Notes/#case-activity-selection-problem","title":"Case: Activity Selection Problem","text":"<p>\u6709\u597d\u591a\u4efb\u52a1\uff0cs_i \u5f00\u59cb\uff0ct_i \u7ed3\u675f\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u505a\u4e00\u4e2a\u4efb\u52a1\uff0c\u95ee\u6700\u591a\u505a\u591a\u5c11\u4e2a\u53ca\u65b9\u6848</p> <p>\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u8d2a\u5fc3\u7b97\u6cd5\u548c\u6700\u4f18\u89e3\u662f\u7b49\u4ef7\u7684</p>"},{"location":"Data%20Structure/ADS%20Notes/#case-huffman-codes","title":"Case: Huffman Codes","text":""},{"location":"Data%20Structure/ADS%20Notes/#lecture-10-computational-complexity","title":"Lecture 10. Computational Complexity","text":"<p>NPC\uff1a</p> <p></p> <p>\u53ea\u5173\u6ce8\u53ef\u8ba1\u7b97\u7684\u95ee\u9898\u3002</p> <p>\u7ed9\u4e00\u4e2a Problem X\uff0c\u548c\u4e00\u4e2a Machine Model M\uff0c\u4f7f\u7528 M \u9700\u8981\u82b1\u591a\u4e45\u53bb\u89e3\u51b3 X\uff1f</p> <p>P \u95ee\u9898\uff1aPolynomial Time\uff0c\u591a\u9879\u5f0f\u53ef\u89e3\uff0c\u8ba4\u4e3a\u662f Tractable / \u7b80\u5355\u7684\u3002\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u53ef\u4ee5\u5f97\u5230\u89e3\uff0c\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u9a8c\u8bc1\u89e3\uff0cP\\sub NP\uff0c\u95ee\u9898\u662f\u65e0\u6cd5\u8bc1\u660e P \u662f NP \u7684\u771f\u5b50\u96c6\u3002</p> <p>NP \u95ee\u9898\uff1aNondeterministic Polynomial Time\uff0c\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u53ef\u9a8c\u8bc1\u4e00\u4e2a\u89e3\u662f\u5426\u6b63\u786e\uff0c\u8ba4\u4e3a\u662f Intractable / \u96be\u7684\u3002\u5b83\u53ef\u80fd\u662f\u591a\u9879\u5f0f\u53ef\u89e3\u7684\uff0c\u4e5f\u53ef\u80fd\u4e0d\u662f\u591a\u9879\u5f0f\u53ef\u89e3\u7684\u3002</p> <p>NP-C \u95ee\u9898\uff1a\u662f NP \u95ee\u9898\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4e14\u6240\u6709\u7684 NP \u95ee\u9898\u90fd\u80fd\u591a\u9879\u5f0f\u5f52\u7ea6\u5230 NP-C\u3002NP-C \u81f3\u5c11\u662f\u548c NP \u4e00\u6837\u96be\u7684\uff0c\u5373\u5982\u679c NPC \u591a\u9879\u5f0f\u53ef\u89e3\uff0c\u90a3 NP \u4e5f\u591a\u9879\u5f0f\u53ef\u89e3\uff0c\u5373 NP \u53ef\u4ee5\u591a\u9879\u5f0f\u65f6\u95f4\u5185 Reduction \u5230 NP-C \u95ee\u9898\u3002\u5728\u8bc1\u660e NP-C \u95ee\u9898\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u8bc1\u660e \\Omega \u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u662f\u8981\u8bc1\u660e\u5b83\u6709\u96be\u3002</p> <p>\u73b0\u5728\u6ca1\u6709\u529e\u6cd5\u8bc1\u660e P \u662f\u5426\u4e0e NP-C \u6709\u4ea4\u96c6\uff0c\u56e0\u4e3a\u5982\u679c\u6709\u4ea4\u96c6\uff0c\u90a3 P = NP\uff0cNPC \u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\uff1b\u5982\u679c\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3 P \\neq NP\u3002</p> <p>NP-Hard \u95ee\u9898\uff1a\u4ee3\u8868\u6240\u6709\u7684 NP \u95ee\u9898\u90fd\u80fd\u591a\u9879\u5f0f\u5f52\u7ea6\u5230\u7684\u96c6\u5408\u3002\u4e0d\u4e00\u5b9a\u662f NP \u95ee\u9898\uff0c\u4e0d\u4e00\u5b9a\u662f Decision Problem\uff0c\u5373\u5b83\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4e0d\u53ef\u9a8c\u8bc1\u3002NP \u548c NP-Hard \u7684\u4ea4\u662f NP-C\u3002 \u6240\u6709\u95ee\u9898\u90fd\u4e0d\u6bd4 NP-Hard \u96be\u3002</p> <p>co-NP \u95ee\u9898\uff1a\u8865\u662f NP</p> <p>\u95ee\u9898\u5206\u7c7b\uff1a</p> <p>Decision Problem: Output YES / NO</p> <p>Search Problem: Output YES / NO and Solution \u53ef\u884c\u89e3</p> <p>\u53ef\u4ee5\u628a Optimization Problem \u8f6c\u5316\u4e3a Decision Problem\uff0c\u6bd4\u5982\u8981\u60f3\u6c42 \\min\uff0c\u90a3\u53ea\u9700\u8981\u6784\u9020\u591a\u4e2a Upper bound\uff0c\u5373\u53ef\u53d8\u6210\u591a\u4e2a\u5224\u5b9a\u95ee\u9898\u3002Optimization Problem + k \\in \\mathbb{R} =&gt; Decision Problem\u3002</p> <p>\u4f8b\u5b50\uff1a</p> <p>\u7b2c\u4e00\u4e2a NP-C \u95ee\u9898 Set Problem: \u7528\u903b\u8f91\u8fd0\u7b97\u6784\u9020\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u7ed9\u67d0\u4e2a\u53d8\u91cf\u8d4b\u503c\u4e4b\u540e\uff0c\u53ef\u4ee5\u4e00\u5b9a\u8ba9\u6574\u4e2a\u8868\u8fbe\u5f0f\u503c\u4e3a 1\u3002SAT \u95ee\u9898\u662f\u6307\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542bn\u4e2a\u5e03\u5c14\u53d8\u91cf\u7684\u903b\u8f91\u5f0f\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u53d6\u503c\u7ec4\u5408\uff0c\u4f7f\u5f97\u8be5\u5f0f\u88ab\u6ee1\u8db3</p> <p>\u7f16\u7801\uff1aEncoding</p> <p>\u80cc\u5305\u95ee\u9898\u4e2d\u7684 W\uff0c\u5b9e\u9645\u4e0a\u662f\u6307\u6570\uff0c\u6240\u4ee5\u80cc\u5305\u95ee\u9898\u4ecd\u7136\u4e0d\u662f\u591a\u9879\u5f0f\u53ef\u89e3\u7684\u3002</p> <p>Def.  Language L, the formal realization of a problem. </p> <p>If x\\in L, the answer is YES; if x\\notin L, answer is NO. </p> <p>Turing Mechine: the formal analogue of an algorithm. \u53ef\u4ee5\u8fdb\u884c\u6309\u6b65\u9aa4\u7684\u8fd0\u7b97</p> <p>\u6bd4\u5982\u8981\u8bc1\u660e\u4e00\u4e2a\u6570\u662f\u8d28\u6570\u8fd8\u662f\u5408\u6570\uff0c\u90a3\u5982\u679c\u8bc1\u660e\u5408\u6570\uff0c\u53ea\u9700\u8981\u7ed9\u51fa\u56e0\u5b50\u5c31\u5f97\u8bc1\uff0c\u4f46\u662f\u8d28\u6570\u590d\u6742\u5f97\u591a\u3002</p> <p>2set \u662f P \u95ee\u9898\uff0c3set\u662f NP-complete \u95ee\u9898</p>"},{"location":"Data%20Structure/ADS%20Notes/#reduction","title":"Reduction \u5316\u7b80\u5f52\u7ea6","text":"<p>NP-complete \u6307 Decision Problem\uff0c\u5b83\u4e00\u5b9a\u662f NP \u95ee\u9898\uff0c\u4e0d\u9700\u8981\u8bc1\u660e\uff1bNP-hard \u9700\u8981\u8bc1\u660e\u662f NP\uff0c\u5b83\u4e0d\u662f Decision Problem</p> <ul> <li>Turing Reduction / Cook Reduction</li> </ul> <p>\u4e0d\u65ad\u8c03\u7528 B \u53bb\u89e3\u51b3 A\uff0c\u90a3 B \u81f3\u5c11\u8ddf A \u4e00\u6837\u96be\uff0cA\\leq_P B\u3002</p> <ul> <li>Karp Reduction</li> </ul> <p>L_1\\leq_PL_2 \u5373 x\\in L_1\\iff f(x)\\in L_2,\uff0cL_1,L_2 \u90fd\u662f \\{0,1\\}\uff0cx\\in L_1 \u4ee3\u8868 x \u7684 Decision \u662f 1\uff0c\u90a3 f(x) \u4e00\u5b9a\u4e5f\u662f 1\uff1b\u5982\u679c x\\notin L_1\uff0c\u5373 x \u5728\u95ee\u9898 L_1 \u4e2d\u7b54\u6848\u662f 0\uff0c\u90a3 f(x)\\notin L_2\u3002</p> <p></p> <p>\u591a\u9879\u5f0f\u5f52\u7ea6\u5177\u6709\u4f20\u9012\u6027</p> <p>\u6240\u4ee5 NP-Complete \u96c6\u5408\u91cc\u7684\u6240\u6709\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u4e92\u76f8\u591a\u9879\u5f0f\u5f52\u7ea6\uff1b\u6240\u4ee5\u5982\u679c\u8981\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u662f NP-Complete \u7684\uff0c\u90a3\u53ea\u9700\u8981\u8bc1\u660e\u67d0\u4e00\u4e2a NP-Complete \u53ef\u4ee5\u5f52\u7ea6\u5230\u5b83\u4e0a\u9762\u3002</p> <p>\u8fd1\u4f3c\u6bd4\u662f\u4e0d\u80fd\u591a\u9879\u5f0f\u89c4\u7ea6\u7684\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#mid-term-contest","title":"Mid-term Contest","text":"<p>In the knapsack problem, we have n items, in which the i-th item values v_i and sizes s_i, and a knapsack capacity C. (All positive integers.) Our goal is to select a subset of the items such that the total value of the items should be as large as possible, and their total size should be at most C. We will design dynamic programming to solve this problem. Please choose the correct description of subproblems of an optimal solution.</p> <p>Let OPT(i,v) denote the smallest size of a subset items 1,\u2026,i such that its value is exactly v, If no such item exists it is infinity.</p> <p>\u53e6\u4e00\u79cd\u80cc\u5305\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N\\times totVal)</p> <p>In this problem, we would like to find the amortized cost of insertion in a dynamic table T.</p> <p>Assume that entering an element in an empty slot of a table costs 1, and copying an element from a table into a new table also costs 1.</p> <p>When an item is inserted into a full table, the table T is expanded as a new table T\u2032, and \u2223T\u2032\u2223=\u2223T\u2223+10000, i.e, each new table has 10000 more slots than the previous one. Then, we copy all the elements of the old table T into this new table T\u2032, and insert the item in the new table.</p> <p>Starting with an empty table T with 10000 slots, we insert a sequence of n elements. What is the amortized cost per insertion? (Choose the smallest upper bound that applies)</p> <p>\u53ea\u662f\u6269\u5927\u5e38\u6570\u4e2a\uff0c\u4e0d\u662f\u6269\u5927\u4e00\u500d\uff1b\u53ef\u4ee5\u76f4\u63a5\u5f53\u6210\u6bcf\u6b21\u589e\u52a0 1 \u6765\u60f3\uff0c\u6bcf\u653e\u8fdb\u6765\u4e00\u4e2a\u5c31\u53c8\u6ee1\u4e86\uff0c\u53c8\u8981 copy \u4e00\u904d\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-11-approximation","title":"Lecture 11. Approximation","text":""},{"location":"Data%20Structure/ADS%20Notes/#definitions","title":"Definitions","text":"<p>Approximation Ratio: \u6700\u4f18\u5316\u7684\u95ee\u9898\u7684\u8fd1\u4f3c\u89e3\u4e0e\u6700\u4f18\u89e3\u7684\u6bd4\uff08\u5173\u5fc3\u89e3\u7684\u8d28\u91cf\uff09</p> <p>\u8fd1\u4f3c\u6bd4\u8d8a\u5c0f\u8d8a\u597d\uff0c\u8d8a\u63a5\u8fd1 1 \u8d8a\u597d\u3002\u8fd1\u4f3c\u6bd4\u4e00\u5b9a\u5927\u4e8e1 \uff01\uff01\uff01</p> <p>\u5bf9\u4e8e\u4e00\u4e2a Instance I\uff0c\u5982\u679c C(I) \u662f\u8fd1\u4f3c\u7b97\u6cd5\u7684\u89e3\uff0c\\mathit{OPT}(I) \u662f\u6700\u4f18\u89e3\u3002\u90a3\u4e48\u6c42\u6700\u5c0f\u503c\u95ee\u9898\u7684\u8fd1\u4f3c\u6bd4 \\alpha = \\sup_{I}\\dfrac{C(I)}{\\mathit{OPT}(I)}\uff0c\u6c42\u6700\u5927\u503c\u95ee\u9898\u7684\u8fd1\u4f3c\u6bd4 \\alpha = \\sup_{I}\\dfrac{\\mathit{OPT}(I)}{C(I)}</p> <p>Approximation Scheme: \u5b9a\u4e49\uff1f\uff1f\uff1f</p> <p>FPTAS (fully polynomial-time approximation scheme): \u90a3\u4e2a\u5173\u4e8e 1/\\epsilon \u7684\u591a\u9879\u5f0f\uff0c\u4e0d\u5728\u6307\u6570\u4e0a\uff1bPTAS (polynomial-time approximation scheme): 1/\\epsilon \u5728\u6307\u6570\u4e0a</p> <p>\u5b9e\u9645\u5e94\u7528\u65f6\u600e\u4e48\u6c42 Approximation Ratio\uff1f $$ \\alpha = \\sup_{I}\\dfrac{C(I)}{\\mathit{OPT}(I)}\\leq \\sup_{I}\\dfrac{C(I)}{\\mathit{OPT}'(I)} $$ \u5176\u4e2d {\\mathit{OPT}'(I)} \u8868\u793a Lower Bound\uff0c\u4e0b\u754c\u3002</p> <p>\u5982\u679c\u6709 2 \u4e2a\u5728\u7ebf\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u90a3\u5982\u679c\u6bcf\u4e00\u6b65\u90fd\u968f\u4fbf\u62ff\u4e00\u4e2a\u6765\u7528\uff0c\u90a3\u53ef\u80fd\u6700\u540e\u6bd4\u53ea\u7528\u4e00\u4e2a\u7684\u8fd1\u4f3c\u6bd4\u8fd8\u70c2\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#approximate-bin-packing","title":"Approximate Bin Packing","text":"<p>\u88c5\u7bb1\u95ee\u9898\uff1a\u6bcf\u4e2a\u7bb1\u5b50\u5927\u5c0f\u4e3a 1\uff0c\u6709 N \u4e2a\u7269\u54c1\uff0c\u8981\u5168\u88c5\u8fdb\u53bb\uff0c\u95ee\u6700\u5c11\u88c5\u51e0\u7bb1\uff1f</p> <p>3 \u79cd\u79bb\u7ebf\u7b97\u6cd5</p> <p>Next Fit\uff1a\u5982\u679c\u5f53\u524d\u7684\u6700\u540e\u4e00\u4e2a\u7bb1\u5b50\u80fd\u653e\u5c31\u653e\uff0c\u653e\u4e0d\u4e0b\u5c31\u5f00\u8f9f\u65b0\u7bb1\u5b50</p> <p>Th. \u5982\u679c\u6700\u4f18\u89e3\u4e3a M\uff0c\u90a3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u89e3\u4e00\u5b9a\u4e0d\u4f1a\u5927\u4e8e 2M-1\uff0c\u6240\u4ee5\u8fd1\u4f3c\u6bd4\u4e3a 2\u3002\u6bd4\u5982\u6709 2M-2 \u4e2a \\epsilon\uff0c\u6709 2M-2 \u4e2a 1/2\uff0c\u6700\u4f18\u89e3\u4e3a M-1 \u4e2a\u6ee1\u7bb1\u5b50 + 1 \u4e2a\u5168\u88c5 \\epsilon\u3002</p> <p>First Fit: \u627e\u5230\u7b2c\u4e00\u4e2a\u80fd\u653e\u5f97\u4e0b\u7684\uff0c\u653e\u8fdb\u53bb\u3002\u89e3\u4e00\u5b9a\u4e0d\u4f1a\u5927\u4e8e 17M/10\u3002</p> <p>Best Fit: \u5728\u80fd\u653e\u7684\u4e0b\u7684\u7bb1\u5b50\u91cc\u627e\u5bb9\u91cf\u6700\u5c0f\u7684\uff0c\u653e\u8fdb\u53bb\u3002\u89e3\u4e00\u5b9a\u4e0d\u4f1a\u5927\u4e8e 17M/10\u3002</p> <p>\u79bb\u7ebf\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u4e00\u5b9a\u5927\u4e8e 1.5-\\epsilon\uff0c\u5728\u7ebf\u7b97\u6cd5\u6700\u4f18\u8fd1\u4f3c\u6bd4\u4e3a 5/3\u3002</p> <p>\u5982\u679c\u53bb\u6389\u961f\u5217\u4e2d\u7684\u4e00\u4e2a\u7269\u54c1\uff0c\u53ef\u80fd First Fit \u6700\u540e\u4f1a\u8ba9\u7bb1\u5b50\u6570\u589e\u52a0\u3002</p> <p>\u5982\u679c\u7bb1\u5b50\u53d8\u5927\u4e86\uff0c\u90a3 First Fit \u4e5f\u53ef\u80fd\u8ba9\u6700\u540e\u7bb1\u5b50\u6570\u589e\u52a0\u3002</p> <p>Online Algorithms</p> <p>Th. \u4efb\u4f55\u5728\u7ebf\u88c5\u7bb1\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u8fd1\u4f3c\u6bd4\u90fd\u4e0d\u4f4e\u4e8e 5/3</p> <p>Proof. \u5047\u8bbe\u6bcf\u4e2a\u7bb1\u5b50\u5927\u5c0f\u4e3a 50\uff0c\u4e00\u4e2a\u8f93\u5165\u662f 34 \u4e2a tiny items</p> <ol> <li>\u4efb\u4f55\u597d\u7684\u5728\u7ebf\u7b97\u6cd5\u9762\u5bf9\u6700\u521d\u7684 34 \u4e2a tiny items \u90fd\u4e0d\u80fd\u88c5\u4e24\u4e2a\u7bb1\u5b50\uff0c\u56e0\u4e3a\u5982\u679c\u7b97\u6cd5\u60f3\u8981\u88c5\u5728\u4e24\u4e2a\u7bb1\u5b50\uff0c\u90a3\u8f93\u5165\u5e8f\u5217\u957f\u5ea6\u4e3a 2\uff0c\u90a3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6548\u679c\u5c31\u5f88\u5dee</li> <li>\u5047\u8bbe\u4e4b\u540e\u662f 2 \u4e2a 17\uff0c\u90a3\u4efb\u610f\u4e00\u4e2a\u8fd1\u4f3c\u7b97\u6cd5\u8981\u4e48\u662f\u88c5\u5728\u4e00\u8d77\uff0c\u8981\u4e48\u662f\u88c5\u5728 2 \u4e2a\u7bb1\u5b50\u91cc\u3002</li> <li>\u5982\u679c\u88c5\u5728\u4e00\u8d77\uff0c\u90a3\u5047\u8bbe\u540e\u9762\u7684\u8f93\u5165\u662f 3 \u4e2a 26\uff0c\u90a3\u6700\u4f18\u89e3\u4e3a\u88c5 3 \u4e2a\u7bb1\u5b50\uff0c\u8fd1\u4f3c\u7b97\u6cd5\u6700\u597d\u53ea\u80fd\u88c5\u5230 5 \u4e2a\u7bb1\u5b50</li> <li>\u5982\u679c\u88c5\u5728 2 \u4e2a\u7bb1\u5b50\u91cc\uff0c\u90a3\u5047\u8bbe\u540e\u9762\u7684\u8f93\u5165\u662f 2 \u4e2a 34\uff0c\u90a3\u6700\u4f18\u89e3\u4e3a\u88c5 3 \u4e2a\u7bb1\u5b50\uff0c\u8fd1\u4f3c\u7b97\u6cd5\u6700\u597d\u53ea\u80fd\u88c5 5 \u4e2a\u7bb1\u5b50</li> </ol> <p></p> <p>\u60f3\u8981\u53bb\u4f30\u8ba1\u6700\u5927\u751f\u6210\u6811 T \u4e2d\u7684\u6bcf\u4e2a\u8fb9\u7684\u6743\u503c\uff0c\u6211\u4eec\u8bbe S \u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8fb9\u7684\u96c6\u5408\u3002S \u4e2d\u6bcf\u4e00\u6761\u8fb9\uff0c\u80af\u5b9a\u662f\u67d0\u4e00\u4e2a\u7aef\u70b9\u7684\u6700\u5927\u6743\u8fb9</p> <p>\u4f46\u662f\u5982\u679c\u6539\u4e3a w(S)\\geq 0.5w(T)\uff0c\u8fd9\u4e2a\u9009\u9879\u624d\u6709\u610f\u4e49</p> <p></p> <p>\u8fd9\u91cc\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u53ef\u4ee5\u6709\u8def\uff0c\u6240\u4ee5\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\u7684\u5ea6\u91cf\u7a7a\u95f4\u3002\u6700\u5dee\u60c5\u51b5\uff0c\u6bcf\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u90fd\u8d70\u4e24\u904d\uff0c\u8fd9\u6837\u521a\u597d\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u56de\u5230\u8d77\u70b9\uff0c\u6240\u4ee5\u8fd1\u4f3c\u6bd4\u53ef\u4ee5\u662f 2\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5728 dfs \u57fa\u7840\u4e0a\u518d\u4f18\u5316\uff0c\u8fd1\u4f3c\u6bd4\u53ef\u4ee5\u66f4\u5c0f\u3002</p> <p>bfs (Level Order) \u662f\u4e0d\u884c\u7684\uff0c\u5b83\u4e0d\u4f1a\u6784\u6210\u4e00\u4e2a\u5708\uff0c\u56e0\u4e3a\u6700\u540e\u56de\u4e0d\u5230\u539f\u70b9\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#knapsack","title":"Knapsack","text":"<p>\u8d2a\u5fc3\u7b97\u6cd51\uff1a\u5355\u4f4d\u4ef7\u503c\u6700\u9ad8\u7684\u9009\u8fdb\u6765\u3002\u8fd1\u4f3c\u6bd4\u5f88\u5dee\uff0c\u6bd4\u5982\u80cc\u5305\u5bb9\u91cf\u4e3a 1\uff0c\u6709 2 \u4e2a\u7269\u54c1\uff0c\u4e00\u4e2a\u4ef7\u503c\u4e3a 1\uff0c\u4f53\u79ef\u4e3a 1\uff0c\u4e00\u4e2a\u4ef7\u503c\u4e3a w\\lt 1\uff0c\u4f53\u79ef\u4e3a \\epsilon\\lt 1\uff0c\u6700\u4f18\u7b97\u6cd5\u7684\u89e3\u4e3a 1\uff0c\u4f46\u662f\u8d2a\u5fc3\u7b97\u6cd51\u7684\u89e3\u4e3a w\uff0c\u8fd1\u4f3c\u6bd4\u4e3a 1/w\uff0c\u5b83\u53ef\u4ee5\u5f88\u5927\u5f88\u5927\u3002</p> <p>\u8d2a\u5fc3\u7b97\u6cd52\uff1a\u4ef7\u503c\u6700\u9ad8\u7684\u9009\u8fdb\u6765\u3002\u8fd1\u4f3c\u6bd4\u8fd8\u662f\u5f88\u5dee\uff0c\u56e0\u4e3a\u53ef\u4ee5\u6709\u8bb8\u591a\u6027\u4ef7\u6bd4\u4e3a 1 \u4f46\u662f\u4f53\u79ef\u5f88\u5c0f\u7684\u7684\u7269\u54c1\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4f53\u79ef\u4e3a 1\uff0c\u6027\u4ef7\u6bd4\u4e3a t\\lt 1 \u7684\u7269\u54c1\uff0c\u90a3\u4f1a\u4f18\u5148\u9009\u8fd9\u4e2a\u5927\u7684\uff0c\u5bfc\u81f4\u8fd1\u4f3c\u6bd4\u4e3a 1/t\uff0c\u53ef\u4ee5\u5f88\u5927\u5f88\u5927\u3002</p> <p>Modi\fedGreedy \u6539\u8fdb\u7684\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u524d\u4e24\u4e2a\u8d2a\u5fc3\u7684\u89e3\u53d6 \\max\u3002\u8fd1\u4f3c\u6bd4\u4e3a 2\u3002</p> <p>\u8bc1\u660e\uff1a\u5047\u8bbe k \u4e2a\u7269\u54c1\u7684\u6027\u4ef7\u6bd4\u6ee1\u8db3 $$ \\frac{v_1}{w_1}\\geq \\frac{v_2}{w_2}\\geq \\cdots\\geq \\frac{v_k}{w_k} $$</p> <p>PTAS: \\epsilon \u4e00\u5b9a</p> <p>FPTAS: \u901a\u8fc7\u5bf9\u53e6\u4e00\u79cd\u80cc\u5305\u7684\u6539\u8fdb\uff0cO(N\\times totVal)\uff0c</p>"},{"location":"Data%20Structure/ADS%20Notes/#load-balancing","title":"Load Balancing","text":"<p>m \u4e2a\u673a\u5668\uff0cn \u4e2a\u5de5\u4f5c (p_1, \\cdots, p_n)\uff0c\u9700\u8981\u5c3d\u91cf\u8d1f\u8f7d\u5e73\u8861\uff0c\u8ba9\u5168\u90e8\u5b8c\u6210\u7684\u65f6\u95f4\u5c3d\u53ef\u80fd\u77ed\u3002</p> <p>\u663e\u7136 \\mathit{OPT}\\geq \\max(p_{max}, \\sum p_i/m)\u3002\u4f30\u8ba1\u8fd1\u4f3c\u6bd4\u7684\u65f6\u5019\u5f80\u5f80\u9700\u8981\u4f30\u8ba1\u6700\u4f18\u89e3\u7684\u4e0b\u754c\u3002</p> <p>\u5047\u8bbe\u8fd1\u4f3c\u7b97\u6cd5\u7684\u89e3\u4e3a \\mathit{AIG}\uff0c\u8bbe\u5b58\u5728\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0c\u524d n-1 \u9879\u5de5\u4f5c\u90fd\u5747\u5300\u5206\u597d\uff0c\u7b2c n \u9879\u5355\u72ec\u7559\u51fa\u6765\u4e86\uff0c\u90a3 \\mathit{AIG}=\\sum_{i=1}^{n-1}p_i+p_n\\xlongequal{\\triangle}x+p_n\u3002\u800c \\mathit{OPT}\\geq \\max(p_n,\\dfrac{mx+p_n}{m})\\geq x+p_n/m\uff0c\u90a3\u4e48\u6709 $$ \\mathit{AIG}=x+p_n/m+(1-1/m)p_n\\leq \\mathit{OPT}+(1-1/m)\\mathit{OPT}=(2-1/m)\\mathit{OPT}\\leq 2\\mathit{OPT} $$</p>"},{"location":"Data%20Structure/ADS%20Notes/#k-center","title":"K-center","text":"<p>\u628a n \u4e2a\u70b9\uff0c\u5212\u6210 k \u4e2a\u5708\uff0c\u8ba9\u6700\u5927\u534a\u5f84\u6700\u5c0f\u3002</p> <p>\u8fd1\u4f3c\u89e3\u5982\u679c\u5728\u6700\u4f18\u89e3\u7684\u5708\u91cc\uff0c\u90a3\u53ea\u8981\u4ee5\u4ed6\u4e3a\u4e2d\u5fc3\u753b\u4e00\u4e2a\u534a\u5f84\u4e3a 2r \u7684\u5708\uff0c\u90a3\u4e00\u5b9a\u53ef\u4ee5\u628a\u6240\u6709\u7684\u70b9\u90fd\u5708\u8fdb\u6765\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-12-local-search","title":"Lecture 12. Local Search","text":"<p>\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u53ef\u884c\u89e3\uff0c\u80fd\u4e0d\u80fd\u8ba9\u8fd9\u4e2a\u89e3\u7684\u8fd1\u4f3c\u6bd4\u66f4\u597d\u4e00\u4e9b\uff1f</p> <p>\u5982\u679c\u628a\u89e3\u7684\u8fd1\u4f3c\u6bd4\u5f53\u6210\u51fd\u6570\uff0c\u90a3\u53ef\u4ee5\u9009\u53d6\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u6709\u65f6\u5019\u8fd1\u4f3c\u6bd4\u51fd\u6570\u4e0d\u662f\u5355\u5cf0\u7684\uff0c\u6216\u8005\u5b58\u5728\u978d\u70b9\uff0c\u90a3\u8fd9\u6837\u5c31\u4f1a\u51fa\u95ee\u9898\u3002</p> <p>\u5bf9 NPC \u95ee\u9898\u5f88\u96be\u627e\u5230\u6700\u4f18\u89e3\uff0cP \u95ee\u9898\u4f1a\u66f4\u5bb9\u6613\u627e\u5230\u6700\u4f18\u89e3\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#hopfield-neural-networks","title":"Hopfield Neural Networks","text":"<p>\u56fe\u91cc\u6bcf\u4e2a\u70b9\u90fd\u6709 +1,-1 \u4e24\u4e2a\u72b6\u6001\uff0c\u6bcf\u4e2a\u8fb9\uff0c\u5982\u679c\u8282\u70b9\u7684\u72b6\u6001\u76f8\u540c\uff0c\u90a3\u8fd9\u4e2a\u8fb9\u5c31\u662f\u8d1f\u8fb9\uff1b\u5982\u679c\u72b6\u6001\u76f8\u53cd\uff0c\u90a3\u8fb9\u662f\u6b63\u8fb9\uff0c\u6bcf\u4e2a\u8fb9\u7684\u6743\u503c\u7edd\u5bf9\u503c\u4ee3\u8868\u9700\u6c42\u7684\u91cd\u8981\u6027\u3002</p> <p>\u60f3\u8981\u8ba9\u8fd9\u4e2a\u56fe\u662f\u8db3\u591f\u597d\u7684\u3002</p> <p>\u5982\u679c w_e\\times s_{u}\\times s_v\\lt 0\uff0c\u90a3\u8fd9\u4e00\u6761\u8fb9 e \u662f\u597d\u7684\uff0c\u5982\u679c\u4e0e\u4e00\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u6240\u6709\u8fb9\u7684\u597d\u8fb9\u7684\u52a0\u6743\u548c\u6bd4\u574f\u8fb9\u7684\u52a0\u6743\u548c\u8981\u5927\uff0c\u90a3\u5c31\u79f0\u4e3a\u8fd9\u4e2a\u8282\u70b9\u662f\u6ee1\u610f\u7684\u3002\u5982\u679c\u56fe\u91cc\u6240\u6709\u7684\u70b9\u90fd\u662f\u6ee1\u610f\u7684\uff0c\u90a3\u8fd9\u4e2a\u56fe\u5c31\u662f\u7a33\u5b9a\u7684\u3002</p> <p>\u7a33\u5b9a\uff1a\u6240\u6709\u4eba\u90fd\u6ee1\u610f\uff0c\u90fd\u4e0d\u60f3\u6539\u3002</p> <p></p> <p>\u5982\u679c\u628a\u81ea\u5df1\u7684\u72b6\u6001\u6539\u4e86\uff0c\u90a3\u4e00\u5b9a\u53ef\u4ee5\u8ba9\u81ea\u5df1\u4ece\u4e0d\u6ee1\u610f\u53d8\u6210\u6ee1\u610f\u3002</p> <p>Th. \u8fd9\u4e2a\u56fe\u5728\u6539\u53d8\u6700\u591a \\sum|w_e| \u6b21\u4e4b\u540e\u4e00\u5b9a\u4f1a\u7a33\u5b9a\u3002</p> <p></p> <p>Decision Problem \u662f P \u7684\uff0c\u4f46\u662f Search Problem \u662f\u96be\u7684\u3002</p> <p>\u8d28\u6570\u5408\u6570\u95ee\u9898\u4e5f\u662f\u8fd9\u6837\uff0c\u5224\u65ad\u662f\u5bb9\u6613\u7684\uff0c\u4f46\u662f\u627e\u5230\u56e0\u5f0f\u5206\u89e3\u662f\u96be\u7684\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#maximum-cut-problem","title":"Maximum Cut Problem","text":"<p>\u628a\u56fe\u5206\u6210\u4e8c\u90e8\u56fe\uff0c\u60f3\u8ba9\u5272\u6700\u5927\u3002</p> <p>\u4e00\u4e2a\u8fd1\u4f3c\u7b97\u6cd5\uff1a\u5047\u8bbe\u9694\u6210 A,B \u4e24\u90e8\u5206\uff0c\u5bf9\u4e8e\u6240\u6709\u7684 u\\in A\uff0c\u53ea\u8981 \\sum_{v\\in A} w_{uv}\\gt \\sum_{v\\in B}w_{uv}\uff0c\u5c31\u628a\u539f\u6765\u7684\u5272\u6362\u6389\uff0c\u628a u \u632a\u5230 B \u91cc\u3002</p> <p>\u4f18\u5316\uff1aBig-improvement-flip</p> <p>\u53ea\u6709 \\sum_{v\\in A} w_{uv}\\gt \\sum_{v\\in B}w_{uv}+\\dfrac{2\\epsilon}{n}w(A,B) \u624d\u6362\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#homework","title":"Homework","text":"<p>\u4e0d\u6b622\u500d\uff0c\u53ef\u4ee5\u4efb\u610f\u5927\u3002\u5047\u8bbe\u6709\u70b9 (0,0), (w,0), (w,h), (0,h) \u5047\u8bbe\u6700\u5f00\u59cb\u5148\u627e\u5230\u7684\u4e2d\u5fc3\u662f (-1,h/2), (w+1,h/2)\uff0c\u90a3\u5206\u7c7b\u662f\u628a (0,0),(0,h) \u5206\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u6b63\u89e3\u5e94\u8be5\u662f\u628a (0,0), (w,0) \u5206\u5728\u4e00\u8d77\u3002</p> <p></p> <p>A. \u5206\u6210\u4e24\u4e2a\u76f8\u7b49\u7684\u96c6\u5408\uff0c\u5c31\u662f NP\u3002</p> <p>D. \u5047\u8bbe\u6709\u4e00\u4e2a\u65f6\u95f4\u7279\u522b\u7279\u522b\u957f</p> <p>B. \u5982\u679c\u6bcf\u6b21\u79fb\u6700\u5927\u7684\uff0c\u90a3\u53ea\u8981\u79fb\u52a8\u8fc7\u5c31\u4e0d\u4f1a\u518d\u79fb\u56de\u6765\uff0c\u6240\u4ee5\u6700\u591a n \u6b21\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-13-randomized-algorithms","title":"Lecture 13. Randomized Algorithms","text":"<p>\u907f\u514d\u6700\u574f\u60c5\u51b5\uff0c\u5728\u4e00\u4e9b\u6700\u574f\u60c5\u51b5\u6bd4\u8f83\u5dee\u7684\u7b97\u6cd5\u4e2d\u5bfb\u627e\u5e73\u5747\u60c5\u51b5\u6700\u4f18\u3002</p> <p>\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u671f\u671b\u4e3a N\\log N\uff0c\u5728\u9009\u4e3b\u5143\u7684\u65f6\u5019\u662f\u6309\u7167\u5747\u5300\u5206\u5e03\u9009\u7684\u3002</p> <p>Amotized \u662f\u5bf9\u6700\u574f\u60c5\u51b5\u5e73\u5747\u3002</p> <p>\u4e24\u7c7b\u968f\u673a\u7b97\u6cd5\uff1a\u8f93\u5165\u662f\u968f\u673a\u7684\uff0cAverage-case\uff1b\u7b97\u6cd5\u662f\u968f\u673a\u7684\uff0cRandomized Algorithms</p> <p>Randomized Algorithms \u4e2d\u6709\u4e24\u7c7b\uff1a\u62c9\u65af\u7ef4\u52a0\u65af\u3001\u8499\u7279\u5361\u6d1b\uff1b\u5206\u522b\u5bf9\u5e94\uff1a\u7ed3\u679c\u603b\u662f\u6b63\u786e\u4f46\u662f\u65f6\u95f4\u4e0d\u540c\uff0c\u65f6\u95f4\u662f\u76f8\u5bf9\u7a33\u5b9a\u7684\u4f46\u662f\u7ed3\u679c\u6b63\u786e\u6027\u4e0d\u540c\u3002</p> <p>Example. Hiring problem</p> <p>Interviewing Cost: C_i, Hiring Cost: C_h; \u4e14 C_h \u8fdc\u5927\u4e8e C_i\u3002</p> <p>\u5047\u8bbe M \u4e2a\u88ab\u96c7\u4f63\uff0c\u5219\u603b\u7684\u65f6\u95f4\u4e3a NC_i+MC_h\u3002\u73b0\u5728\u6709\u4e00\u4e2a\u7b97\u6cd5\uff0c\u60f3\u627e best\uff0c\u627e\u5230 best \u5c31\u96c7\u4f63\uff0c\u628a\u4e4b\u524d\u7684\u89e3\u96c7\uff0c\u8fd9\u6837\u6700\u5dee\u65f6\u95f4\u4e3a NC_i+NC_h\u3002</p> <p>\u8ba1\u7b97\u5e73\u5747\u60c5\u51b5\uff1a\u8bbe X \u4e3a\u96c7\u4f63\u7684\u4eba\u6570\uff08\u6700\u7ec8\u53ea\u96c7\u4f63 1 \u4eba\uff0c\u5176\u4ed6 X-1 \u4f1a\u88ab\u89e3\u96c7\uff09</p> <p></p> <p>\u4e3a\u4ec0\u4e48\u662f 1/i ? \u524d i \u4e2a\u91cc\u5b83\u6700\u5927\u3002</p> <p>Online: \u9996\u5148\u67e5\u770b\u524d k \u4e2a\u4e4b\u540e\u786e\u5b9a\u4e00\u4e2a best\uff0c\u7136\u540e\u4e4b\u540e\u7684\u53ea\u8981\u5927\u4e8e best \u5c31\u76f4\u63a5\u8981\uff0c\u540e\u9762\u7684\u5c31\u4e0d\u770b\u4e86\u3002</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u65f6\u95f4\u662f\u7a33\u5b9a\u7684\uff0c\u4f46\u662f\u6b63\u786e\u7387\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u8981\u6c42\u4f7f\u7528\u8fd9\u4e2a\u7b97\u6cd5\u96c7\u4f63\u5230\u6b63\u786e\u7684\u4eba\u7684\u6982\u7387\u3002</p> <p>\u8bbe\u4e8b\u4ef6 S_i \u4e3a\uff0c\u6b63\u786e\u7684\u4eba\u5c31\u662f i\uff0c\u4e14\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\u5b83\u88ab\u96c7\u4f63\u4e86\uff0c\u610f\u601d\u5c31\u662f [k+1,i-1] \u7684\u4eba\u90fd\u6ca1\u88ab\u96c7\u4f63\u4e14\u5b83\u6bd4\u4e4b\u524d\u63a2\u7d22\u533a\u95f4\u7684\u7684\u6700\u5927\u503c\u8981\u5927\uff1b\u5373\u9700\u8981\u4fdd\u8bc1\uff0c[1,i-1] \u4e2d\u7684\u6700\u5927\u503c\u51fa\u73b0\u5728 [1,k] \u4e4b\u95f4\u3002\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f \\mathrm{E}S = \\mathrm{E}[\\sum S_i]=\\sum\\mathrm{Pr}(S_i)\u3002</p> <p>\u663e\u7136\uff0cS_i=0,i\\leq k\u3002 $$ \\mathrm{Pr}(S_i) = \\mathrm{Pr}(\u6b63\u786e\u7684\u4eba\u5c31\u662f i)\\mathrm{Pr}(\u88ab\u96c7\u4f63) = \\frac{1}{N}\\frac{k}{i-1} $$</p>  \\mathrm{Pr}(S) = \\sum_{i=k+1}^N\\mathrm{Pr}(S_i) = \\sum_{i=k+1}^N\\frac{1}{N}\\frac{k}{i-1} = \\frac{k}{N}\\sum_{i=k}^{N-1}\\frac{1}{i}\\geq \\frac{k}{N}\\ln(\\frac{N}{k})  <p>\u5f53 k=1/e \u65f6\uff0c\u53ef\u4ee5\u8ba9\u4e0b\u754c\u6700\u5927\u3002</p> <p>Quick Sort \u6bcf\u6b21\u9009\u5b9a\u4e00\u4e2a\u4e3b\u5143\uff0c\u5c0f\u4e8e\u7684\u653e\u5de6\u8fb9\uff0c\u5927\u4e8e\u7684\u653e\u53f3\u8fb9\uff0c\u7136\u540e\u9012\u5f52\u7684\u53bb\u7b97\uff0c\u6c42\u5e73\u5747\u8017\u65f6\u3002</p> <p>\u8861\u91cf\u65f6\u95f4\u7684\u65b9\u5f0f\uff1a\u5143\u7d20\u4e4b\u95f4\u6bd4\u8f83\u7684\u6b21\u6570 = \\sum x_{ij}\uff0ci,j \u8868\u793a\u4ece\u5c0f\u5230\u5927\u6392\u597d\u4e4b\u540e\u7684\u4e0b\u6807\u3002 $$ x_{ij} = \\delta_{a_i\\text{ compare with }a_j} $$</p>  \\mathrm{E}X = \\sum_{i}\\sum_{j&gt;i} \\mathrm{Pr}({a_i\\text{ compare with }a_j})  <p>\u53ea\u6709\u5f53 a_i \u6216\u8005 a_j \u5206\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u65f6\u5019\uff0ca_i \u6216\u8005 a_j \u505a\u4e86\u4e3b\u5143\uff0c\u624d\u4f1a\u8fdb\u884c\u6bd4\u8f83\u3002\u6240\u4ee5\u4e5f\u5c31\u610f\u5473\u7740 a_{i+1}, \\cdots, a_{j-1} \u90fd\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u3002 $$ \\mathrm{Pr}({a_i\\text{ compare with }a_j})\\leq \\frac{2}{j-i+1} $$ \u6bcf\u4e2a\u90fd\u662f\u7b49\u6982\u7387\u88ab\u9009\u4e3a\u4e3b\u5143\u7684\uff0c\u53ea\u6709\u9009\u4e86 a_i \u6216 a_{j} \u4e3a\u4e3b\u5143\uff0c\u624d\u4f1a\u9020\u6210 x_{ij}=1\uff0c\u6240\u4ee5\u6982\u7387\u6070\u4e3a 2/(j-i+1)\u3002</p> <p>Modified Quicksort \u9009\u4e3b\u5143\u7684\u65f6\u5019\uff0c\u53ea\u6709\u8fd9\u4e2a\u4e3b\u5143\u80fd\u591f\u8ba9\u5c0f\u7684\u5927\u7684\u7684\u5143\u7d20\u6570\u90fd &gt;1/4\uff0c\u624d\u9009\u3002</p> <p>\u8fd9\u6837\u7684\u7b97\u6cd5\u4e2d\uff0c\u9009\u4e3b\u5143\u7684\u6b21\u6570\u7b26\u5408\u53c2\u6570\u4e3a 1/2 \u7684\u51e0\u4f55\u5206\u5e03\uff08\u524d k-1 \u6b21\u4e0d\u6210\u529f\uff0c\u6700\u540e\u4e00\u6b21\u6210\u529f\uff09\uff0c\u6240\u4ee5\u51e0\u4f55\u5206\u5e03\u7684\u671f\u671b\u6b21\u6570\u4e3a 2\u3002\u6bcf\u6b21\u90fd\u53ef\u4ee5\u8ba9\u4e0b\u4e00\u5c42\u7684\u5927\u5c0f\u6700\u5927\u53d8\u4e3a n\\times 3/4\u3002\u6240\u4ee5\u6700\u591a \\log_{4/3}n \u5c42\u3002</p> <p>ppt \u662f\u5565\uff1f</p> <p></p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-14-parallel-algorithms","title":"Lecture 14. Parallel Algorithms","text":"<p>Parallel Random Access Machine (PRAM) \u5e76\u884c\u968f\u673a\u8bbf\u95ee</p> <p>\u6240\u6709\u673a\u5668\u90fd\u6709\u5171\u7528\u7684 Memory\u3002</p> <pre><code>for P_i, 1 &lt;= i &lt;= n pardo\n    A(i) &lt;- B(i)\n</code></pre> <p>\u6b63\u5e38\u4f1a\u9700\u8981 n \u7684\u65f6\u95f4\uff0c\u5e76\u884c\u53ea\u9700\u8981 1 \u7684\u65f6\u95f4\u3002</p> <p>\u540c\u65f6\u8bfb\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u662f\u5982\u679c\u540c\u65f6\u5199\uff0c\u5199\u7684\u4e1c\u897f\u8fd8\u4e0d\u540c\uff0c\u5c31\u9700\u8981\u5b9a\u4e49\u4e00\u4e9b\u89c4\u5219\u89e3\u51b3\u51b2\u7a81\u3002</p> <p>\u8bfb\u5199\u5206\u7c7b Exclusive-Read Exclusive-Write (EREW) \u72ec\u5360\u8bfb\u72ec\u5360\u5199\uff1bCREW \u5e76\u53d1\u8bfb\u72ec\u5360\u5199\uff1bCRCW \u5e76\u53d1\u8bfb\u5e76\u53d1\u5199</p> <p>\u518d\u5982\uff0c\u628a n \u4e2a\u6570\u52a0\u8d77\u6765\uff0c\u5982\u679c\u975e\u5e76\u884c\uff0c\u90a3\u9700\u8981\u82b1\u8d39 n \u7684\u65f6\u95f4\uff0c\u5e76\u884c\u53ea\u9700\u8981\u82b1\u8d39 \\log n \u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u7ed3\u6784\u3002</p> <p>Work-Depth (WD)</p> <p>\u4f1a\u51fa\u73b0 W(n) \u5f88\u5c0f\uff0c\u4f46\u662f T(n) \u5f88\u5927\u7684\u60c5\u51b5</p> <p>Work load \u2013 total number of operations: W(n) \u64cd\u4f5c\u6570 Worst-case running time: T(n)</p> <p>W(n) operations and T(n) time P(n) = W(n)/T(n) processors and T(n) time (on a PRAM) W(n)/p time using any number of p \u2264 W(n)/T(n) processors (on a PRAM) W(n)/p + T(n) time using any number of p processors (on a PRAM)</p>  \\sum \\lceil w_i/p\\rceil = \\sum (1+\\frac{w_i}{p}) = \\frac{\\sum w_i}{p} + T(n) = \\frac{W(n)}{P(n)} + T(n)"},{"location":"Data%20Structure/ADS%20Notes/#example","title":"Example \u524d\u7f00\u548c","text":"<p>\u5e76\u4e0d\u662f\u4e8c\u53c9\u6811\uff0c\u8fd9\u91cc\u4e5f\u662f\u53ea\u9700\u8981\u628a\u6700\u591a\u4e24\u9879\u52a0\u8d77\u6765\uff0c\u4f46\u662f B(1,2) \u4ee3\u88681\u52a0\u52304\uff0c\u800c\u4e0d\u662f\u7b2c3\u548c4\u52a0\u8d77\u6765\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#example-parallel-merge-sort","title":"Example Parallel Merge Sort","text":"T(n) = T(n/2)+O(n)  <p>\u600e\u6837\u628a\u5408\u5e76\u64cd\u4f5c\u51cf\u590d\u6742\u5ea6\uff1f</p> <p></p> <p>\u5206\u6210\u6ca1\u6709\u4ea4\u53c9\u7684\u4e00\u5757\u5757\uff0c\u76f8\u5f53\u4e8e\u77e5\u9053\u4e86\u5404\u81ea\u7684\u4f4d\u7f6e\uff0c\u77e5\u9053\u4e86A\u5e8f\u5217\u4e2d\u6709\u51e0\u4e2a\u7a7a\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u586b\u8fdbB\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u3002</p> <p>\u6bcf\u4e00\u5757\u5927\u5c0f\u90fd\u662f \\log n \u7684\uff0c\u5206\u6210 p=n/\\log n \u5757\u3002</p> <p>\u4ece A \u4e2d\u9009\u4e00\u5757\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728 B \u4e2d\u7684\u4f4d\u7f6e\uff0c\u901a\u8fc7\u4e8c\u5206\uff0c\u8fd9\u4e2a\u67e5\u627e\u662f \\log \u7684\u3002</p> <p>\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u5757\u91cc\u7684\u6240\u6709\u5143\u7d20\uff0c\u90fd\u53ef\u4ee5\u786e\u5b9a rank\u3002</p> <p>\u8fd9\u6837\u65f6\u95f4\u4f18\u5316\u4e3a $$ T(n)=T(n/2)+O(\\log n) $$ \u4f46\u662f\u603b Work Load \u4f9d\u7136\u662f $$ W(n) = 2W(n/2) + O(n) $$</p>"},{"location":"Data%20Structure/ADS%20Notes/#example_1","title":"Example \u627e\u6700\u5927\u503c","text":"<p>\u6cd51\uff1a\u6700\u5f00\u59cb\u5168\u90fd\u662f 0\uff1b\u7136\u540e\u4e24\u4e24\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e86\u5c31\u7ed9\u5b83\u51991\uff1b\u6b63\u786e\u5904\u7406\u5199\u5165\u51b2\u7a81\u5373\u53ef\uff1b\u5269\u4e0b\u7684\u90a3\u4e2a\u552f\u4e00\u4e00\u4e2a0\u5c31\u662f\u7b54\u6848\uff1b\u8fd9\u6837\u53ea\u9700\u8981 N^2 \u4e2a Processer \u5c31\u53ef\u4ee5\u5728 O(1) \u505a\u5b8c\u3002\u8fd9\u4e2a\u7b97\u6cd5\u4e2d T=O(1),W=O(n^2)\u3002</p> <p>\u6cd52\uff1a\u5206\u6210 \\sqrt{n} \u4e2a\u5927\u5c0f\u4e3a \\sqrt{n} \u7684\u5757\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5757\u5185\u7528\u6734\u7d20\u7684 T=O(\\sqrt{n}),W=O(\\sqrt{n})\u7684\u7b97\u6cd5\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u7528 T=O(1), W=O((\\sqrt{n})^2)=O(n) \u7684\u7b97\u6cd5\uff0c\u8fd9\u6837\u5373\u53ef\u4f18\u5316\u4e3a\uff1a $$ W(n) = \\sqrt{n}W(\\sqrt{n}) + n\\Rightarrow W(n) = O(n\\log\\log n) $$</p>  T(n) = \\sqrt{n}T(\\sqrt{n}) + 1\\Rightarrow T(n) = O(\\log \\log n)  <p>\u6cd53\uff1a\u5206\u6210 n/\\log \\log n \u4e2a\u5927\u5c0f\u4e3a \\log\\log n \u7684\u5757\u3002\u8fd9\u6837 T(n) = O(\\log \\log n),W(n) = O(n)\u3002</p> <p></p> <p>T,W \u4e2d\u7684 $\\log\\log(n/h) $ \u5229\u7528\u6cd52\u6765\u8ba1\u7b97\u5f97\u5230\u3002</p> <p></p>"},{"location":"Data%20Structure/ADS%20Notes/#lecture-15-external-sorting","title":"Lecture 15. External Sorting","text":"<p>\u5916\u6392\uff1a\u6ca1\u529e\u6cd5\u628a\u6240\u6709\u4e1c\u897f\u90fd\u8bfb\u8fdb\u5185\u5b58\uff0c\u600e\u4e48\u6392\u5e8f\uff1f\u8003\u8651\u78c1\u5e26\u7684\u60c5\u51b5\u3002</p> <p>Run: \u8bfb\u7684\u4e00\u4e2a\u533a\u95f4\u53eb\u505a\u4e00\u4e2a Run</p> <p>Pass: \u8bfb\u5b8c\u4e00\u904d\u53eb\u505a\u4e00\u4e2a Pass</p> <p>\u6309\u7167 Fibonacci \u6570\u5217\u7684\u65b9\u5f0f\u653e\uff0c\u6548\u7387\u6700\u9ad8</p> <p></p> <p></p> <p></p> <p>\u603b\u6570\u5e94\u8be5\u6ee1\u8db3 3F_{n-1}+2F_{n-2}+F_{n-3}\u3002</p> <p>run\u7684\u957f\u5ea6\u53ef\u4ee5\u6bd4\u5185\u5b58\u957f\u5ea6\u5927\uff0c\u56e0\u4e3a\u53ea\u8981 output buffer \u5199\u6ee1\u4e4b\u540e\u5c31\u76f4\u63a5\u5b58\u51fa\u53bb\u5c31\u597d\u3002</p> <p>\u5bf9\u4e8e k-way \u7684 Merge\uff0c\u4e00\u822c\u9700\u8981\u81f3\u5c11 2k \u5927\u5c0f\u7684 input buffer\u3002</p> <p>Read Write Merge \u662f\u53ef\u4ee5\u5e76\u884c\u64cd\u4f5c\u7684\u3002</p> <p>\u600e\u6837\u83b7\u5f97\u4e00\u4e2a\u66f4\u957f\u7684run\uff1f</p> <p>\u76f4\u63a5\u4ece\u4e00\u4e2a\u5e8f\u5217\u8bfb\u5440\u8bfb\uff0c\u7136\u540e\u5982\u679c\u53d1\u73b0\u653e\u4e0d\u8fdb output \u5c31\u5728 buffer \u4e2d mark \u4e00\u4e0b\uff0c\u76f4\u5230\u6240\u6709\u7684\u90fd\u88ab mark\uff0c\u90a3\u5c31\u91cd\u65b0\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684 run\u3002</p>"},{"location":"Data%20Structure/ADS%20Notes/#final-exam","title":"Final Exam","text":"<p>\u5224\u65ad 13   2pts</p> <p>\u9009\u62e9 20   3pts</p> <p>\u586b\u7a7a 2        3pts</p> <p>\u51fd\u6570 1        8pts</p>"},{"location":"Data%20Structure/Notes/","title":"Fundamental","text":""},{"location":"Data%20Structure/Notes/#ch-1","title":"Ch 1","text":"<ol> <li> <p>\u6570\u636e\u5143\u7d20\u662f\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d, \u6570\u636e\u9879\u662f\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u5355\u4f4d\u3002 \u6784\u6210\u6570\u636e\u5143\u7d20\u7684 \u6700\u5c0f\u5355\u4f4d\u662f\u6570\u636e\u9879 \u3002 \u5e38\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6765\u8fdb\u884c\u5904\u7406\u3002 \u6570\u636e\u5143\u7d20\u901a\u5e38\u7531\u82e5\u5e72\u4e2a \u6570\u636e\u9879 \u7ec4\u6210\uff0c\u6570\u636e\u9879\u5177\u6709\u539f\u5b50\u6027\uff0c\u662f\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u5355\u4f4d\u3002</p> </li> <li> <p>\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u662f\u6307\u6570\u636e\u7684\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff1b    \u6570\u636e\u5143\u7d20\u662f\u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff1b    \u6570\u636e\u9879\u662f\u7ec4\u6210\u6570\u636e\u5143\u7d20\u3001\u6709\u72ec\u7acb\u542b\u4e49\u7684\u3001\u4e0d\u53ef\u5206\u5272\u7684\u6700\u5c0f\u5355\u4f4d\uff1b    \u6570\u636e\u5bf9\u8c61\u662f\u6027\u8d28\u76f8\u540c\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\uff0c\u662f\u6570\u636e\u7684\u4e00\u4e2a\u5b50\u96c6</p> </li> <li> <p>\u6570\u636e\u7ed3\u6784\u6982\u5ff5\u5305\u62ec\u6570\u636e\u4e4b\u95f4\u7684\u903b\u8f91\u7ed3\u6784\u3001\u6570\u636e\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u6570\u636e\u7684\u8fd0\u7b97\u4e09\u4e2a\u65b9\u9762\u3002</p> </li> <li> <p>\u6570\u636e\u7ed3\u6784\u4ece\u903b\u8f91\u4e0a\u53ef\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u7ebf\u6027\u7ed3\u6784\u548c\u975e\u7ebf\u6027\u7ed3\u6784 \u3002</p> </li> <li> <p>\u6570\u636e\u7ed3\u6784\u7684\u903b\u8f91\u7ed3\u6784\u72ec\u7acb\u4e8e\u5176\u5b58\u50a8\u7ed3\u6784\uff0c\u6570\u636e\u7ed3\u6784\u7684\u5b58\u50a8\u7ed3\u6784\u4e0d\u80fd\u8bf4\u5b83\u662f\u72ec\u7acb\u4e8e\u8be5\u6570\u636e\u7ed3\u6784\u7684\u903b\u8f91\u7ed3\u6784\u7684     \u5b58\u50a8\u7ed3\u6784: \u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u7528\u8ba1\u7b97\u673a\u8bed\u8a00\u7684\u5b9e\u73b0     \u987a\u5e8f\u5b58\u50a8\uff0c\u6bd4\u5982\u6570\u7ec4\u5b9e\u73b0\u7684\u7ebf\u6027\u8868\uff0c\u5219\u5b58\u50a8\u7ed3\u6784\u548c\u903b\u8f91\u7ed3\u6784\u662f\u4e00\u81f4\u7684\uff1b     \u94fe\u5f0f\u5b58\u50a8\uff0c\u540c\u6837\u662f\u5b9e\u73b0\u7ebf\u6027\u8868\uff0c\u5176\u903b\u8f91\u8fde\u7eed\u7684\u8282\u70b9\u5728\u7a7a\u95f4\u4e0a\u662f\u72ec\u7acb\u7684\uff1b     \u800c\u5bf9\u4e8e\u6811\u3001\u56fe\u7b49\u975e\u7ebf\u6027\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u903b\u8f91\u548c\u50a8\u5b58\u4e00\u5b9a\u662f\u72ec\u7acb\u7684\u3002</p> </li> <li> <p>\u6570\u636e\u7ed3\u6784\u76f8\u540c\uff0c\u903b\u8f91\u7ed3\u6784\u8981\u76f8\u540c\uff0c\u4f46\u903b\u8f91\u7ed3\u6784\u7684\u5b9e\u73b0\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u5b58\u50a8\u7ed3\u6784\uff1b</p> </li> <li> <p>\u4ee5\u4e0b\u5c5e\u4e8e\u903b\u8f91\u7ed3\u6784\u7684\u662f\uff08 C\uff09 A. \u987a\u5e8f\u8868 B. \u6563\u5217\u8868 C. \u6709\u5e8f\u8868 D. \u5355\u94fe\u8868</p> </li> </ol> <p>\u987a\u5e8f\u8868\u3001\u54c8\u5e0c\u8868\u548c\u5355\u94fe\u8868\u8868\u793a\u51e0\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u65e2\u63cf\u8ff0\u903b\u8f91\u7ed3\u6784\uff0c\u4e5f\u63cf\u8ff0\u5b58\u50a8\u7ed3\u6784\u548c\u6570\u636e\u8fd0\u7b97\uff0c\u800c\u6709\u5e8f\u8868\u662f\u6307\u5173\u952e\u5b57\u6709\u5e8f\u7684\u7ebf\u6027\u8868\uff0c\u53ef\u4ee5\u94fe\u5f0f\u5b58\u50a8\u4e5f\u53ef\u4ee5\u987a\u5e8f\u5b58\u50a8\uff0c\u4ec5\u63cf\u8ff0\u4e86\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u6545\u5b83\u5c5e\u4e8e\u903b\u8f91\u7ed3\u6784\u3002</p> <p>\u56e0\u4e3aA\u987a\u5e8f\u8868\u5df2\u7ecf\u8868\u793a\u4e86\u4ed6\u662f\u6309\u7167\u987a\u5e8f\u5b58\u50a8\u7684\u65b9\u5f0f\u5b58\u50a8\uff0cB\u54c8\u5e0c\u8868\u4f7f\u7528\u6563\u5217\u5b58\u50a8\uff0cD\u5355\u94fe\u8868\u8868\u660e\u662f\u94fe\u5f0f\u5b58\u50a8\u3002\u8fd9\u4e09\u4e2a\u9009\u9879\u90fd\u662f\u6839\u636e\u5b83\u7684\u7269\u7406\u5b58\u50a8\u65b9\u5f0f\u547d\u540d\u7684\uff0c\u6240\u4ee5\u90fd\u5c5e\u4e8e\u5b58\u50a8\u7ed3\u6784\uff0c\u6216\u662f\u7269\u7406\u7ed3\u6784\u3002    \u53ea\u6709C\u6709\u5e8f\u8868\uff0c\u65e2\u53ef\u4ee5\u7528\u94fe\u5f0f\u5b58\u50a8\u53c8\u53ef\u4ee5\u7528\u987a\u5e8f\u5b58\u50a8\uff0c\u6240\u4ee5\u53ea\u662f\u4e00\u79cd\u903b\u8f91\u4e0a\u7684\u6709\u5e8f\u800c\u4e0d\u662f\u5b9e\u9645\u5b58\u50a8\u7684\u65b9\u5f0f\u3002</p> <ol> <li>\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u5f85\u5904\u7406\u6570\u636e\u7684\u72b6\u6001\u4ee5\u53ca\u95ee\u9898\u7684\u89c4\u6a21</li> </ol>"},{"location":"Data%20Structure/Notes/#assignment-2","title":"Assignment 2","text":""},{"location":"Data%20Structure/Notes/#assignment-3","title":"Assignment 3","text":"<p>\u5faa\u73af\u961f\u5217\u4f1a\u635f\u5931\u4e00\u4e2a\u7a7a\u95f4</p>"},{"location":"Data%20Structure/Notes/#assignment-4","title":"Assignment 4","text":"<ol> <li> <p>\u7ebf\u7d22\u4e8c\u53c9\u6811</p> </li> </ol> <p></p>"},{"location":"Data%20Structure/Notes/#exp-43","title":"Exp 4.3","text":"<p>\u4e0b\u5217\u4ee3\u7801\u7684\u529f\u80fd\u662f\u8ba1\u7b97\u7ed9\u5b9a\u4e8c\u53c9\u6811<code>T</code>\u7684\u5bbd\u5ea6\u3002\u4e8c\u53c9\u6811\u7684\u5bbd\u5ea6\u662f\u6307\u5404\u5c42\u7ed3\u70b9\u6570\u7684\u6700\u5927\u503c\u3002\u51fd\u6570<code>Queue_rear</code>\u548c<code>Queue_front</code>\u5206\u522b\u8fd4\u56de\u5f53\u524d\u961f\u5217<code>Q</code>\u4e2d\u961f\u5c3e\u548c\u961f\u9996\u5143\u7d20\u7684\u4f4d\u7f6e\u3002</p> <pre><code>typedef struct TreeNode *BinTree;\nstruct TreeNode\n{\n   int Key;\n   BinTree  Left;\n   BinTree  Right;\n};\n\nint Width( BinTree T )\n{\n   BinTree  p;\n   Queue Q;\n   int Last, temp_width, max_width;\n\n   temp_width = max_width = 0;\n   Q = CreateQueue(MaxElements);\n   Last = Queue_rear(Q);\n   if ( T == NULL) return 0;\n   else {\n      Enqueue(T, Q);\n      while (!IsEmpty(Q)) {\n         p = Front_Dequeue(Q); \n         ++temp_width; // 3\u5206\n         if ( p-&gt;Left != NULL )  Enqueue(p-&gt;Left, Q);\n         if ( p-&gt;Right != NULL )  Enqueue(p-&gt;Right, Q); // 3\u5206;  \n         if ( Queue_front(Q) &gt; Last ) {\n            Last = Queue_rear(Q);\n            if ( temp_width &gt; max_width ) max_width = temp_width;\n            temp_width = 0; // 3\u5206;\n         } /* end-if */\n      } /* end-while */\n      return  max_width;\n   } /* end-else */\n} \n</code></pre>"},{"location":"Data%20Structure/Notes/#exam","title":"Exam \u94fe\u8868","text":"<pre><code>#include &lt;stdio.h&gt;\nvoid func(int *p) {\n    p = p + 1;\n}\nint main() {\n    int *p = (int *)malloc(20 * sizeof(int));\n    for (int i = 0; i &lt; 20; i++)\n        p[i] = i + 1;\n    printf(\"%d\\n\", *p);\n    func(p);\n    printf(\"%d\\n\", *p);\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\u4e3a</p> <pre><code>1\n1\n</code></pre> <p>\u6ce8\u610f\uff01\u51fd\u6570\u91cc\u4e0d\u4f1a\u6539\u53d8\u539f\u6709\u6307\u9488\uff01</p>"},{"location":"Data%20Structure/Notes/#ch-9","title":"Ch 9 \u67e5\u627e","text":"<p>Map</p> <ul> <li>\u987a\u5e8f\u67e5\u627e O(n)\uff0c\u82e5\u6bcf\u4e2a\u8bb0\u5f55\u7684\u67e5\u627e\u6982\u7387\u76f8\u7b49\u5219 ASL = \\dfrac{n+1}{2}</li> <li>\u4e8c\u5206\u67e5\u627e O(\\log_2(n))\uff0c\u82e5\u6bcf\u4e2a\u8bb0\u5f55\u67e5\u627e\u6982\u7387\u76f8\u7b49\u5219 ASL = \\dfrac{n + 1}{n}\\log_2(n + 1) - 1</li> <li>\u5206\u5757\u67e5\u627e</li> <li>\u52a8\u6001\u67e5\u627e - \u4e8c\u53c9\u6392\u5e8f\u6811 BST</li> <li>\u65b0\u63d2\u5165\u7ed3\u70b9\u4e00\u5b9a\u662f\u65b0\u6dfb\u52a0\u7684\u53f6\u5b50\u7ed3\u70b9\uff0c\u662f\u67e5\u627e\u4e0d\u6210\u529f\u65f6\u67e5\u627e\u8def\u5f84\u4e0a\u8bbf\u95ee\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u6216\u53f3\u5b69\u5b50\u3001</li> <li>\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6392\u5e8f\u6811\u53ef\u5f97\u5230\u4e00\u4e2a\u5173\u952e\u5b57\u6709\u5e8f\u7684\u5e8f\u5217</li> <li>AVL\u6811**\u662f\u6700\u5148\u53d1\u660e\u7684\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5728AVL\u6811\u4e2d\u4efb\u4f55\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u6700\u5927\u5dee\u522b\u4e3a1\uff0c\u6240\u4ee5\u5b83\u4e5f\u88ab\u79f0\u4e3a**\u9ad8\u5ea6\u5e73\u8861\u6811\u3002</li> <li>\u5220\u9664\uff1a\u5206\u60c5\u51b5\u8ba8\u8bba - \u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u53f6\u5b50/\u53ea\u6709\u5de6\u5b50\u6811\u6216\u53ea\u6709\u53f3\u5b50\u6811/\u6709\u5de6\u5b50\u6811\u4e5f\u6709\u53f3\u5b50\u6811(2\u79cd\u5220\u7684\u65b9\u5f0f)</li> <li></li> <li></li> <li></li> <li> <p></p> </li> <li> <p>Hash Map</p> </li> </ul>"},{"location":"Data%20Structure/Notes/#assignment-6","title":"Assignment 6","text":"<ul> <li> <p>\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u627e\u548c\u6298\u534a\u67e5\u627e(\u4e8c\u5206)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u540c F</p> </li> <li> <p></p> </li> <li> <p>\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\uff1a\u5411\u4e0a\u53d6\u6574\u4e5f\u53ef\u4ee5\u5411\u4e0b\u53d6\u6574\uff0c\u4f46\u662f\u6574\u4e2a\u6784\u9020\u8fc7\u7a0b\u4e2d\u5fc5\u987b\u9009\u62e9\u4e14\u53ea\u9009\u62e9\u4e00\u79cd\uff0c\u5982\u679c\u4e24\u79cd\u65b9\u5f0f\u540c\u65f6\u8fdb\u884c\u5c31\u662f\u9519\u7684\u3002</p> </li> <li> <p></p> </li> <li> <p></p> </li> </ul>"},{"location":"LeetCode/1-2sum3sum/","title":"Problem 1 &amp; 15 - Two Sum &amp; Three Sum","text":"<p>2022.01.16 &amp; 2024.01.09</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c <code>target</code> \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <pre><code>\u8f93\u5165\uff1anums = [2,7,11,15], target = 9\n\u8f93\u51fa\uff1a[0,1]\n\u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002\n</code></pre>"},{"location":"LeetCode/1-2sum3sum/#on2on2","title":"O(n^2)","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        for (vector&lt;int&gt;::iterator it = nums.begin(); it != nums.end(); it++) {\n            for (vector&lt;int&gt;::iterator jt = nums.begin(); jt != nums.end(); jt++) {\n                if ((*it) + (*jt) == target &amp;&amp; it != jt) {\n                    vector&lt;int&gt; vec;\n                    vec.push_back(it - nums.begin());\n                    vec.push_back(jt - nums.begin());\n                    return vec;\n                }\n            }\n        }\n        return vector&lt;int&gt;{};\n    }\n};\n</code></pre>"},{"location":"LeetCode/1-2sum3sum/#onlog-nonlog-n-sort-lower-bound","title":"O(n\\log n) - Sort &amp; Lower Bound","text":"<pre><code>struct Unit {\n    int value;\n    int index;\n};\nclass Solution {\npublic:\n    static bool cmp(Unit a, Unit b) {\n        return a.value &lt; b.value;\n    }\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;Unit&gt; vec;\n        for (auto it = nums.begin(); it != nums.end(); it++) {\n            Unit u = {*it, static_cast&lt;int&gt;(it - nums.begin())};\n            vec.push_back(u);\n        }\n        sort(vec.begin(), vec.end(), cmp);\n        for (auto it = vec.begin(); it != vec.end(); it++) {\n            auto bt = lower_bound(it + 1, vec.end(), (Unit){target - (*it).value, -1}, cmp);\n            if (bt != vec.end() &amp;&amp; (*it).value + (*bt).value == target) {\n                return {(*it).index, (*bt).index};\n            }\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"LeetCode/1-2sum3sum/#onlog-n-nonlog-n-n-sort-pointer","title":"O(n\\log n + n) - Sort &amp; Pointer","text":"<p>Used in 15. 3Sum. </p> <p>For a sorted array, binary search would use an extra \\log n time, so use the pointer instead. </p> <p>The additional code such as <code>continue</code> and <code>addLeft</code>, <code>subRight</code> are introduced due to the distinction constraint. </p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(), nums.end());\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        int size = nums.size();\n        for (int i = 0; i &lt; size - 2; i++) {\n            if (nums[i] &gt; 0) break;\n            if (i &gt;= 1 &amp;&amp; nums[i] == nums[i - 1])\n                continue;\n            int j = i + 1, k = size - 1;\n            int target = -nums[i];\n            while (j &lt; k) {\n                int sum = nums[j] + nums[k];\n                bool addLeft = 0, subRight = 0;\n                if (sum == target) {\n                    ans.push_back({nums[i], nums[j], nums[k]});\n                    addLeft = 1; subRight = 1;\n                }\n                else if (sum &lt; target) addLeft = 1;\n                else subRight = 1;\n\n                if (addLeft) {\n                    do { j++; }\n                    while (nums[j] == nums[j - 1] &amp;&amp; j &lt; k);\n                }\n                if (subRight) {\n                    do { k--; }\n                    while (nums[k] == nums[k + 1] &amp;&amp; j &lt; k);\n                }\n            }\n        }\n        return ans;\n    }\n};\n// N^2\n</code></pre>"},{"location":"LeetCode/1-2sum3sum/#onon-hash-map","title":"O(n) - Hash Map","text":"<pre><code>const int M = 19997;\nclass Solution {\npublic:\n    // value, index\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;pair&lt;int, int&gt; &gt; hashmap(M);\n        for (int i = 0; i &lt; M; i++) hashmap[i] = make_pair(1e9 + 1, -1);\n        for (auto it = nums.begin(); it != nums.end(); it++) {\n            int value = *it;\n            int value_mod = ((value % M) + M) % M;\n            int find = target - value;\n            int find_mod = ((find % M) + M) % M;\n            for (int i = find_mod; hashmap[i].first != 1e9 + 1; i++) {\n                if (i == M) i = 0;\n                if (hashmap[i].first + value == target) {\n                    return {hashmap[i].second, static_cast&lt;int&gt;(it - nums.begin())};\n                }\n            } \n            int pos = value_mod;\n            while (hashmap[pos].first != 1e9 + 1) {\n                pos++;\n                if (pos == M) pos = 0;\n            }\n            hashmap[pos] = make_pair(value, it - nums.begin());\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"LeetCode/135-greedy/","title":"Problem 135","text":"<p># Leetcode 135 Candy</p> <p>https://leetcode.cn/problems/candy/description/</p>"},{"location":"LeetCode/135-greedy/#_1","title":"\u5927\u5e38\u6570\u7b97\u6cd5\uff1a\u5efa\u56fe\uff0c\u6c42\u6700\u957f\u8def","text":"<p>\u7531\u4e8e\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u51fa\u5ea6\u4e0d\u8d85\u8fc7 <code>2</code>\uff0c\u56e0\u6b64\u6c42\u6700\u957f\u8def\u662f O(n) \u7684\u3002</p> <p>\u6240\u6709\u5165\u5ea6\u4e3a <code>0</code> \u7684\u70b9\u90fd\u662f\u6ca1\u6709\u9650\u5236\u6761\u4ef6\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5206\u7ed9\u4ed6\u4eec 0 \u4e2a\u7cd6\u679c\uff08\u4e0d\u59a8\u4ee4\u6240\u6709\u4eba\u624b\u91cc\u7684\u7cd6\u679c\u6570 - 1\uff09\u3002</p> <pre><code>// My Solution\nconst int MAXN = 2e4 + 3;\nstruct Edge{\n    int node, val;\n};\nstruct Node {\n    vector&lt;Edge&gt; e;\n    int in;\n};\n\nclass Solution {\n    Node edges[MAXN];\n    void addEdge(int from, int to, int val) {\n        if (from == to) return;\n        edges[from].e.push_back((Edge){to, val});\n        edges[to].in++;\n    }\n    void leftside(int i, int left, int midd) {\n        if (left &gt; midd) \n            addEdge(i, i - 1, 1);\n    }\n    void rightside(int i, int midd, int right) {\n        if (right &gt; midd)\n            addEdge(i, i + 1, 1);\n    }\n    int dis[MAXN];\n\npublic:\n    int candy(vector&lt;int&gt;&amp; ratings) {\n        int n = ratings.size();\n        for (int i = 0; i &lt; n; i++)\n            edges[i].in = 0;\n\n        if (n &gt; 1)\n            rightside(0, ratings[0], ratings[1]);\n        for (int i = 1; i &lt; n - 1; i++) {\n            leftside(i, ratings[i - 1], ratings[i]);\n            rightside(i, ratings[i], ratings[i + 1]);\n        }\n        if (n &gt; 1)\n            leftside(n - 1, ratings[n - 2], ratings[n - 1]);     \n\n        vector&lt;int&gt; zeroin;\n        for (int i = 0; i &lt; n; i++)\n            if (edges[i].in == 0) {\n                zeroin.push_back(i);\n            }\n        for (int i = 1; i &lt; zeroin.size(); i++) {\n            addEdge(zeroin[i], zeroin[i - 1], 0);\n            addEdge(zeroin[i - 1], zeroin[i], 0);\n        }\n        addEdge(zeroin[0], zeroin[zeroin.size() - 1], 0);\n        addEdge(zeroin[zeroin.size() - 1], zeroin[0], 0);\n\n        std::queue&lt;int&gt; q;\n        memset(dis, -1, sizeof(dis));\n        for (int i = 0; i &lt; zeroin.size(); i++) {\n            dis[zeroin[i]] = 0; q.push(zeroin[i]);\n        }\n        while (!q.empty()) {\n            auto node = q.front();\n            q.pop();\n            for (auto e : edges[node].e) {\n                if (dis[e.node] &lt; dis[node] + e.val) {\n                    dis[e.node] = dis[node] + e.val;\n                    q.push(e.node);\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i &lt; n; i++)\n            sum += dis[i];\n        return sum + n;\n    }\n};\n</code></pre>"},{"location":"LeetCode/135-greedy/#_2","title":"\u8d2a\u5fc3","text":"<p>\u6211\u4eec\u904d\u5386\u8be5\u6570\u7ec4\u4e24\u6b21\uff0c\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u5b66\u751f\u5206\u522b\u6ee1\u8db3\u5de6\u89c4\u5219\u6216\u53f3\u89c4\u5219\u65f6\uff0c\u6700\u5c11\u9700\u8981\u88ab\u5206\u5f97\u7684\u7cd6\u679c\u6570\u91cf\u3002\u6bcf\u4e2a\u4eba\u6700\u7ec8\u5206\u5f97\u7684\u7cd6\u679c\u6570\u91cf\u5373\u4e3a\u8fd9\u4e24\u4e2a\u6570\u91cf\u7684\u6700\u5927\u503c\u3002</p> <p>\u4ee5\u5de6\u89c4\u5219\u4e3a\u4f8b\uff0c\u5982\u679c\u9012\u589e\uff0c\u5219\u7cd6\u679c\u6570 <code>+1</code>\uff1b\u5982\u679c\u9012\u51cf\uff0c\u5219\u7cd6\u679c\u6570 <code>=1</code>\u3002</p>"},{"location":"LeetCode/135-greedy/#_3","title":"\u7a7a\u95f4\u4f18\u5316\u7684\u8d2a\u5fc3","text":"<p>\u6ce8\u610f\u5230\u7cd6\u679c\u603b\u662f\u5c3d\u91cf\u5c11\u7ed9\uff0c\u4e14\u4ece 1 \u5f00\u59cb\u7d2f\u8ba1\uff0c\u6bcf\u6b21\u8981\u4e48\u6bd4\u76f8\u90bb\u7684\u540c\u5b66\u591a\u7ed9\u4e00\u4e2a\uff0c\u8981\u4e48\u91cd\u65b0\u7f6e\u4e3a 1\u3002</p> <p>\u6211\u4eec\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\u6bcf\u4e00\u4e2a\u540c\u5b66\uff0c\u8bb0\u524d\u4e00\u4e2a\u540c\u5b66\u5206\u5f97\u7684\u7cd6\u679c\u6570\u91cf\u4e3a <code>pre</code>\uff1a</p> <p>\u5982\u679c\u5f53\u524d\u540c\u5b66\u6bd4\u4e0a\u4e00\u4e2a\u540c\u5b66\u8bc4\u5206\u9ad8\uff0c\u8bf4\u660e\u6211\u4eec\u5c31\u5728\u6700\u8fd1\u7684\u9012\u589e\u5e8f\u5217\u4e2d\uff0c\u76f4\u63a5\u5206\u914d\u7ed9\u8be5\u540c\u5b66 <code>pre+1</code> \u4e2a\u7cd6\u679c\u5373\u53ef\u3002</p> <p>\u5426\u5219\u6211\u4eec\u5c31\u5728\u4e00\u4e2a\u9012\u51cf\u5e8f\u5217\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5206\u914d\u7ed9\u5f53\u524d\u540c\u5b66\u4e00\u4e2a\u7cd6\u679c\uff0c\u5e76\u628a\u8be5\u540c\u5b66\u6240\u5728\u7684\u9012\u51cf\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u540c\u5b66\u90fd\u518d\u591a\u5206\u914d\u4e00\u4e2a\u7cd6\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7cd6\u679c\u6570\u91cf\u8fd8\u662f\u6ee1\u8db3\u6761\u4ef6\u3002</p> <p>\u6211\u4eec\u65e0\u9700\u663e\u5f0f\u5730\u989d\u5916\u5206\u914d\u7cd6\u679c\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7684\u9012\u51cf\u5e8f\u5217\u957f\u5ea6\uff0c\u5373\u53ef\u77e5\u9053\u9700\u8981\u989d\u5916\u5206\u914d\u7684\u7cd6\u679c\u6570\u91cf\u3002</p> <p>\u9012\u51cf\u5e8f\u5217\u4e00\u822c\u65e0\u9700\u5305\u542b\u5cf0\u503c\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u5f53\u5f53\u524d\u7684\u9012\u51cf\u5e8f\u5217\u957f\u5ea6\u548c\u4e0a\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\u7b49\u957f\u65f6\uff0c\u9700\u8981\u628a\u6700\u8fd1\u7684\u9012\u589e\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u540c\u5b66\u4e5f\u5e76\u8fdb\u9012\u51cf\u5e8f\u5217\u4e2d\uff08\u6b64\u65f6\u9700\u8981\u5305\u542b\u5cf0\u503c\uff09\u3002</p> <p>\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u8981\u8bb0\u5f55\u5f53\u524d\u9012\u51cf\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u6700\u8fd1\u7684\u9012\u589e\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u548c\u524d\u4e00\u4e2a\u540c\u5b66\u5206\u5f97\u7684\u7cd6\u679c\u6570\u91cf <code>pre</code> \u5373\u53ef\u3002</p> <p>\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3 \u94fe\u63a5\uff1ahttps://leetcode.cn/problems/candy/solutions/533150/fen-fa-tang-guo-by-leetcode-solution-f01p/</p>"},{"location":"LeetCode/1553-search/","title":"Leetcode 1553. Minimum Number of Days to Eat N Oranges","text":"<p>https://leetcode.cn/problems/minimum-number-of-days-to-eat-n-oranges/description/</p> <p>\u76f4\u63a5\u8bb0\u5fc6\u5316\u641c\u7d22\u4f1a TLE\u3002</p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c-1 \u7684\u6b21\u6570\u5728 \\div 2 \u4e4b\u524d\u6700\u591a 1 \u6b21\uff0c\u5728 \\div 3 \u4e4b\u524d\u6700\u591a 2 \u6b21\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fdb\u884c\u526a\u679d\u3002</p> <p>\u5bf9\u6b63\u6574\u6570 n, x, y\uff0c\u6709 $$ \\left\\lfloor \\frac{\\lfloor n/x \\rfloor}{y} \\right\\rfloor = \\left\\lfloor \\frac{n}{xy} \\right\\rfloor = \\left\\lfloor \\frac{\\lfloor n/y \\rfloor}{x} \\right\\rfloor $$</p> <p>\u5b9e\u9645\u4e0a\uff0c\u53ea\u6709\u6240\u6709\u6ee1\u8db3 i = \\lfloor n/ (2^x3^y)\\rfloor \u7684 <code>f[i]</code> \u503c\u624d\u4f1a\u88ab\u8ba1\u7b97\u3002</p> <p>\u800c x, y \u90fd\u662f \\log n \u7684\uff0c\u56e0\u6b64\u9700\u8981\u8ba1\u7b97\u7684 <code>f[i]</code> \u4e2a\u6570\u4e0d\u8d85\u8fc7 \\log^2 n \u4e2a\u3002</p> <p>\u56e0\u6b64\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a O(\\log^2 n)\u3002</p> <p>\u5e94\u4f7f\u7528 <code>unordered_map</code> \u6765\u5b58\u50a8\u3002</p> <pre><code>// My Answer, Using Extra Space\nconst int MAXN = 1e7;\n\nclass Solution {\n    int f[MAXN];\n    int eat(int n) {\n        if (n &lt; MAXN &amp;&amp; f[n] != -1) return f[n];\n        int n2 = eat(n &gt;&gt; 1), n3 = eat(n / 3);\n        int mn = std::min(n2 + n%2, n3 + n%3) + 1;\n        if (n &lt; MAXN) return f[n] = mn;\n        else return mn;\n    }\npublic:\n    int minDays(int n) {\n        memset(f, -1, sizeof(f));\n        f[0] = 0;\n        f[1] = 1;\n        return eat(n);\n    }\n};\n</code></pre> <p>\u5728\u53d1\u73b0\u4e0a\u8ff0\u6027\u8d28\u540e\uff0c\u53ef\u4ee5\u5bf9\u6240\u6709 \\lfloor n/2^x\\rfloor \u548c \\lfloor n/3^y\\rfloor \u4f5c\u4e3a\u8282\u70b9\u5efa\u56fe\uff0c\u8dd1\u6700\u77ed\u8def\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\log^2 n\\log\\log n)\u3002</p> <p>\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3 \u94fe\u63a5\uff1ahttps://leetcode.cn/problems/minimum-number-of-days-to-eat-n-oranges/solutions/384947/chi-diao-n-ge-ju-zi-de-zui-shao-tian-shu-by-leetco/</p>"},{"location":"LeetCode/2035-partition/","title":"\u5b50\u96c6\u5212\u5206","text":"<p>\u5c06\u4e00\u4e2a\u96c6\u5408\u5206\u6210\u4e24\u4e2a\u5c3d\u53ef\u80fd\u76f8\u7b49\u7684\u5b50\u96c6\u3002</p> <p>\u7b49\u4ef7\u4e8e \u5728\u96c6\u5408\u4e2d\u9009\u62e9\u4e00\u4e9b\u5143\u7d20\uff0c\u4f7f\u5f97\u5176\u548c\u5c3d\u53ef\u80fd\u63a5\u8fd1\u4f46\u4e0d\u8d85\u8fc7 <code>sum/2</code>\u3002</p> <p>\u8fd9\u662f NP Complete \u95ee\u9898\u3002</p> <p>\u5bf9\u4e8e\u8d2a\u5fc3\u7b97\u6cd5\uff08\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\uff0c\u4f9d\u6b21\u653e\u5165 <code>sum</code> \u8f83\u5c0f\u7684\u5b50\u96c6\uff09\uff0c\u662f\u9519\u8bef\u7684\uff0c\u5176\u8fd1\u4f3c\u6bd4\u4e3a 7/6\u3002</p> <p>\u53cd\u4f8b\uff1a12 9 10 14 8 1</p> <p>\u8d2a\u5fc3\u89e3\uff1a <pre><code>14 9 1  = 24\n12 10 8 = 30\n</code></pre></p> <p>\u6b63\u89e3\uff1a <pre><code>12 14 1 = 27\n9 10 8  = 27\n</code></pre></p> <p>\u5bf9\u4e8e Val \u8f83\u5c0f\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u80cc\u5305\u6c42\u89e3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N\\times \\max_{1 \\leq i \\leq N} w_i)\u3002\u89c1</p>"},{"location":"LeetCode/2035-partition/#leetcode-416-partition-equal-subset-sum","title":"Leetcode 416. Partition Equal Subset Sum","text":"<p>\u5bf9\u4e8e Val \u8f83\u5927\u7684\uff0c\u9700\u8981\u5176\u4ed6\u65b9\u6cd5\uff1a</p> <ul> <li>The Complete Greedy Algorithm (CGA) considers all partitions by constructing a binary tree. Each level in the tree corresponds to an input number, where the root corresponds to the largest number, the level below to the next-largest number, etc. Each branch corresponds to a different set in which the current number can be put. Traversing the tree in DFS requires only O(n) space, but might take O(2^n) time. </li> <li>\u542f\u53d1\u5f0f\u641c\u7d22\uff1ain each level, develop first the branch in which the current number is put in the set with the smallest sum. (greedy method)</li> <li>\u526a\u679d\uff1a\u82e5\u6240\u6709\u503c\u4e3a\u6b63\uff0c\u5219\u5982\u679c\u628a\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u90fd\u653e\u5165\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\uff0c\u4e24\u96c6\u5408\u4e4b\u5dee\u4ecd\u7136\u6bd4\u5df2\u6709\u89e3\u66f4\u5927\uff0c\u526a\u679d\u3002</li> <li>The Complete Karmarkar-Karp algorithm (CKK) considers all partitions by constructing a binary tree. Each level corresponds to a pair of numbers. The left branch corresponds to putting them in different subsets (i.e., replacing them by their difference), and the right branch corresponds to putting them in the same subset (i.e., replacing them by their sum). This algorithm finds first the solution found by the largest differencing method, but then proceeds to find better solutions. It runs substantially faster than CGA on random instances. Its advantage is much larger when an equal partition exists, and can be of several orders of magnitude. In practice, problems of arbitrary size can be solved by CKK if the numbers have at most 12 significant digits. CKK can also run as an anytime algorithm: it finds the KK solution first, and then finds progressively better solutions as time allows (possibly requiring exponential time to reach optimality, for the worst instances).[1] It requires O(n) space, and also in the worst case might take O(2^n) time.</li> </ul> <p>\u5176\u4e2d\u6d89\u53ca\u5230 KK solution\uff1a\u7ef4\u62a4\u4e00\u4e2a\u964d\u5e8f\u5e8f\u5217\uff0c\u53d6\u524d\u4e24\u4e2a\u4f5c\u5dee\u540e\u653e\u5165\u539f\u5e8f\u5217\uff0c\u6700\u540e\u5e8f\u5217\u4e2d\u5269\u7684\u552f\u4e00\u4e00\u4e2a\u6570\u5b57\u5373\u4e3a <code>sum1 - sum2</code>\u3002\u4f5c\u5dee\u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5728 <code>sum1</code> \u4e2d\u653e\u5165\u4e86\u8f83\u5927\u7684\u90a3\u4e2a\uff0c\u5728 <code>sum2</code> \u4e2d\u653e\u5165\u4e86\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5f15\u5165\u4e86\u4e8c\u8005\u7684\u5dee\u503c\u3002\u5982\u679c\u8fd9\u4e2a\u5dee\u503c\u540e\u7eed\u53c8\u4f5c\u4e3a\u51cf\u6570\uff0c\u5219\u76f8\u5f53\u4e8e\u98a0\u5012\u4e86\u987a\u5e8f\u3002\u8fd9\u4f9d\u7136\u662f\u8d2a\u5fc3\u89e3\uff0c\u6709 7/6 \u7684\u8fd1\u4f3c\u6bd4\u3002</p>"},{"location":"LeetCode/2035-partition/#leetcode-2035-partition-array-into-two-arrays-to-minimize-sum-difference","title":"Leetcode 2035. Partition Array Into Two Arrays to Minimize Sum Difference","text":"<p>Also see it at \u725b\u5ba2 KY231 \u7b2c\u4e8c\u9898 </p> <p>KY231 Code Backup</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nclass StringBuf {\npublic:\n    string str;\n    int ind;\n\n    StringBuf(string s) : str(s), ind(0) {};\n    char nxtchar() { \n        char output;\n        if (ind &lt; str.length()) output = str[ind]; \n        else output = EOF;\n        ++ind;\n        return output;\n    }\n    bool empty() { return ind &gt;= str.length(); }\n};\n\ninline bool isspace(char c) {\n    return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t';\n}\n\nint getNum(StringBuf&amp; buf) {\n    int ret = 0; char c = buf.nxtchar();\n    while (c &lt; '0' || c &gt; '9') {\n        if (c == EOF) return -1;\n        if (!isspace(c)) return 0;\n        c = buf.nxtchar();\n    }\n    while (c &gt;= '0' &amp;&amp; c &lt;= '9') {\n        ret = ret * 10 + c - '0';\n        c = buf.nxtchar();\n    }\n    if (c == EOF || isspace(c)) return ret;\n    return 0;\n}\n\nint main() {\n    string line;\n    vector&lt;int&gt; vec;\n    vector&lt;int&gt; f;\n    while (std::getline(cin, line)) {\n        StringBuf buf(line);\n        int a = getNum(buf);\n        vec.clear();\n        while (a &gt; 0) {\n            vec.push_back(a);\n            a = getNum(buf);\n            // cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;;\n        }\n        if (!a) {\n            cout &lt;&lt; \"ERROR\" &lt;&lt; endl;\n            continue;\n        }\n\n        int sum = 0;\n        for (int i = 0; i &lt; vec.size(); i++)\n            sum += vec[i];\n        int thres = sum / 2;\n\n        f.clear();\n        f.push_back(0);\n        for (int i = 0; i &lt; vec.size(); i++) {\n            for \n        }\n    }\n\n}\n</code></pre> <p>\u4e00\u4e9b\u9898\u89e3\uff1a</p> <p>https://blog.csdn.net/hh1986170901/article/details/105000680 https://cloud.tencent.com/developer/article/1930272 https://leetcode.cn/problems/partition-array-into-two-arrays-to-minimize-sum-difference/solutions/1097118/cong-ling-kai-shi-de-chun-ckun-nan-shua-fnohc/</p>"},{"location":"LeetCode/2035-partition/#acwing-3503","title":"AcWing 3503","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstring input;\n\nstd::tuple&lt;int, int&gt; getint(int index) {\n    int ret = 0; char ch = input[index++];\n    while (ch &lt; '0' || ch &gt; '9') ch = input[index++];\n    while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {\n        ret = ret * 10 + ch - '0'; ch = input[index++];\n    }\n    return std::make_tuple(ret, index);\n}\n\nvector&lt;int&gt; arr;\nvector&lt;int&gt; s;\nint target, diff;\nbool ret = false;\nvoid dfs(int index, int sum) { // sum is former\n    if (sum &gt; target) return;\n    diff = min(diff, target - sum);\n    if (diff == 0) return;\n    if (index == arr.size()) return;\n    if (target - (sum + s[index]) &gt;= diff) return;\n    if (sum + arr[index] &gt; target) return;\n    dfs(index + 1, sum + arr[index]);\n    dfs(index + 1, sum);\n}\n\nint main() {\n    getline(cin, input);\n    int len = input.length();\n    input += '*';\n    input += '*';\n    int index = 0;\n\n    int sum = 0;\n    while (index &lt; len) {\n        int num = 0;\n        std::tie(num, index) = getint(index);\n        arr.push_back(num);\n        sum += num;\n    }\n    sort(arr.begin(), arr.end());\n    s.resize(arr.size());\n    s[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = arr.size() - 2; i &gt;= 0; i--)\n        s[i] = s[i + 1] + arr[i];\n    target = (sum + 1) / 2;\n    diff = target;\n    if (arr[arr.size() - 1] &gt;= target)\n        diff = target - (s[0] - arr[arr.size() - 1]);\n    else dfs(0, 0);\n\n    int x = target - diff, y = sum - (target - diff);\n    if (x &lt; y) x ^= y ^= x ^= y;\n    cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;\n\n}\n</code></pre> <ol> <li>\u5982\u679c\u6709\u4e00\u4e2a\u7279\u522b\u5927\u7684\uff08\u8d85\u8fc7\u4e00\u534a\uff09\uff0c\u90a3\u76f4\u63a5\u4e0d\u7528DFS\u4e86</li> <li>\u5982\u679c\u5df2\u7ecf\u5747\u5206\uff0c\u90a3\u76f4\u63a5return</li> <li>\u5982\u679c\u540e\u9762\u7684\u5168\u90fd\u53d6\u4ecd\u7136\u4e0d\u4f1a\u66f4\u4f18\uff0c\u526a</li> <li>\u5728\u5347\u5e8f\u6570\u7ec4\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u7684\u52a0\u8fdb\u53bb\u4f1a\u8d85\u51fa\u4e00\u534a\uff0c\u540e\u9762\u7684\u80af\u5b9a\u4e5f\u4f1a\u8d85\uff0c\u526a</li> </ol>"},{"location":"LeetCode/2386-kmaxsum/","title":"Leetcode 2386. \u627e\u51fa\u6570\u7ec4\u7684\u7b2c K \u5927\u548c","text":"<p>https://leetcode.cn/problems/find-the-k-sum-of-an-array/description/</p>"},{"location":"LeetCode/2386-kmaxsum/#code","title":"Code","text":"<p>O(k^3), TLE. </p> <pre><code>struct Item { \n    long long sum;\n    int maxind;\n    bool index[2000 + 3];    \n    Item() {\n        sum = 0; maxind = -1; \n        memset(index, 0, sizeof(index));\n    }\n    bool operator &lt; (const Item&amp; rhs) {\n        return sum &lt; rhs.sum;\n    }\n};\n\nclass SortedList {\npublic:\n    int size;\n    vector&lt;Item&gt; vec;\n    SortedList(int sz) : size(sz), vec() {\n        Item item;\n        vec.push_back(item);\n    }\n    void resort() {\n        Item item = vec[vec.size() - 1];\n        for (int i = vec.size() - 1; i &gt; 0; i--) {\n            if (item &lt; vec[i - 1])\n                vec[i] = vec[i - 1];\n            else {\n                vec[i] = item; break;\n            }\n        }\n    }\n    bool insert(Item&amp; item) {\n        if (vec.size() == size) {\n            if (item &lt; vec[size - 1])\n                vec[size - 1] = item;\n            else return false;\n        }\n        else vec.push_back(item);\n        resort();\n        return true;\n    }\n};\n\nclass Solution {\npublic:\n    long long kSum(vector&lt;int&gt;&amp; nums, int k) {\n        long long sum = 0;\n        vector&lt;int&gt; candidates;\n        for (auto val : nums) {\n            if (val &lt; 0)\n                candidates.push_back(-val);\n            else {\n                sum += val;\n                candidates.push_back(val);\n            }\n        }\n        sort(candidates.begin(), candidates.end());\n        if (candidates.size() &gt; k) candidates.resize(k);\n\n        SortedList list(k);\n\n        for (int i = 0; i &lt; k; i++) {\n            Item item = list.vec[i];\n            for (int j = list.vec[i].maxind + 1; j &lt; candidates.size(); j++) {\n                if (item.index[j]) continue;\n                item.index[j] = 1;\n                item.sum += candidates[j];\n                item.maxind = j;\n                bool result = list.insert(item);\n                item.sum -= candidates[j];\n                item.index[j] = 0;\n                item.maxind = list.vec[i].maxind;\n\n                if (!result)\n                    break;\n            }\n        }\n\n        return sum - list.vec[k - 1].sum;\n    }\n};\n</code></pre>"},{"location":"LeetCode/466-string/","title":"Leetcode 466","text":"<p>https://leetcode.cn/problems/count-the-repetitions/description/</p> <p>## \u66b4\u529b</p> <pre><code>class Solution {\npublic:\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n        int ptr = 0, nth = 0, len1 = s1.length();\n        int cnt = 0, nxt = 0, len2 = s2.length();\n        while (nth &lt; n1) {\n            char c1 = s1[ptr];\n            char c2 = s2[nxt];\n            if (c1 == c2) {\n                nxt++; cnt++;\n            }\n            nxt %= len2;\n            ptr++;\n            if (ptr &gt;= len1) {\n                nth++; ptr = 0;\n            }\n        }\n        int ans = floor((double)cnt / (len2 * n2));\n        return ans;\n    }\n};\n\n/*\ncnt: Already Metched Count\nnxt: Next Match Index\n*/\n</code></pre> <p>\u590d\u6742\u5ea6 O(\\Vert s_1\\Vert\\times n_1)\uff0cTLE</p>"},{"location":"LeetCode/466-string/#jump","title":"Jump","text":"<p>\u7c7b\u4f3c KMP \u4e2d\u7684 <code>next</code> \u6570\u7ec4\uff0c\u4ee4 <code>f[i]</code> \u8868\u793a\u4ece <code>s1[i]</code> \u4e3a\u9996\u7684 <code>s1</code> \u5faa\u73af\u4e32\uff0c\u7b2c\u4e00\u6b21\u6210\u529f\u5339\u914d <code>s2</code> \u65f6\uff0c\u6b64\u65f6\u5faa\u73af\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u4e4b\u540e\u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\uff0c\u4e0d\u65ad\u52a0 <code>f[ind]</code> \u5373\u53ef\u3002\u6ce8\u610f\u8fb9\u754c\u7684\u7ef4\u62a4\u3002</p> <p>\u5728\u8ba1\u7b97 <code>f</code> \u6570\u7ec4\u65f6\uff0c\u4e3a\u907f\u514d\u505a\u5f88\u591a\u65e0\u7528\u529f\uff0c\u53ef\u4ee5\u505a\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u82e5\u904d\u5386\u4e00\u904d <code>s1</code> \u540e\uff0c<code>nxt</code> \u4ecd\u672a\u88ab\u5339\u914d\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u7ec8\u6b62\u3002\u8fd9\u6837\u6700\u574f\u7528\u65f6\u53ef\u4ee5\u9650\u5236\u5728 <code>len2</code>\u3002</p> <p>\u56e0\u6b64\u8ba1\u7b97 <code>f</code> \u6570\u7ec4\u7684\u590d\u6742\u5ea6\u4e3a O(\\Vert s_1\\Vert \\times \\Vert s_2\\Vert)\u3002</p> <p>\u4e8b\u5b9e\u4e0a\u8fd9\u6216\u8bb8\u53ef\u4ee5\u88ab\u5361\u6389\uff0c\u56e0\u4e3a\u8df3\u7684\u6b21\u6570\u6700\u591a\u4e3a \\Vert s_1 \\Vert \\times n_1 / \\Vert s_2\\Vert\u3002</p> <pre><code>class Solution  {\n    int f[100];\n    int maxInd;\n    int len1, len2;\n    int calc(int i, const string&amp; s1, const string&amp; s2) {\n        int ind = i;\n        int nxt = 0;\n        int nomatch = 0;\n        while (ind &lt;= maxInd) {\n            if (s1[ind % len1] == s2[nxt]) {\n                nxt++; nomatch = 0;\n            }\n            else nomatch++;\n            ind++;\n            if (nxt == len2) break;\n            if (nomatch &gt; len1) {\n                ind = maxInd + 1; break;\n            }\n        }\n        return ind - i; \n    } // Next Match Index\npublic:\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n        len1 = s1.length(), len2 = s2.length();\n        maxInd = len1 * n1;\n        for (int i = 0; i &lt; len1; i++) {\n            f[i] = calc(i, s1, s2);\n        }\n        int ind = 0;\n        int cnt = 0;\n        while (ind &lt; maxInd) {\n            ind += f[ind % len1];\n            if (ind &lt;= maxInd) cnt++;\n        }\n        int ans = floor((double)cnt / n2);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode/466-string/#_1","title":"\u5faa\u73af\u8282","text":"<p>\u7531\u4e8e\u9898\u76ee\u4e2d\u7684 n1 \u548c n2 \u90fd\u5f88\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u771f\u6b63\u628a S1 = [s1, n1] \u548c S2 = [s2, n2] \u90fd\u663e\u5f0f\u5730\u8868\u793a\u51fa\u6765\u3002\u7531\u4e8e\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f\u4e0d\u65ad\u5faa\u73af\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u627e\u51fa S2 \u5728 S1 \u4e2d\u51fa\u73b0\u7684\u5faa\u73af\u8282\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u5faa\u73af\u8282\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5feb\u7b97\u51fa S2 \u5728 S1 \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u4e86\u3002</p> <p>\u6709\u4e9b\u8bfb\u8005\u53ef\u80fd\u5bf9\u5faa\u73af\u8282\u8fd9\u4e2a\u6982\u5ff5\u4f1a\u6709\u4e9b\u964c\u751f\uff0c\u8fd9\u4e2a\u6982\u5ff5\u6211\u4eec\u53ef\u4ee5\u7c7b\u6bd4\u65e0\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u5982\u679c\u4ece\u5c0f\u6570\u90e8\u5206\u7684\u67d0\u4e00\u4f4d\u8d77\u5411\u53f3\u8fdb\u884c\u5230\u67d0\u4e00\u4f4d\u6b62\u7684\u4e00\u8282\u6570\u5b57\u300c\u5faa\u73af\u300d\u51fa\u73b0\uff0c\u9996\u5c3e\u8854\u63a5\uff0c\u79f0\u8fd9\u79cd\u5c0f\u6570\u4e3a\u300c\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u300d\uff0c\u8fd9\u4e00\u8282\u6570\u5b57\u79f0\u4e3a\u300c\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u300d\u3002\u6bd4\u5982\u5bf9\u4e8e 3.56789789789... \u8fd9\u4e2a\u65e0\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u5b83\u7684\u5c0f\u6570\u90e8\u5206\u5c31\u662f\u4ee5 789 \u4e3a\u4e00\u4e2a\u300c\u5faa\u73af\u8282\u300d\u5728\u65e0\u9650\u5faa\u73af\uff0c\u4e14\u5f00\u5934\u53ef\u80fd\u4f1a\u6709\u90e8\u5206\u4e0d\u5faa\u73af\u7684\u90e8\u5206\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e2d\u5373\u4e3a 56\u3002</p> <p>\u90a3\u4e48\u56de\u5230\u8fd9\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0d\u65ad\u5faa\u73af\u7684 s2 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u7c7b\u6bd4\u4f5c\u4e0a\u9762\u5c0f\u6570\u90e8\u5206\uff0c\u53bb\u627e\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5b50\u4e32\uff0c\u5373\u300c\u5faa\u73af\u8282\u300d\uff0c\u6ee1\u8db3\u4e0d\u65ad\u5728 S2 \u4e2d\u5faa\u73af\uff0c\u4e14\u8fd9\u4e2a\u5faa\u73af\u8282\u80fd\u5bf9\u5e94\u56fa\u5b9a\u6570\u91cf\u7684 s1 \u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5728\u7b2c\u4e00\u6b21\u51fa\u73b0\u540e\uff0cS2 \u7684\u5b50\u4e32 bdadc \u6784\u6210\u4e00\u4e2a\u5faa\u73af\u8282\uff1a\u4e4b\u540e bdadc \u7684\u6bcf\u6b21\u51fa\u73b0\u90fd\u9700\u8981\u6709\u76f8\u5e94\u7684\u4e24\u6bb5 s1\u3002</p> <p>\u5f53\u6211\u4eec\u627e\u51fa\u5faa\u73af\u8282\u540e\uff0c\u6211\u4eec\u5373\u53ef\u77e5\u9053\u4e00\u4e2a\u5faa\u73af\u8282\u5185\u5305\u542b s1 \u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u5728\u5faa\u73af\u8282\u51fa\u73b0\u524d\u7684 s1 \u7684\u6570\u91cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 O(1)O(1)O(1) \u7684\u65f6\u95f4\u5185\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u8fd0\u7b97\u6c42\u51fa s2 \u5728 S1 \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e86\u3002\u5f53\u7136\uff0c\u7531\u4e8e S1 \u4e2d s1 \u7684\u6570\u91cf n1 \u662f\u6709\u9650\u7684\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5b58\u5728\u5faa\u73af\u8282\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u6ca1\u6709\u5b8c\u5168\u5339\u914d\uff0c\u5982\u4e0a\u56fe\u6700\u540e\u4f1a\u5355\u72ec\u5269\u4e00\u4e2a s1 \u51fa\u6765\u65e0\u6cd5\u5b8c\u5168\u5339\u914d\u5b8c\u5faa\u73af\u8282\uff0c\u8fd9\u90e8\u5206\u6211\u4eec\u9700\u8981\u5355\u72ec\u62ff\u51fa\u6765\u904d\u5386\u5904\u7406\u7edf\u8ba1\u3002</p> <p>\u6709\u4e9b\u8bfb\u8005\u53ef\u80fd\u4f1a\u6000\u7591\u5faa\u73af\u8282\u662f\u5426\u4e00\u5b9a\u5b58\u5728\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u6839\u636e\u9e3d\u7b3c\u539f\u7406\uff0c\u6211\u4eec\u6700\u591a\u53ea\u8981\u627e\u8fc7 |s2| + 1 \u4e2a s1\uff0c\u5c31\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5faa\u73af\u8282\u3002</p> <p>\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u54c8\u5e0c\u8868 recall \uff1a\u54c8\u5e0c\u8868 recall \u4ee5 s2 \u5b57\u7b26\u4e32\u7684\u4e0b\u6807 index \u4e3a\u7d22\u5f15\uff0c\u5b58\u50a8\u5339\u914d\u81f3\u7b2c s1cnt \u4e2a s1 \u7684\u672b\u5c3e\uff0c\u5f53\u524d\u5339\u914d\u5230\u7b2c s2cnt \u4e2a s2 \u4e2d\u7684\u7b2c index \u4e2a\u5b57\u7b26\u65f6\uff0c \u5df2\u7ecf\u5339\u914d\u8fc7\u7684s1 \u7684\u4e2a\u6570 s1cnt \u548c s2 \u7684\u4e2a\u6570 s2cnt \u3002</p> <p>\u6211\u4eec\u5728\u6bcf\u6b21\u904d\u5386\u81f3 s1 \u7684\u672b\u5c3e\u65f6\u6839\u636e\u5f53\u524d\u5339\u914d\u5230\u7684 s2 \u4e2d\u7684\u4f4d\u7f6e index \u67e5\u770b\u54c8\u5e0c\u8868\u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e index \u5df2\u7ecf\u5b58\u50a8\u5143\u7d20\uff0c\u5219\u8bf4\u660e\u6211\u4eec\u627e\u5230\u4e86\u5faa\u73af\u8282\u3002\u5faa\u73af\u8282\u7684\u957f\u5ea6\u53ef\u4ee5\u7528\u5f53\u524d\u5df2\u7ecf\u5339\u914d\u7684 s1 \u4e0e s2 \u7684\u6570\u91cf\u51cf\u53bb\u4e0a\u6b21\u51fa\u73b0\u65f6\u7ecf\u8fc7\u7684\u6570\u91cf\uff08\u5373\u54c8\u5e0c\u8868\u4e2d\u5b58\u50a8\u7684\u503c\uff09\u6765\u5f97\u5230\u3002</p> <p>\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u8fd0\u7b97\u6c42\u51fa\u6240\u6709\u6784\u6210\u5faa\u73af\u8282\u7684 s2 \u7684\u6570\u91cf\uff0c\u5bf9\u4e8e\u4e0d\u53c2\u4e0e\u5faa\u73af\u8282\u90e8\u5206\u7684 s1\uff0c\u76f4\u63a5\u904d\u5386\u8ba1\u7b97\u5373\u53ef\uff0c\u5177\u4f53\u5b9e\u73b0\u4ee5\u53ca\u4e00\u4e9b\u7ec6\u8282\u8fb9\u754c\u7684\u5904\u7406\u8bf7\u770b\u4e0b\u6587\u7684\u4ee3\u7801\u3002</p> <pre><code>class Solution {\npublic:\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n        if (n1 == 0) {\n            return 0;\n        }\n        int s1cnt = 0, index = 0, s2cnt = 0;\n        // recall \u662f\u6211\u4eec\u7528\u6765\u627e\u5faa\u73af\u8282\u7684\u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a\u54c8\u5e0c\u6620\u5c04\n        // \u6211\u4eec\u5982\u4f55\u627e\u5faa\u73af\u8282\uff1f\u5047\u8bbe\u6211\u4eec\u904d\u5386\u4e86 s1cnt \u4e2a s1\uff0c\u6b64\u65f6\u5339\u914d\u5230\u4e86\u7b2c s2cnt \u4e2a s2 \u4e2d\u7684\u7b2c index \u4e2a\u5b57\u7b26\n        // \u5982\u679c\u6211\u4eec\u4e4b\u524d\u904d\u5386\u4e86 s1cnt' \u4e2a s1 \u65f6\uff0c\u5339\u914d\u5230\u7684\u662f\u7b2c s2cnt' \u4e2a s2 \u4e2d\u540c\u6837\u7684\u7b2c index \u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5c31\u6709\u5faa\u73af\u8282\u4e86\n        // \u6211\u4eec\u7528 (s1cnt', s2cnt', index) \u548c (s1cnt, s2cnt, index) \u8868\u793a\u4e24\u6b21\u5305\u542b\u76f8\u540c index \u7684\u5339\u914d\u7ed3\u679c\n        // \u90a3\u4e48\u54c8\u5e0c\u6620\u5c04\u4e2d\u7684\u952e\u5c31\u662f index\uff0c\u503c\u5c31\u662f (s1cnt', s2cnt') \u8fd9\u4e2a\u4e8c\u5143\u7ec4\n        // \u5faa\u73af\u8282\u5c31\u662f\uff1b\n        //    - \u524d s1cnt' \u4e2a s1 \u5305\u542b\u4e86 s2cnt' \u4e2a s2\n        //    - \u4ee5\u540e\u7684\u6bcf (s1cnt - s1cnt') \u4e2a s1 \u5305\u542b\u4e86 (s2cnt - s2cnt') \u4e2a s2\n        // \u90a3\u4e48\u8fd8\u4f1a\u5269\u4e0b (n1 - s1cnt') % (s1cnt - s1cnt') \u4e2a s1, \u6211\u4eec\u5bf9\u8fd9\u4e9b\u4e0e s2 \u8fdb\u884c\u66b4\u529b\u5339\u914d\n        // \u6ce8\u610f s2 \u8981\u4ece\u7b2c index \u4e2a\u5b57\u7b26\u5f00\u59cb\u5339\u914d\n        unordered_map&lt;int, pair&lt;int, int&gt;&gt; recall;\n        pair&lt;int, int&gt; pre_loop, in_loop;\n        while (true) {\n            // \u6211\u4eec\u591a\u904d\u5386\u4e00\u4e2a s1\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u627e\u5230\u5faa\u73af\u8282\n            ++s1cnt;\n            for (char ch: s1) {\n                if (ch == s2[index]) {\n                    index += 1;\n                    if (index == s2.size()) {\n                        ++s2cnt;\n                        index = 0;\n                    }\n                }\n            }\n            // \u8fd8\u6ca1\u6709\u627e\u5230\u5faa\u73af\u8282\uff0c\u6240\u6709\u7684 s1 \u5c31\u7528\u5b8c\u4e86\n            if (s1cnt == n1) {\n                return s2cnt / n2;\n            }\n            // \u51fa\u73b0\u4e86\u4e4b\u524d\u7684 index\uff0c\u8868\u793a\u627e\u5230\u4e86\u5faa\u73af\u8282\n            if (recall.count(index)) {\n                auto [s1cnt_prime, s2cnt_prime] = recall[index];\n                // \u524d s1cnt' \u4e2a s1 \u5305\u542b\u4e86 s2cnt' \u4e2a s2\n                pre_loop = {s1cnt_prime, s2cnt_prime};\n                // \u4ee5\u540e\u7684\u6bcf (s1cnt - s1cnt') \u4e2a s1 \u5305\u542b\u4e86 (s2cnt - s2cnt') \u4e2a s2\n                in_loop = {s1cnt - s1cnt_prime, s2cnt - s2cnt_prime};\n                break;\n            } else {\n                recall[index] = {s1cnt, s2cnt};\n            }\n        }\n        // ans \u5b58\u50a8\u7684\u662f S1 \u5305\u542b\u7684 s2 \u7684\u6570\u91cf\uff0c\u8003\u8651\u7684\u4e4b\u524d\u7684 pre_loop \u548c in_loop\n        int ans = pre_loop.second + (n1 - pre_loop.first) / in_loop.first * in_loop.second;\n        // S1 \u7684\u672b\u5c3e\u8fd8\u5269\u4e0b\u4e00\u4e9b s1\uff0c\u6211\u4eec\u66b4\u529b\u8fdb\u884c\u5339\u914d\n        int rest = (n1 - pre_loop.first) % in_loop.first;\n        for (int i = 0; i &lt; rest; ++i) {\n            for (char ch: s1) {\n                if (ch == s2[index]) {\n                    ++index;\n                    if (index == s2.size()) {\n                        ++ans;\n                        index = 0;\n                    }\n                }\n            }\n        }\n        // S1 \u5305\u542b ans \u4e2a s2\uff0c\u90a3\u4e48\u5c31\u5305\u542b ans / n2 \u4e2a S2\n        return ans / n2;\n    }\n};\n</code></pre> <p>\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3 \u94fe\u63a5\uff1ahttps://leetcode.cn/problems/count-the-repetitions/solutions/208874/tong-ji-zhong-fu-ge-shu-by-leetcode-solution/</p>"},{"location":"LeetCode/Bit-DP/","title":"\u4f4d\u8fd0\u7b97\u53ca\u72b6\u538bDP","text":"<p>\u53c2\u8003\uff1ahttps://leetcode.cn/circle/discuss/CaOJ45/ </p>"},{"location":"LeetCode/Bit-DP/#_1","title":"\u4ece\u7a7a\u96c6\u679a\u4e3e\u5230\u5168\u96c6","text":"<p>O(2^n)</p> <pre><code>for (int s = 0; s &lt; (1 &lt;&lt; n); s++) {\n    // \u5904\u7406 s \u7684\u903b\u8f91\n}\n</code></pre>"},{"location":"LeetCode/Bit-DP/#s-sub","title":"\u679a\u4e3e\u67d0\u4e00\u96c6\u5408 <code>s</code> \u7684**\u975e\u7a7a**\u5b50\u96c6 <code>sub</code>","text":"<pre><code>for (int sub = s; sub; sub = (sub - 1) &amp; s) {\n    // \u5904\u7406 sub \u7684\u903b\u8f91\n}\n</code></pre> <p>\u66b4\u529b\u505a\u6cd5\u662f\u4ece <code>s</code> \u51fa\u53d1\uff0c\u4e0d\u65ad\u51cf 1\u3002\u4f46\u662f\u8fd9\u6837\u4f1a\u6709\u5f88\u591a\u975e\u5b50\u96c6\u60c5\u51b5\uff0c\u901a\u8fc7 <code>&amp;s</code> \u5373\u53ef\u53ea\u4fdd\u7559\u6709\u6548\u7684\u5b50\u96c6\u53d8\u5316\uff0c\u5c06\u65e0\u6548\u7684\u501f\u4f4d\u7ed9\u4e22\u6389\u3002</p> <p>\u6ce8\u610f\u8fd9\u662f\u679a\u4e3e\u7684\u975e\u7a7a\u5b50\u96c6\uff0c\u7a7a\u96c6\u4ecd\u9700\u5355\u72ec\u5904\u7406\uff0c\u6216\u6539\u4e3a <code>do-while</code>\u3002</p>"},{"location":"LeetCode/Bit-DP/#gospers-hack-k","title":"\u4f7f\u7528 Gosper's Hack\uff0c\u679a\u4e3e\u6070\u597d\u4e3a <code>k</code> \u4e2a\u5143\u7d20\u7684\u5168\u96c6\u5b50\u96c6","text":"<p>https://programmingforinsomniacs.blogspot.com/2018/03/gospers-hack-explained.html</p> <pre><code>int s = (1 &lt;&lt; k) - 1; // init value\nint limit = 1 &lt;&lt; n;\nwhile (s &lt; limit) {\n    // Do something with s\n\n    int c = s &amp; -s; // c is the last 1\n    int r = s + c; // r set the last seq of 1 into 0, and set the near left 0 into 1\n    s = (((r ^ s) / c) &gt;&gt; 2) | r; // get the changed bits, move to the right and remove 2 extra 1, then add back to r. \n}\n</code></pre> <ol> <li>\u6570\u7ec4\u7684\u6700\u5927\u4e0e\u548c\uff0c\u9898\u89e3</li> <li>\u6700\u5c0f\u7684\u5fc5\u8981\u56e2\u961f\uff0c\u9898\u89e3</li> <li>\u516c\u5e73\u5206\u53d1\u997c\u5e72\uff0c\u9898\u89e3</li> <li>\u5e76\u884c\u8bfe\u7a0b II\uff0c\u9898\u89e3 LCP 53. \u5b88\u62a4\u592a\u7a7a\u57ce\uff0c\u9898\u89e3</li> <li>\u4e24\u4e2a\u6570\u7ec4\u6700\u5c0f\u7684\u5f02\u6216\u503c\u4e4b\u548c</li> <li>\u5b8c\u6210\u4efb\u52a1\u7684\u6700\u5c11\u5de5\u4f5c\u65f6\u95f4\u6bb5</li> </ol> <p>\u4f5c\u8005\uff1a\u7075\u8336\u5c71\u827e\u5e9c \u94fe\u63a5\uff1ahttps://leetcode.cn/circle/discuss/CaOJ45/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002</p>"},{"location":"LeetCode/NP-Hard/","title":"NP-Hard","text":"<p>\u5e38\u89c1\u7684 NP-Hard \u95ee\u9898\u6c47\u603b\u3002</p> <p>\u5728 <code>P != NP</code> \u524d\u63d0\u4e0b\uff0cNP-Hard \u95ee\u9898\u4e00\u5b9a\u4e0d\u662f P \u95ee\u9898\uff0c\u5373\u4e00\u5b9a\u4e0d\u662f\u591a\u9879\u5f0f\u53ef\u89e3\u7684\u3002\u9047\u5230\u540e\u8981\u9996\u5148\u5c1d\u8bd5\u641c\u7d22\u7684\u65b9\u6848\uff0c\u5e76\u5c1d\u8bd5\u526a\u679d/\u72b6\u538b\u7b49\u65b9\u5f0f\u51cf\u5c0f\u5e38\u6570\u3002</p>"},{"location":"LeetCode/NP-Hard/#max-cut","title":"Max-Cut","text":"<p>\u6700\u5927\u5272\uff0cNP-Complete</p> <p>Defined in a Graph. One wants a subset <code>S</code> of the vertex set s.t. the number of edges between <code>S</code> and the complementary subset is as large as possible.</p>"},{"location":"LeetCode/NP-Hard/#partition-problem","title":"Partition Problem","text":"<p>Weak NP-completeness: polynomial in the dimension of the problem and the magnitudes of the data involved. </p> <p>Partition the multiset S into two subsets S1, S2 such that the difference between the sum of elements in S1 and the sum of elements in S2 is minimized.</p> <p>https://www.ijcai.org/Proceedings/09/Papers/096.pdf</p>"},{"location":"LeetCode/NP-Hard/#knapsack-problem","title":"Knapsack Problem","text":"<p>Weak NP-completeness: polynomial in the dimension of the problem and the magnitudes of the data involved. </p> <p>\u6c47\u603b</p> <p>https://www.csie.ntu.edu.tw/~lyuu/complexity/2015/20151117.pdf</p>"},{"location":"LeetCode/Problem-1/","title":"Problem 1 - Two Sum - \u4e24\u6570\u4e4b\u548c","text":"<p>2022.01.16</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c <code>target</code> \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <pre><code>\u8f93\u5165\uff1anums = [2,7,11,15], target = 9\n\u8f93\u51fa\uff1a[0,1]\n\u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002\n</code></pre>"},{"location":"LeetCode/Problem-1/#on2on2","title":"O(n^2)","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        for (vector&lt;int&gt;::iterator it = nums.begin(); it != nums.end(); it++) {\n            for (vector&lt;int&gt;::iterator jt = nums.begin(); jt != nums.end(); jt++) {\n                if ((*it) + (*jt) == target &amp;&amp; it != jt) {\n                    vector&lt;int&gt; vec;\n                    vec.push_back(it - nums.begin());\n                    vec.push_back(jt - nums.begin());\n                    return vec;\n                }\n            }\n        }\n        return vector&lt;int&gt;{};\n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-1/#onlog-nonlog-n-sort-lower-bound","title":"O(n\\log n) - Sort &amp; Lower Bound","text":"<pre><code>struct Unit {\n    int value;\n    int index;\n};\nclass Solution {\npublic:\n    static bool cmp(Unit a, Unit b) {\n        return a.value &lt; b.value;\n    }\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;Unit&gt; vec;\n        for (auto it = nums.begin(); it != nums.end(); it++) {\n            Unit u = {*it, static_cast&lt;int&gt;(it - nums.begin())};\n            vec.push_back(u);\n        }\n        sort(vec.begin(), vec.end(), cmp);\n        for (auto it = vec.begin(); it != vec.end(); it++) {\n            auto bt = lower_bound(it + 1, vec.end(), (Unit){target - (*it).value, -1}, cmp);\n            if (bt != vec.end() &amp;&amp; (*it).value + (*bt).value == target) {\n                return {(*it).index, (*bt).index};\n            }\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-1/#onon-hash-map","title":"O(n) - Hash Map","text":"<pre><code>const int M = 19997;\nclass Solution {\npublic:\n    // value, index\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;pair&lt;int, int&gt; &gt; hashmap(M);\n        for (int i = 0; i &lt; M; i++) hashmap[i] = make_pair(1e9 + 1, -1);\n        for (auto it = nums.begin(); it != nums.end(); it++) {\n            int value = *it;\n            int value_mod = ((value % M) + M) % M;\n            int find = target - value;\n            int find_mod = ((find % M) + M) % M;\n            for (int i = find_mod; hashmap[i].first != 1e9 + 1; i++) {\n                if (i == M) i = 0;\n                if (hashmap[i].first + value == target) {\n                    return {hashmap[i].second, static_cast&lt;int&gt;(it - nums.begin())};\n                }\n            } \n            int pos = value_mod;\n            while (hashmap[pos].first != 1e9 + 1) {\n                pos++;\n                if (pos == M) pos = 0;\n            }\n            hashmap[pos] = make_pair(value, it - nums.begin());\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-10/","title":"Problem 10 - Regular Expression Matching - \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d","text":"<p>2022.01.19</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b <code>p</code>\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 <code>'.'</code> \u548c <code>'*'</code> \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002</p> <ul> <li><code>'.'</code> \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26</li> <li><code>'*'</code> \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20</li> </ul> <p>\u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 <code>s</code> \u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002</p> <pre><code>\u8f93\u5165\uff1as = \"aab\" p = \"c*a*b\"\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u56e0\u4e3a '*' \u8868\u793a\u96f6\u4e2a\u6216\u591a\u4e2a\uff0c\u8fd9\u91cc 'c' \u4e3a 0 \u4e2a, 'a' \u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002\n</code></pre>"},{"location":"LeetCode/Problem-10/#_1","title":"\u52a8\u6001\u89c4\u5212","text":"<p>\u72b6\u6001\uff1a</p> <p><code>f[i][j]</code> \u8868\u793a <code>s</code> \u7684\u524d <code>i</code> \u4e2a \u5b57\u7b26\u4e0e <code>p</code> \u7684\u524d <code>j</code> \u4e2a\u5b57\u7b26\u80fd\u5426\u5339\u914d\u3002</p> <p>\u72b6\u6001\u8f6c\u79fb\uff1a</p> <p>\u8003\u8651 <code>p[j]</code> \u662f\u5426\u7b49\u4e8e\u8fd9\u4e2a\u80fd\u5339\u914d\u4efb\u610f\u591a\u5b57\u7b26\u7684 <code>*</code>\u3002</p> <p>\u82e5 <code>p[j] != '*'</code>\uff0c\u5219\u53ea\u80fd\u5728 <code>s</code> \u4e2d\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\u3002\u90a3\u4e48\uff0c\u5f53 <code>match(s[i], p[j]) == true</code> \u65f6\uff0c<code>f[i][j]</code> \u53ef\u4ee5\u7531 <code>f[i - 1][j - 1]</code> \u8f6c\u79fb\u8fc7\u6765\uff1b\u82e5\u4e0d\u6210\u7acb\uff0c\u5219\u6ca1\u6709\u8fd9\u6761\u8f6c\u79fb\u5173\u7cfb\u3002</p> <p>\u82e5 <code>p[j] == '*'</code>\uff0c\u5219\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ol> <li>\u5f53 <code>s[i]</code> \u53ef\u4ee5\u548c <code>p[i - 1]</code> <code>p[i]</code> \u8fd9\u4e2a\u6574\u4f53\u5339\u914d\u65f6\uff0c\u5339\u914d <code>s[i]</code>\uff0c\u8fd9\u65f6 <code>f[i][j]</code> \u53ef\u4ee5\u7531 <code>f[i - 1][j]</code> \u8f6c\u79fb\uff1b</li> <li>\u4e0d\u5339\u914d <code>s[i]</code>\uff0c\u8fd9\u65f6\u76f8\u5f53\u4e8e\u76f4\u63a5\u628a <code>p[j - 1]</code> \u548c <code>p[j]</code> \u4e22\u6389\uff0c<code>f[i][j]</code> \u53ef\u4ee5\u7531 <code>f[i][j - 2]</code> \u8f6c\u79fb\u3002</li> </ol> <p>\u521d\u59cb\u503c\uff1a</p> <p><code>f[0][0] = true</code>\uff0c\u540c\u65f6\u8981\u8bb0\u5f97\u521d\u59cb <code>f[0][j]</code>\u3002</p> <pre><code>class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        s = \" \" + s;\n        p = \" \" + p;\n        static bool f[21][31];\n        memset(f, 0, sizeof(f));\n        f[0][0] = 1;\n        for (int j = 1; j &lt; p.length(); j++) {\n            if (p[j] == '*') \n                f[0][j] |= f[0][j - 2];\n        }\n        for (int i = 1; i &lt; s.length(); i++) {\n            for (int j = 1; j &lt; p.length(); j++) {\n                if (p[j] != '*' ) {\n                    if (s[i] == p[j] || p[j] == '.')\n                        f[i][j] |= f[i - 1][j - 1];\n                }\n                else {\n                    if (s[i] == p[j - 1] || p[j - 1] == '.') {\n                        f[i][j] |= f[i - 1][j];\n                        f[i][j] |= f[i][j - 2];\n                    }\n                    else f[i][j] |= f[i][j - 2];\n                }\n                // cout &lt;&lt; \"f[\" &lt;&lt; i &lt;&lt; \"][\" &lt;&lt; j &lt;&lt; \"] = \" &lt;&lt; f[i][j] &lt;&lt; endl;\n            }\n        }\n        return f[s.length() - 1][p.length() - 1];\n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-10/#dfs","title":"DFS","text":"<p>\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u679a\u4e3e <code>*</code> \u53ef\u4ee5\u5339\u914d\u591a\u5c11\u4e2a\u5b57\u7b26\u5373\u53ef\u3002</p>"},{"location":"LeetCode/Problem-11%2616/","title":"Problem 11 - Container With Most Water - \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<p>2022.01.20</p> <p>\u7ed9\u4f60 n \u4e2a\u975e\u8d1f\u6574\u6570 a_1, a_2, \\cdots, a_n\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, a_i)\u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, a_i) \u548c (i, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 </p> <p></p> <pre><code>\u8f93\u5165\uff1a[1,8,6,2,5,4,8,3,7]\n\u8f93\u51fa\uff1a49 \n\u89e3\u91ca\uff1a\u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a\u00a049\u3002\n</code></pre>"},{"location":"LeetCode/Problem-11%2616/#onlog-nonlog-n-","title":"O(n\\log n) - \u5355\u8c03\u6808 &amp; \u4e8c\u5206","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        vector&lt;pair&lt;int, int&gt; &gt; stk; // height, -index\n        int ans = 0;\n        for (int i = 0; i &lt; height.size(); i++) {\n            pair&lt;int, int&gt; pa = make_pair(height[i], -i);\n            auto p = lower_bound(stk.begin(), stk.end(), pa);\n            if (p == stk.end()) stk.push_back(pa);\n            else ans = max(ans, height[i] * (i + (*p).second));\n            for (auto it = stk.begin(); it != p &amp;&amp; it != stk.end(); it++) {\n                ans = max(ans, (*it).first * (i + (*it).second));\n            }\n        }\n        return ans; \n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-11%2616/#onon-","title":"O(n) - \u5de6\u632a\u53f3\u632a","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int ans = 0;\n        for (int i = 0, k = height.size() - 1; i &lt; k;) {\n            ans = max(ans, min(height[i], height[k])*(k-i));\n            if (height[i] &gt; height[k]) k--;\n            else i++;\n        }\n        return ans;   \n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-11%2616/#problem-16-3sum-closest-","title":"Problem 16 - 3Sum-Closest - \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c","text":"<p>2022.01.21</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c \u4e00\u4e2a\u76ee\u6807\u503c <code>target</code>\u3002\u8bf7\u4f60\u4ece <code>nums</code> \u4e2d\u9009\u51fa\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5b83\u4eec\u7684\u548c\u4e0e <code>target</code> \u6700\u63a5\u8fd1\u3002</p> <p>\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002</p> <p>\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u6070\u597d\u4e00\u4e2a\u89e3\u3002</p> <pre><code>\u8f93\u5165\uff1anums = [-1,2,1,-4], target = 1\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u4e0e target \u6700\u63a5\u8fd1\u7684\u548c\u662f 2 (-1 + 2 + 1 = 2) \u3002\n</code></pre> <p>## O(n^2\\log n) - \u679a\u4e3e2\u4e2a &amp; \u4e8c\u5206</p> <p>\u4f7f\u7528 <code>upper_bound - 1</code> \u627e\u5230\u5c0f\u4e8e\u7b49\u4e8e <code>target - nums[i] - nums[j]</code> \u7684\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u4f7f\u7528 <code>lower_bound</code> \u627e\u5230\u5927\u4e8e\u7b49\u4e8e <code>target - nums[i] - nums[j]</code> \u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u3002</p> <pre><code>class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        sort(nums.begin(), nums.end());\n        int minu = 100000;\n        int sum = 0; \n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (i &amp;&amp; nums[i] == nums[i - 1]) \n                continue;\n            for (int j = i + 2; j &lt; nums.size(); j++) {\n                if (j + 1 != nums.size() &amp;&amp; nums[j] == nums[j + 1])\n                    continue;\n                int p = upper_bound(nums.begin() + i + 1, nums.begin() + j, target - nums[i] - nums[j]) - nums.begin() - 1;\n                int q = lower_bound(nums.begin() + i + 1, nums.begin() + j, target - nums[i] - nums[j]) - nums.begin();\n                if (p &gt;= i + 1 &amp;&amp; p &lt; j) {\n                    if (abs(target - nums[i] - nums[p] - nums[j]) &lt; minu) {\n                        minu = abs(target - nums[i] - nums[p] - nums[j]);\n                        sum = nums[i] + nums[p] + nums[j];\n                    }\n                }\n                if (q &gt;= i + 1 &amp;&amp; q &lt; j) {\n                    if (abs(target - nums[i] - nums[q] - nums[j]) &lt; minu) {\n                        minu = abs(target - nums[i] - nums[q] - nums[j]);\n                        sum = nums[i] + nums[q] + nums[j];\n                    }\n                }\n            }\n        }\n        return sum;\n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-11%2616/#on2on2-","title":"O(n^2) - \u4e24\u4fa7\u6ed1\u7a97","text":"<pre><code>class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        sort(nums.begin(), nums.end());\n        int res = 10000, left = 0, right = 0, temp = 0;\n        for (int i = 0; i &lt; nums.size() - 2; i++) {\n            left = i + 1;\n            right = nums.size() - 1;\n            while (left &lt; right) {\n                temp = nums[i] + nums[left] + nums[right];\n                if (temp == target)\n                    return target;\n                res = abs(temp - target) &lt; abs(res - target) ? temp : res;\n                if (temp - target &gt; 0)\n                    right--;\n                else\n                    left++;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode/Problem-2013/","title":"Problem 2013 - Detect Squares - \u68c0\u6d4b\u6b63\u65b9\u5f62","text":"<p>2022.01.26</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5728 X-Y \u5e73\u9762\u4e0a\u7684\u70b9\u6784\u6210\u7684\u6570\u636e\u6d41\u3002\u8bbe\u8ba1\u4e00\u4e2a\u6ee1\u8db3\u4e0b\u8ff0\u8981\u6c42\u7684\u7b97\u6cd5\uff1a</p> <p>\u6dfb\u52a0 \u4e00\u4e2a\u5728\u6570\u636e\u6d41\u4e2d\u7684\u65b0\u70b9\u5230\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u53ef\u4ee5\u6dfb\u52a0 \u91cd\u590d \u7684\u70b9\uff0c\u5e76\u4f1a\u89c6\u4f5c\u4e0d\u540c\u7684\u70b9\u8fdb\u884c\u5904\u7406\u3002 \u7ed9\u4f60\u4e00\u4e2a\u67e5\u8be2\u70b9\uff0c\u8bf7\u4f60\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u9009\u51fa\u4e09\u4e2a\u70b9\uff0c\u4f7f\u8fd9\u4e09\u4e2a\u70b9\u548c\u67e5\u8be2\u70b9\u4e00\u540c\u6784\u6210\u4e00\u4e2a \u9762\u79ef\u4e3a\u6b63 \u7684 \u8f74\u5bf9\u9f50\u6b63\u65b9\u5f62 \uff0c\u7edf\u8ba1 \u6ee1\u8db3\u8be5\u8981\u6c42\u7684\u65b9\u6848\u6570\u76ee\u3002 \u8f74\u5bf9\u9f50\u6b63\u65b9\u5f62 \u662f\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u9664\u56db\u6761\u8fb9\u957f\u5ea6\u76f8\u540c\u5916\uff0c\u8fd8\u6ee1\u8db3\u6bcf\u6761\u8fb9\u90fd\u4e0e x-\u8f74 \u6216 y-\u8f74 \u5e73\u884c\u6216\u5782\u76f4\u3002</p> <p>\u5b9e\u73b0 <code>DetectSquares</code> \u7c7b\uff1a</p> <p><code>DetectSquares()</code> \u4f7f\u7528\u7a7a\u6570\u636e\u7ed3\u6784\u521d\u59cb\u5316\u5bf9\u8c61 <code>void add(int[] point)</code> \u5411\u6570\u636e\u7ed3\u6784\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u70b9 <code>point = [x, y]</code> <code>int count(int[] point)</code> \u7edf\u8ba1\u6309\u4e0a\u8ff0\u65b9\u5f0f\u4e0e\u70b9 <code>point = [x, y]</code> \u5171\u540c\u6784\u9020 \u8f74\u5bf9\u9f50\u6b63\u65b9\u5f62 \u7684\u65b9\u6848\u6570\u3002</p> <pre><code>\u8f93\u5165\uff1a\n[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]\n\u8f93\u51fa\uff1a\n[null, null, null, null, 1, 0, null, 2]\n\n\u89e3\u91ca\uff1a\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // \u8fd4\u56de 1 \u3002\u4f60\u53ef\u4ee5\u9009\u62e9\uff1a\n                               //   - \u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\uff0c\u548c\u7b2c\u4e09\u4e2a\u70b9\ndetectSquares.count([14, 8]);  // \u8fd4\u56de 0 \u3002\u67e5\u8be2\u70b9\u65e0\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u8fd9\u4e9b\u70b9\u6784\u6210\u6b63\u65b9\u5f62\u3002\ndetectSquares.add([11, 2]);    // \u5141\u8bb8\u6dfb\u52a0\u91cd\u590d\u7684\u70b9\u3002\ndetectSquares.count([11, 10]); // \u8fd4\u56de 2 \u3002\u4f60\u53ef\u4ee5\u9009\u62e9\uff1a\n                               //   - \u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\uff0c\u548c\u7b2c\u4e09\u4e2a\u70b9\n                               //   - \u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e09\u4e2a\uff0c\u548c\u7b2c\u56db\u4e2a\u70b9\n</code></pre> <p></p>"},{"location":"LeetCode/Problem-2013/#code-hash-map","title":"Code - Hash Map","text":"<p>\u4e0d\u8981\u603b\u60f3\u7740\u6811/\u4e8c\u5206\uff0c\u90a3\u4e9b\u5e26 Log \u7684\u53c8\u662f\u5e76\u4e0d\u597d\u5199\u5e76\u4e0d\u5feb</p> <pre><code>class DetectSquares {\npublic:\n    static const int M = 5009;\n\n    struct Node {\n        int x;\n        int y;\n        int cnt;\n    } hashmap[M];\n\n    int nodeCnt;\n\n    DetectSquares() {\n        for (int i = 0; i &lt; M; i++) {\n            hashmap[i] = (Node){-1, -1, 0};\n        }\n    }\n\n    Node find(int x, int y) {\n        if (y &lt; 0 || y &gt;= M) return (Node){-1, -1, 0};\n        int posi = y;\n        while (hashmap[posi].cnt) {\n            if (x == hashmap[posi].x &amp;&amp; y == hashmap[posi].y) \n                return hashmap[posi];\n            posi++;\n            if (posi == M) posi = 0;\n        }\n        return (Node){-1, -1, 0};\n    }\n\n    void add(vector&lt;int&gt; point) {\n        int x = point[0], y = point[1], posi = y;\n        while (hashmap[posi].cnt) {\n            if (hashmap[posi].x == x &amp;&amp; hashmap[posi].y == y) {\n                hashmap[posi].cnt++;\n                return;\n            }\n            posi++;\n            if (posi == M) posi = 0;\n        }\n        hashmap[posi] = (Node){x, y, 1};\n    }\n\n    int count(vector&lt;int&gt; point) {\n        int x = point[0], y = point[1], posi = y;\n        int ret = 0;\n        while (hashmap[posi].cnt) {\n            if (hashmap[posi].y == y) {\n                int sep = abs(x - hashmap[posi].x);\n                if (sep &gt; 0) {\n                    int findY = y + sep;\n                    Node p1 = find(x, findY);\n                    Node p2 = find(hashmap[posi].x, findY);\n                    ret += hashmap[posi].cnt * p1.cnt * p2.cnt;\n\n                    findY = y - sep;\n                    p1 = find(x, findY);\n                    p2 = find(hashmap[posi].x, findY);\n                    ret += hashmap[posi].cnt * p1.cnt * p2.cnt;\n                }\n            }\n            posi++;\n            if (posi == M) posi = 0;\n        }\n        return ret;\n    }\n};\n\n/**\n * Your DetectSquares object will be instantiated and called as such:\n * DetectSquares* obj = new DetectSquares();\n * obj-&gt;add(point);\n * int param_2 = obj-&gt;count(point);\n */\n</code></pre>"},{"location":"LeetCode/Problem-7/","title":"Problem 7 - Reverse Integer - \u6574\u6570\u53cd\u8f6c","text":"<p>2022.01.17</p> <p>\u7ed9\u4f60\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570 x \uff0c\u8fd4\u56de\u5c06 x \u4e2d\u7684\u6570\u5b57\u90e8\u5206\u53cd\u8f6c\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u8d85\u8fc7 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4 [\u22122^{31},  2^{31} \u2212 1] \uff0c\u5c31\u8fd4\u56de 0\u3002</p> <p>\u5047\u8bbe\u73af\u5883\u4e0d\u5141\u8bb8\u5b58\u50a8 64 \u4f4d\u6574\u6570\uff08\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\uff09\u3002</p> <pre><code>\u8f93\u5165\uff1ax = 123\n\u8f93\u51fa\uff1a321\n</code></pre>"},{"location":"LeetCode/Problem-7/#code","title":"Code","text":"<p>\u8bb8\u8bb8\u591a\u591a\u5c0f\u5751\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    int reverse(int x) {\n        if (x == 0x80000000) return 0;\n        int ret = 0;\n        bool positive = x &gt;= 0 ? true : false;\n        x = abs(x);\n        while (x) {\n            if (ret &gt; 0x7fffffff / 10) return 0;\n            ret *= 10;\n            ret += x % 10;\n            x /= 10;\n        }\n        if (!positive &amp;&amp; ret == 0x80000000) return ret;\n        if (ret &lt; 0) return 0;\n        return positive ? ret : -ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode/Tips/","title":"Tips","text":""},{"location":"LeetCode/Tips/#vector","title":"vector","text":""},{"location":"LeetCode/Tips/#vector_1","title":"\u5168\u5c40 <code>vector</code>","text":"<p>\u5982\u679c\u60f3\u8981 <code>int a[N]</code>\uff0c\u4f46\u662f\u4e0d\u80fd\u786e\u5b9a <code>N</code> \u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5982\u4e0b\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; vec;\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vec = vector&lt;int&gt; (n);\n        dfs(0, n, nums);\n        return ans;\n    }\n}\n</code></pre>"},{"location":"LeetCode/Tips/#vector_2","title":"\u4e24\u7ef4\u5b9a\u957f <code>vector</code>","text":"<pre><code>vector&lt;vector&lt;int&gt; &gt; vec(m, vector&lt;int&gt;(n));\n</code></pre> <p>\u5143\u7d20\u7c7b\u578b\u4e3a <code>vector&lt;int&gt;</code> \u7684 <code>vector</code> \u5bb9\u5668\uff0c\u521d\u59cb\u5316\u4e3a\u5305\u542b <code>m</code> \u4e2a <code>vector&lt;int&gt;</code> \u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2a\u65b0\u521b\u7acb\u7684 <code>vector&lt;int&gt;</code> \u5bf9\u8c61\u7684\u62f7\u8d1d\uff0c\u800c\u8fd9\u4e2a\u65b0\u521b\u7acb\u7684 <code>vector&lt;int&gt;</code> \u5bf9\u8c61\u88ab\u521d\u59cb\u5316\u4e3a\u5305\u542b <code>n</code> \u4e2a 0\u3002</p>"},{"location":"LeetCode/Tips/#_1","title":"\u8bfb\u5165\u6574\u884c\u5b57\u7b26\u4e32","text":"<pre><code>std::istringstream stream(\"line1\\nline2\\nline3\"); // or cin\nwhile (std::getline(stream, line)) {\n    std::cout &lt;&lt; line &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"Statistics/LSE-MLE/","title":"LSE & MLE","text":""},{"location":"Statistics/LSE-MLE/#lse-mle","title":"\u5bf9\u4e8e\u666e\u901a\u7ebf\u6027\u6a21\u578b\uff0cLSE \u548c MLE \u662f\u4e00\u81f4\u7684","text":"\\boldsymbol{Y} = \\boldsymbol{X}\\boldsymbol{\\beta}+\\boldsymbol{e}, \\boldsymbol{e}\\sim N (\\boldsymbol{0}, \\sigma^2\\boldsymbol{I}_n)  <p>\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\uff08LSE\uff09\u4e2d\uff0c\u8981\u6c42 $$ \\min_\\boldsymbol{\\beta} Q(\\boldsymbol{\\beta}) = \\min_\\boldsymbol{\\beta}(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta})'(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta}) $$ \u800c\u82e5\u4f7f\u7528 MLE\uff0c\u5982\u4e0b\u3002</p> <p>\u56de\u987e MLE \u5b9a\u4e49</p> <p>\u5b9a\u4e49 \u8bbe\u603b\u4f53\u5206\u5e03\u65cf\u4e3a  \\mathcal{F}=\\left\\{p(x ; \\theta) ; \\theta=\\left(\\theta_{1}, \\cdots, \\theta_{k}\\right) \\in \\Theta\\right\\}  \u662f\u4e00\u4e2a\u53c2\u6570\u5206\u5e03\u65cf,  p(x ; \\theta)  \u4e3a\u5bc6\u5ea6\u51fd\u6570  (probability density function)  \u6216\u5206\u5e03\u5217  (probability mass function) . \\widetilde{x}=\\left(x_{1}, \\cdots, x_{n}\\right)  \u662f\u7531  \\mathcal{F}  \u4e2d\u7684\u4e00\u4e2a\u603b\u4f53  p(x ; \\theta)  \u4ea7\u751f\u7684\u7b80\u5355\u968f\u673a\u6837\u672c  \\tilde{X}=\\left(X_{1}, \\cdots, X_{n}\\right)  \u7684\u89c2\u6d4b\u503c. \u8fd9\u65f6\u4f3c\u7136\u51fd\u6570\u4e3a $$ L(\\theta ; \\widetilde{x})=\\prod_{i=1}^{n} p\\left(x_{i} ; \\theta\\right), \\quad \\theta \\in \\Theta . $$ \u5047\u5982\u5b58\u5728\u7edf\u8ba1\u91cf  \\widehat{\\theta}(\\tilde{X})=\\widehat{\\theta}\\left(X_{1}, \\cdots, X_{n}\\right) , \u4f7f\u5f97 $$ L(\\widehat{\\theta}(\\widetilde{x}) ; \\widetilde{x})=\\sup _{\\theta \\in \\Theta} L(\\theta ; \\widetilde{x}) . $$ \u6216\u7b49\u4ef7\u4f7f\u5f97 $$ l(\\widehat{\\theta}(\\widetilde{x}) ;(\\widetilde{x}))=\\sup _{\\theta \\in \\Theta} l(\\theta ; \\widetilde{x}) . $$ \u5219\u79f0  \\widehat{\\theta}(\\widetilde{X})  \u4e3a  \\theta  \u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u91cf(Maximum likelihood estimator). \u7b80\u8bb0\u4e3a MLE.</p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u7ebf\u6027\u6a21\u578b\u8bad\u7ec3\u96c6\u4e2d\u89e3\u91ca\u53d8\u91cf\u89c6\u4e3a\u5df2\u77e5\uff0c\u628a\u6548\u5e94\u53d8\u91cf\u89c6\u4e3a Y\\sim N(\\boldsymbol{X}\\boldsymbol{\\beta}, \\sigma^2\\boldsymbol{I}_n) \u603b\u4f53\u4e2d\u7684\u62bd\u6837\uff0c\u5219\u53ef\u4ee5\u6709\u5bc6\u5ea6\u51fd\u6570\uff08\u4f3c\u7136\u51fd\u6570\uff09\uff1a $$ \\begin{aligned} L(\\boldsymbol{\\beta}; \\tilde{\\boldsymbol{y}}) &amp;= \\frac{1}{(\\sqrt{2\\pi}\\sigma)<sup>n}\\exp\\left(-\\frac{1}{2\\sigma</sup>2}(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta})'(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta})\\right) \\end{aligned} $$ \u5bf9\u6570\u4f3c\u7136\u51fd\u6570\uff1a $$ \\begin{aligned} l(\\boldsymbol{\\beta}; \\tilde{\\boldsymbol{y}}) &amp;= -n\\ln{(\\sqrt{2\\pi}\\sigma)}-\\frac{1}{2\\sigma^2}(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta})'(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta}) \\end{aligned} $$ \u8981\u60f3\u4f7f\u5f97 \\sup_{\\boldsymbol{\\beta}}l(\\boldsymbol{\\beta}; \\tilde{\\boldsymbol{y}})\uff0c\u5373 \\inf_\\boldsymbol{\\beta}(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta})'(\\boldsymbol{Y} - \\boldsymbol{X}\\boldsymbol{\\beta})\uff0c\u4e0e LSE \u4e00\u81f4\u3002</p>"},{"location":"Statistics/Quadratic%20Form/","title":"Quadratic Form","text":""},{"location":"Statistics/Quadratic%20Form/#_1","title":"\u4e8c\u6b21\u578b","text":"<p>\u5047\u8bbe $ \\boldsymbol{X}=\\left(X_{1}, \\cdots, X_{n}\\right)^{\\prime} $ \u4e3a$  n \\times 1 $ \u968f\u673a\u5411\u91cf, $ \\boldsymbol{A}=\\left(a_{i j}\\right)$  \u4e3a $ n \\times n $ \u5bf9\u79f0\u77e9\u9635, \u5219\u79f0\u968f\u673a\u53d8\u91cf $$ \\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}=\\sum_{i=1}^{n} \\sum_{j=1}^{n} a_{i j} X_{i} X_{j} $$ \u4e3a $ \\boldsymbol{X}  $ \u7684\u4e8c\u6b21\u578b, \u79f0 $ \\boldsymbol{A} $ \u4e3a\u6b64\u4e8c\u6b21\u578b\u7684\u4e8c\u6b21\u578b\u77e9\u9635.</p>"},{"location":"Statistics/Quadratic%20Form/#_2","title":"\u671f\u671b","text":"<p>\u5b9a\u74061\uff1a\u8bbe \\mathrm{E}(\\boldsymbol{X})=\\boldsymbol{\\mu}, \\operatorname{Cov}(\\boldsymbol{X})=\\boldsymbol{\\Sigma}\uff0c\u5219 $$ \\mathrm{E}\\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)=\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}+\\operatorname{tr}(\\boldsymbol{A} \\boldsymbol{\\Sigma}) $$</p> <p>\u8bc1\u660e\uff1a\u56e0\u4e3a $$ \\begin{aligned} \\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}=&amp;(\\boldsymbol{X}-\\boldsymbol{\\mu}+\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu}+\\boldsymbol{\\mu}) \\ =&amp;(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})+\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu}) \\ &amp;+(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}+\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu} . \\end{aligned} $$ \u4e0a\u5f0f\u7b2c\u4e8c\u9879\u4e0e\u7b2c\u4e09\u9879\u7684\u6570\u5b66\u671f\u671b\u4e3a\u96f6. \u56e0\u6b64\uff0c\u53ea\u9700\u8bc1\u660e $$ \\mathrm{E}\\left[(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})\\right]=\\operatorname{tr}(\\boldsymbol{A} \\boldsymbol{\\Sigma}) $$ \u5229\u7528\u8ff9\u7684\u6027\u8d28 \\operatorname{tr}(\\boldsymbol{A B})=\\operatorname{tr}(\\boldsymbol{B} \\boldsymbol{A})  \u4ee5\u53ca\u6c42\u8ff9\u548c\u6c42\u671f\u671b\u53ef\u4ea4\u6362\u6b21\u5e8f , \u53ef\u77e5 $$ \\begin{aligned} \\mathrm{E}\\left[(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})\\right] &amp;=\\mathrm{E}\\left[\\operatorname{tr}\\left((\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})\\right)\\right] \\ &amp;=\\mathrm{E}\\left{\\operatorname{tr}\\left[\\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime}\\right]\\right} \\ &amp;=\\operatorname{tr}\\left{\\boldsymbol{A E}\\left[(\\boldsymbol{X}-\\boldsymbol{\\mu})(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime}\\right]\\right} \\ &amp;=\\operatorname{tr}(\\boldsymbol{A} \\boldsymbol{\\Sigma}) \\end{aligned} $$</p>"},{"location":"Statistics/Quadratic%20Form/#_3","title":"\u65b9\u5dee","text":"<p>\u5b9a\u74062\uff1a\u8bbe\u968f\u673a\u53d8\u91cf  X_{i}, i=1, \\cdots, n  \u76f8\u4e92\u72ec\u7acb, \u4e14  \\mathrm{E}\\left(X_{i}\\right)=\\mu_{i} . \u5047\u8bbe  X_{i}-\\mu_{i}, i=1, \\cdots, n  \u662f\u540c\u5206\u5e03\u7684\u4e14 $$ \\operatorname{Var}\\left(X_{i}\\right)=\\sigma^{2}, m_{r}=E\\left(X_{i}-\\mu_{i}\\right)^{r}, r=3,4 $$ $ \\boldsymbol{A}=\\left(a_{i j}\\right)$  \u4e3a  n \\times n  \u5bf9\u79f0\u77e9\u9635. \u8bb0 $$ \\boldsymbol{X}=\\left(X_{1}, \\cdots, X_{n}\\right)^{\\prime}, \\quad \\boldsymbol{\\mu}=\\left(\\mu_{1}, \\cdots, \\mu_{n}\\right)^{\\prime} $$</p> <p>\u5219 $$ \\operatorname{Var}\\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)=\\left(m_{4}-3 \\sigma^{4}\\right) \\boldsymbol{a}^{\\prime} \\boldsymbol{a}+2 \\sigma^{4} \\operatorname{tr}\\left(\\boldsymbol{A}^{2}\\right)+4 \\sigma^{2} \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}^{2} \\boldsymbol{\\mu}+4 m_{3} \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{a}  $$</p> <p>\u5176\u4e2d  \\boldsymbol{a}=\\left(a_{11}, \\cdots, a_{n n}\\right)^{\\prime}  \uff0c\u5373  \\boldsymbol{A}  \u7684\u5bf9\u89d2\u5143\u7ec4\u6210\u7684\u5217\u5411\u91cf\u3002</p> <p>\u8bc1\u660e\uff1a\u9996\u5148\u6ce8\u610f\u5230 $$ \\operatorname{Var}\\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)=\\mathrm{E}\\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)<sup>{2}-\\left[\\mathrm{E}\\left(\\boldsymbol{X}</sup>{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)\\right]^{2}, $$</p> <p>\u7531\u5b9a\u74061\u4ee5\u53ca \\mathrm{E}(\\boldsymbol{X})=\\boldsymbol{\\mu} \u548c \\operatorname{Cov}(\\boldsymbol{X})=\\sigma^{2} \\boldsymbol{I}_{n}  \u53ef\u63a8\u5f97</p>  \\mathrm{E}\\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)=\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}+\\sigma^{2} \\operatorname{tr}(\\boldsymbol{A})  <p>\u6240\u4ee5\u6211\u4eec\u7684\u95ee\u9898\u4e3b\u8981\u662f\u8ba1\u7b97\u7b2c\u4e00\u9879\uff08\u5e73\u65b9\u7684\u671f\u671b\uff09. \u5c06  \\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}  \u6539\u5199\u4e3a</p>  \\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}=(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})+2 \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})+\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}  <p>\u5c06\u5176\u5e73\u65b9\u5f97\u5230</p>  \\begin{aligned} \\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)^{2}=&amp; {\\left[(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})\\right]^{2}+4\\left[\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})\\right]^{2}+\\left(\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}\\right)^{2} } \\\\ &amp;+2 \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}\\left[(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})+2 \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})\\right] \\\\ &amp;+4 \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu})(\\boldsymbol{X}-\\boldsymbol{\\mu})^{\\prime} \\boldsymbol{A}(\\boldsymbol{X}-\\boldsymbol{\\mu}) . \\end{aligned}  <p>\u4ee4 $ \\boldsymbol{Z}=\\boldsymbol{X}-\\boldsymbol{\\mu}$ , \u5219  \\mathrm{E}(\\boldsymbol{Z})=\\mathbf{0} . \u518d\u6b21\u5229\u7528\u5b9a\u74061\u5f97 $$ \\begin{aligned} \\mathrm{E}\\left(\\boldsymbol{X}^{\\prime} \\boldsymbol{A} \\boldsymbol{X}\\right)<sup>{2}=\\mathrm{E}\\left(\\boldsymbol{Z}</sup>{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)^{2}+4 \\mathrm{E}\\left(\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)<sup>{2}+\\left(\\boldsymbol{\\mu}</sup>{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}\\right)^{2} \\ +2 \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu}\\left(\\sigma^{2} \\operatorname{tr}(\\boldsymbol{A})\\right)+4 \\mathrm{E}\\left(\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z} \\boldsymbol{Z}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)  \\end{aligned} $$ \u4e0b\u9762\u9010\u4e2a\u8ba1\u7b97\u4e0a\u5f0f\u6240\u542b\u7684\u6bcf\u4e2a\u5747\u503c. \u7531 $$ \\left(\\boldsymbol{Z}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)^{2}=\\sum_{i} \\sum_{j} \\sum_{k} \\sum_{l} a_{i j} a_{k l} Z_{i} Z_{j} Z_{k} Z_{l} $$ \u53ca $ Z_{i} $ \u7684\u72ec\u7acb\u6027\u53ef\u5f97 $$ \\mathrm{E}\\left(Z_{i} Z_{j} Z_{k} Z_{l}\\right)=\\left{\\begin{array}{ll} m_{4}, &amp; \\text { \u82e5 } i=j=k=l, \\ \\sigma^{4}, &amp; \\text { \u82e5 } i=j \\neq k=l ; i=k \\neq j=l ; i=l \\neq j=k, \\ 0, &amp; \\text { \u5176\u5b83, } \\end{array}\\right. $$ \u4fbf\u6709\u4e0b\u5217\u7ed3\u679c: $$ \\mathrm{E}\\left(\\boldsymbol{Z}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)^{2} = m_{4}\\left(\\sum_{i = 1}^{n} a_{i i}<sup>{2}\\right)+\\sigma</sup>{4}\\left(\\sum_{i \\neq k} a_{i i} a_{k k}+\\sum_{i \\neq j} a_{i j}^{2}+\\sum_{i \\neq j} a_{i j} a_{j i}\\right) \\ = m_{4} \\boldsymbol{a}^{\\prime} \\boldsymbol{a}+\\sigma<sup>{4}\\left{[\\operatorname{tr}(\\boldsymbol{A})]</sup>{2}-\\boldsymbol{a}^{\\prime} \\boldsymbol{a}+2\\left[\\operatorname{tr}\\left(\\boldsymbol{A}<sup>{2}\\right)-\\boldsymbol{a}</sup>{\\prime} \\boldsymbol{a}\\right]\\right} \\ = \\left(m_{4}-3 \\sigma^{4}\\right) \\boldsymbol{a}^{\\prime} \\boldsymbol{a}+\\sigma<sup>{4}\\left{[\\operatorname{tr}(\\boldsymbol{A})]</sup>{2}+2 \\operatorname{tr}\\left(\\boldsymbol{A}^{2}\\right)\\right}, \\quad(2.2 .5) \\ $$ \u800c $$ \\begin{aligned} \\mathrm{E}\\left(\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)^{2} = \\mathrm{E}\\left(\\boldsymbol{Z}^{\\prime} \\boldsymbol{A} \\boldsymbol{\\mu} \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right) \\ = \\sigma^{2} \\cdot \\operatorname{tr}\\left(\\boldsymbol{A} \\boldsymbol{\\mu} \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}\\right) \\ = \\sigma^{2} \\cdot \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A}^{2} \\boldsymbol{\\mu} . \\end{aligned} $$ \u6700\u540e, \u82e5\u8bb0  b=A \\mu , \u5219 $$ \\mathrm{E}\\left(\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z} \\boldsymbol{Z}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)=\\sum_{i} \\sum_{j} \\sum_{k} b_{i} a_{j k} \\mathrm{E}\\left(Z_{i} Z_{j} Z_{k}\\right) $$ \u56e0\u4e3a $$ \\mathrm{E}\\left(Z_{i} Z_{j} Z_{k}\\right)=\\left{\\begin{array}{ll} m_{3}, &amp; \\text { \u82e5 } i=j=k, \\ 0, &amp; \\text { \u5176\u5b83, } \\end{array}\\right. $$ \u6240\u4ee5 $$ \\mathrm{E}\\left(\\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z} \\boldsymbol{Z}^{\\prime} \\boldsymbol{A} \\boldsymbol{Z}\\right)=m_{3} \\sum_{i} b_{i} a_{i i}=m_{3} \\boldsymbol{b}^{\\prime} \\boldsymbol{a}=m_{3} \\boldsymbol{\\mu}^{\\prime} \\boldsymbol{A} \\boldsymbol{a} $$ \u4ee3\u56de\uff0c\u4fbf\u53ef\u5f97\u5230\u9700\u8981\u8bc1\u660e\u7684\u7ed3\u679c.</p> <p>\u6574\u7406\u81ea\u738b\u677e\u6842\u8001\u5e08\u300a\u7ebf\u6027\u6a21\u578b\u5f15\u8bba\u300b\u548c\u5e9e\u5929\u6653\u8001\u5e08\u8bfe\u4ef6\uff0c\u4f7f\u7528 https://www.latexlive.com/home \u8fdb\u884c Latex OCR\u3002</p>"},{"location":"Statistics/Sample%20Variance/","title":"Sample Variance","text":""},{"location":"Statistics/Sample%20Variance/#_1","title":"\u6837\u672c\u65b9\u5dee","text":"<p>\u5047\u8bbe X_1, X_2, \\cdots, X_n \u662f i.i.d. \u7684\u3002</p> <p>\u7531\u65e0\u504f\u6027\uff0c\u5b9a\u4e49\u6837\u672c\u65b9\u5dee\u4e3a $$ S^2 = \\frac{1}{n-1} \\sum_{i=1}^n (X_i - \\overline{X})^2 $$ Lemma. \u4e0a\u8ff0\u5b9a\u4e49\u4e0e\u4e0b\u5f0f\u7b49\u4ef7 $$ S^2 = \\frac{1}{n(n-1)}\\sum {i\\neq j} \\frac{1}{2}(X_i - X_j)^2 $$ \u8bc1\u660e.  $$ \\begin{aligned} \\sum _{i\\neq j} \\frac{1}{2}(X_i - X_j)^2 &amp;= \\sum _{i,j} \\frac{1}{2}(X_i - X_j)^2 - \\sum _{i=j} \\frac{1}{2}(X_i - X_j)^2\\ &amp;= \\sum{i,j}\\frac{1}{2}(X_i - X_j)^2\\ &amp;= \\frac{n}{2}\\sum_{i=1}<sup>nX_i</sup>2 + \\frac{n}{2}\\sum_{j=1}<sup>nX_j</sup>2 - \\sum_{i=1}<sup>n\\sum_{j=1}</sup>nX_iX_j\\ &amp;= n\\sum_{i=1}<sup>nX_i</sup>2 - (\\sum_{i=1}<sup>nX_i)</sup>2 \\end{aligned} $$</p>"},{"location":"Statistics/Sample%20Variance/#_2","title":"\u6837\u672c\u65b9\u5dee\u7684\u65b9\u5dee","text":"<p>\u4e0b\u9762\u8ba8\u8bba\u6837\u672c\u65b9\u5dee\u7684\u65b9\u5dee\u8ba1\u7b97\u3002</p> <p>\u7531\u4e8e  \\mathbb{E}\\left[\\dfrac{1}{2}\\left(X_{i}-X_{j}\\right)^{2}\\right]=\\mathbb{E}\\left[\\dfrac{1}{2}\\left\\{\\left(X_{i}-\\mu\\right)-\\left(X_{j}-\\mu\\right)\\right\\}^{2}\\right]=\\sigma^{2} , \u4ece\u800c\u6709 $$ \\operatorname{Var}\\left(S<sup>{2}\\right)=\\frac{1}{n</sup>{2}(n-1)^{2}} \\sum_{i \\neq j}\\sum_{k \\neq l} \\mathbb{E}\\left[\\left[\\frac{1}{2}\\left(X_{i}-X_{j}\\right)<sup>{2}-\\sigma</sup>{2}\\right]\\left[\\frac{1}{2}\\left(X_{k}-X_{l}\\right)<sup>{2}-\\sigma</sup>{2}\\right]\\right] $$ \u8bb0  A_{i j}=\\left(X_{i}-X_{j}\\right)^{2} / 2-\\sigma^{2}, A_{k l}=\\left(X_{k}-X_{l}\\right)^{2} / 2-\\sigma^{2}  \u3002\u9700\u8003\u8651 ${i, j} $ \u548c  ${k, l} $ \u76f8\u4ea4\u7684 \u60c5\u51b5\u3002 - \u60c5\u5f621.  \\{i, j\\}  \u548c  \\{k, l\\}  \u65e0\u4ea4\u96c6, \u53ef\u77e5\u6b64\u65f6 $ \\mathbb{E}\\left(A_{i j} A_{k l}\\right)=0  $\u3002 - \u60c5\u5f622.  |\\{i, j\\} \\cap\\{k, l\\}|=1 , \u5373\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\u3002\u5171\u8ba1\u6709  4 n(n-1)(n-2)  \u8fd9\u6837 \u7684\u9879\u3002\u73b0\u8ba1\u7b97 $$ B\\xlongequal{\\triangle}\\mathbb{E}\\left[\\left{\\frac{1}{2}\\left(X_{1}-X_{2}\\right)<sup>{2}-\\sigma</sup>{2}\\right}\\left{\\frac{1}{2}\\left(X_{1}-X_{3}\\right)<sup>{2}-\\sigma</sup>{2}\\right}\\right] $$ \u5bf9\u6b64\u53ef\u9996\u5148\u8ba1\u7b97  \\mathbb{E}\\left[\\dfrac{1}{2}\\left(X_{1}-X_{2}\\right)^{2}-\\sigma^{2} \\mid X_{1}\\right]  \u3002\u5bb9\u6613\u5f97\u51fa $$ \\mathbb{E}\\left[\\frac{1}{2}\\left(x-X_{2}\\right)<sup>{2}-\\sigma</sup>{2}\\right]=\\frac{1}{2}\\left[(x-\\mu)<sup>{2}-\\sigma</sup>{2}\\right] $$ \u56e0\u800c $$ B=\\frac{1}{4} \\mathbb{E}\\left[\\left{(X-\\mu)<sup>{2}-\\sigma</sup>{2}\\right}<sup>{2}\\right]=\\frac{1}{4}\\left(\\mu_{4}-\\sigma</sup>{4}\\right) . $$ \u8fd9\u91cc $ \\mu_{4}=\\mathbb{E}(X-\\mu)^{4} $. - \u60c5\u5f623. $ |{i, j} \\cap{k, l}|=2 $, \u5373\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u76f8\u540c\u3002\u5171\u8ba1\u6709  $2 n(n-1) $ \u8fd9\u6837\u7684\u9879\u3002 \u73b0\u8ba1\u7b97 $$ C\\xlongequal{\\triangle} \\mathbb{E}\\left[\\left(\\frac{1}{2}\\left(X_{1}-X_{2}\\right)<sup>{2}-\\sigma</sup>{2}\\right)^{2}\\right] $$ \u53ef\u6c42\u5f97 $$ C=\\frac{1}{4} \\mathbb{E}\\left[\\left(X_{1}-\\mu\\right)-\\left(X_{2}-\\mu\\right)\\right]<sup>{4}-\\sigma</sup>{4}=\\frac{1}{2}\\left(\\mu_{4}+\\sigma^{4}\\right) . $$ \u5c06\u4e0a\u8ff0\u7ed3\u679c\u6574\u7406\u4e4b\u540e\u53ef\u5f97 $$ \\begin{aligned} \\operatorname{Var}\\left(S<sup>{2}\\right)&amp;=\\frac{1}{n</sup>{2}(n-1)^{2}}\\left[4 n(n-1)(n-2) \\frac{1}{4}\\left(\\mu_{4}-\\sigma^{4}\\right)+2 n(n-1) \\frac{1}{2}\\left(\\mu_{4}+\\sigma^{4}\\right)\\right] \\ &amp;=\\frac{\\mu_{4}}{n}-\\frac{n-3}{n(n-1)} \\sigma^{4}\\ &amp;=\\frac{\\mu_{4}-\\sigma^{4}}{n}+\\frac{2 \\sigma^{4}}{n(n-1)} . \\end{aligned} $$</p> <p>\u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u6b21\u578b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"Statistics/Sample%20Variance/#_3","title":"\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u7684\u534f\u65b9\u5dee","text":"<p>\u5373\u8ba1\u7b97 $ \\operatorname{Cov}\\left(\\bar{X}, S^{2}\\right) $ \u3002 $$ \\begin{array}{l} \\operatorname{Cov}\\left(\\bar{X}, S^{2}\\right)=\\operatorname{Cov}\\left(\\frac{1}{n} \\sum_{i=1}^{n} X_{i}, \\frac{1}{2 n(n-1)} \\sum_{j \\neq l}\\left(X_{j}-X_{l}\\right)^{2}\\right) \\ =\\frac{1}{2 n^{2}(n-1)} \\sum_{i=1}^{n} \\sum_{j \\neq l} \\operatorname{Cov}\\left(X_{i},\\left(X_{j}-X_{l}\\right)^{2}\\right) . \\end{array} $$ \u4e0b\u9762\u5bf9 $ D_{i j l}\\xlongequal{\\triangle}\\operatorname{Cov}\\left(X_{i},\\left(X_{j}-X_{l}\\right)^{2}\\right)$  \u8fdb\u884c\u8ba8\u8bba\u3002\u82e5 $ i \\neq j \\neq l$ , \u5219  $D_{i j l}=0 $ \u3002\u82e5 $ i=j \\neq l$  \u6216\u8005 $ i=l \\neq j$ , \u5219\u6709 $$ \\begin{array}{l} D_{i j l}=\\operatorname{Cov}\\left(X_{j},\\left(X_{j}-X_{l}\\right)^{2}\\right) \\ =\\mathbb{E}\\left[\\left(X_{j}-\\mu\\right)\\left{\\left(X_{j}-\\mu\\right)-\\left(X_{l}-\\mu\\right)\\right}^{2}\\right] \\ =\\mathbb{E}\\left[\\left(X_{j}-\\mu\\right)^{3}\\right] \\end{array} $$ \u4ece\u800c\u53ef\u5f97 $$ \\operatorname{Cov}\\left(\\bar{X}, S^{2}\\right)=\\frac{1}{2 n^{2}(n-1)} 2 n(n-1) \\mathbb{E}\\left[\\left(X_{j}-\\mu\\right)<sup>{3}\\right]=\\frac{\\mathbb{E}\\left[\\left(X_{j}-\\mu\\right)</sup>{3}\\right]}{n} . $$ \u5bf9\u4e8e\u6b63\u6001\u5206\u5e03\u800c\u8a00, \u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u662f\u72ec\u7acb\u7684\u3002\u800c\u4ece\u4e0a\u8ff0\u7ed3\u679c\u53ef\u77e5\u5bf9\u4e8e\u4e00\u822c\u7684\u5206\u5e03\u53ea\u8981\u504f\u5ea6\u4e3a 0 , \u5219\u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee\u5c31\u662f\u4e0d\u76f8\u5173\u7684\u3002</p> <p>\u53c2\u8003\uff1ahttps://mp.weixin.qq.com/s/PGgsX9Nh8-1ePBfmgO9h2g</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/","title":"\u7edf\u8ba1\u5b66\u4e60","text":"<p>\u53ef\u7ea6\u8bef\u5dee\u548c\u4e0d\u53ef\u7ea6\u8bef\u5dee</p> <p>\u89e3\u51b3 Variance\uff1a\u66f4\u591a\u7684\u6570\u636e\u3001\u6b63\u5219\u5316\uff08regularization\uff09 \u6b63\u5219\u5316\u4e3b\u8981\u662f\u4f7f\u62df\u5408\u7684model\u66f4\u52a0\u5e73\u6ed1\uff0c\u7528\u6765\u51cf\u5c11\u8f93\u5165\u6570\u636e\u7684\u5f71\u54cd\u3002\u5728\u635f\u5931\u51fd\u6570\u4e2d\u52a0\u5165\u6b63\u5219\u5316\u9879</p> <p>\u89e3\u51b3 Bias\uff1a\u53ef\u4ee5\u589e\u52a0\u66f4\u591a\u7684feature\u4f5c\u4e3a\u8f93\u5165\uff0c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684model</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-3","title":"Ch 3 \u56de\u5f52\u5206\u6790","text":"<ol> <li>\u4e3a\u4ec0\u4e48\u5355\u72ec\u68c0\u9a8c\u65f6\uff0c\u5bf9\u67d0\u4e2a\u7cfb\u6570\u7684\u68c0\u9a8c\u662f\u663e\u8457\u4e0d\u4e3a0\u7684\uff1b\u4f46\u662f\u628a\u6574\u4f53\u5efa\u7acb\u591a\u5143\u56de\u5f52\u65b9\u7a0b\u4e4b\u540e\uff0c\u5f97\u5230\u7684\u7cfb\u6570\u5bf9\u5176\u68c0\u9a8c\uff0c\u5c31\u4e0d\u80fd\u62d2\u7edd\u5b83\u4e3a0\u7684\u5047\u8bbe\u4e86\uff1f\u6216\u8005\uff0c\u4e3a\u4ec0\u4e48\u5355\u72ec\u68c0\u9a8c\u65f6\uff0c\u5f97\u5230\u7684\u662f\u6b63\u76f8\u5173\u5173\u7cfb\uff1b\u4f46\u662f\u591a\u5143\u68c0\u9a8c\u4e4b\u540e\u5f97\u5230\u7684\u5c31\u662f\u8d1f\u76f8\u5173\u4e86\uff1f</li> </ol> <p>\u56e0\u4e3a\u591a\u5143\u56de\u5f52\u4e2d\u7684\u7cfb\u6570\uff0c\u662f\u5047\u5b9a\u5176\u4ed6\u56e0\u7d20\u56fa\u5b9a\u65f6\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5bf9\u56e0\u53d8\u91cf\u7684\u5f71\u54cd\uff1b\u5982\u679c\u4e00\u5143\u56de\u5f52\uff0c\u90a3\u6ca1\u6709\u56fa\u5b9a\u5176\u4ed6\u53d8\u91cf\u7684\u5f71\u54cd\uff0c\u4f1a\u6ca1\u529e\u6cd5\u63ed\u793a\u81ea\u53d8\u91cf\u4e4b\u95f4\u7684\u5185\u5728\u8054\u7cfb\uff0c\u9020\u6210\u5bf9\u7cfb\u6570\u7684\u5224\u65ad\u5931\u8bef\u3002</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-4","title":"Ch 4 \u5206\u7c7b","text":""},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#_2","title":"\u5e38\u7528\u5206\u7c7b\u65b9\u6cd5","text":"<ul> <li>Logistic Regression</li> <li>Linear Discriminant Analysis \u7ebf\u6027\u5224\u522b\u5206\u6790</li> <li>Quadratic Discriminant Analysis \u5e73\u65b9\u5224\u522b\u5206\u6790</li> <li>Na\u00efve Bayes</li> <li>K-Nearest Neighbors</li> <li>Poisson Regression</li> <li>Generalized Additive Models (in Chapter 7)</li> <li>Random Forests (in Chapter 8)</li> <li>Boosting (in Chapter 8)</li> <li>Support Vector Machine (in Chapter 9)</li> </ul>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#quantitative","title":"\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 Quantitative \u7684\u7ebf\u6027\u56de\u5f52\uff1f","text":"<p>\u56de\u5f52\u95ee\u9898\u4e2d\uff0cY \u662f Quantitative \u7684\uff0c\u5b9a\u91cf\u7684\uff1b\u5206\u7c7b\u95ee\u9898\u4e2d\uff0cY \u662f Qualitative \u7684\uff0c\u5b9a\u6027\u7684\u3002</p> <p>\u5047\u8bbe\u662f\u591a\u5206\u7c7b\u95ee\u9898\uff0c\u90a3\u5982\u679c\u7ed9\u5b9a\u4e86\u4e00\u4e2a Qualitative \u5173\u7cfb\uff0c\u5c31\u786e\u5b9a\u4e86\u5404\u4e2a\u5206\u7c7b\u4ed6\u4eec\u4e4b\u95f4\u7684\u987a\u5e8f\uff0c\u540c\u65f6\u4e5f\u786e\u5b9a\u4e86\u4ed6\u4eec\u4e4b\u95f4\u7684\u95f4\u9694\uff08\u5f71\u54cd\u6743\u91cd\uff09\u662f\u76f8\u7b49\u7684\uff1b\u4f46\u662f\u5b9e\u9645\u4e2d\uff0c\u8fd9\u79cd\u987a\u5e8f\u6216\u8005\u8fd9\u79cd\u6743\u91cd\u662f\u65e0\u6765\u7531\u7684\uff0c\u4e5f\u662f\u65e0\u610f\u4e49\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u628a\u4ed6\u5f53\u4f5c Quantitative \u53d8\u91cf\u3002</p> <p>\u5373\u4f7f\u662f\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u4e5f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4f7f\u7528\u7ebf\u6027\u56de\u5f52\u53ef\u80fd\u6ca1\u529e\u6cd5\u5bf9\u6240\u6709 x \u90fd\u5f97\u5230\u6709\u610f\u4e49\u7684 \\widehat{P(Y|X=x)}\uff0c\u53ef\u80fd\u51fa\u73b0\u9884\u6d4b\u503c\u8d85\u51fa\u5206\u7c7b\u8303\u56f4\u7684\u60c5\u51b5\u3002</p> <p></p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#logistic-regression","title":"Logistic Regression","text":""},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#binomial-logistic-regression","title":"Binomial Logistic Regression","text":"<p>\u5904\u7406\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u60f3\u8981\u4ece X \u786e\u5b9a\u5206\u7c7b Y\uff0c\u5982\u679c\u4f7f\u7528\u4f20\u7edf\u7684\u7ebf\u6027\u56de\u5f52 Y = \\beta_0 + \\beta_1 X \u4f1a\u9762\u4e34\u4e24\u4e2a\u95ee\u9898\uff1a</p> <ol> <li>\u56e0\u53d8\u91cf Y \u672c\u8eab\u53ea\u80fd\u53d6 0,1 \u4e24\u4e2a\u503c\uff0c\u4f46\u662f\u4e0a\u9762\u7684\u7ebf\u6027\u56de\u5f52\u7b97\u51fa\u7684 Y \u662f\u8fde\u7eed\u7684\u3002</li> </ol> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f30\u8ba1\u51fa\u4e00\u4e2a\u5408\u7406\u7684 \\widehat{P(Y=1|X=x)} \u7684\u65b9\u5f0f\uff0c\u4f30\u8ba1\u51fa\u5b83\u4e4b\u540e\u5176\u5b9e\u5c31\u53ef\u4ee5\u786e\u5b9a Y\uff0c\u5b83\u53ef\u4ee5\u89c6\u4f5c x \u7684\u51fd\u6570\uff0c\u4e0b\u6587\u4e2d\u8bb0\u4f5c p(x)\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u6839\u636e p(x) \u6765\u5224\u5b9a\u5206\u5230\u54ea\u4e00\u7c7b\uff0c\u8fd9\u4e2a\u5224\u5b9a\u7684\u6807\u51c6\u4e0d\u4e00\u5b9a\u662f p(x)&gt;0.5\uff0c\u53ef\u80fd\u662f\u5176\u4ed6\u4efb\u610f\u7684\u3002</p> <p>\u90a3\u4e48\uff0c\u5982\u679c\u662f\u7ebf\u6027\u56de\u5f52\uff0c\u6211\u4eec\u628a\u6a21\u578b\u4f18\u5316\u4e3a $$ p(X) = \\beta_0 + \\beta_1X $$ \u4f46\u662f\u8fd9\u6837\u4f1a\u51fa\u73b0\u7b2c\u4e8c\u4e2a\u95ee\u9898</p> <ol> <li>\u7ebf\u6027\u56de\u5f52\u4e2d\uff0cp(X) \u7684\u53d6\u503c\u8303\u56f4\u5e76\u975e [0,1]\u3002</li> </ol> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6539\u53d8\u56de\u5f52\u5f62\u5f0f\uff0c\u4e0d\u59a8\u8bbe\u7f6e\u56de\u5f52\u65b9\u7a0b\u4e3a \\mathbb{R}\\to (0,1) \u7684\u975e\u7ebf\u6027\u7684 Logistic \u51fd\u6570/ Sigmoid \u51fd\u6570 $$ logistic(x) = \\frac{1}{1 + e^{-x}} = \\frac{e^x}{1 + e^x} $$ \u5219\u6a21\u578b\u8bbe\u4e3a $$ p(X) = \\frac{e^{\\beta_0 + \\beta_1 X}}{1 + e^{\\beta_0 + \\beta_1 X}} $$ \u4e4b\u540e\uff0c\u518d\u53bb\u4f30\u8ba1\u8fd9\u91cc\u7684 \\beta_0, \\beta_1\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u7684\u65b9\u6cd5\u6765\u5f97\u5230\u8fd9\u91cc\u7684 \\hat\\beta_0, \\hat\\beta_1\uff1a $$ e^{-(\\beta_0 + \\beta_1 X)} = \\frac{1}{p(x)} - 1 = \\frac{1-p(x)}{p(x)}\\ \\mathrm{logit}(p(x))\\xlongequal{\\triangle}\\ln(\\frac{p(x)}{1-p(x)}) = \\beta_0 + \\beta_1 X $$ \u6211\u4eec\u628a\u5de6\u8fb9\u7684\u51fd\u6570\u79f0\u4e3a log odds \u6216 logit\uff0c\u5b83\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5b83\u662f Logistic \u51fd\u6570\u7684\u53cd\u51fd\u6570\u3002</p> <p>\u6240\u4ee5\uff0c\u5f53 \\beta_1&gt;0 \u65f6\uff0cX \u7684\u589e\u5927\u4f1a\u5bfc\u81f4 \\beta_0 + \\beta_1X \u589e\u5927\uff0c\u8fdb\u800c\u610f\u5473\u7740 p(x) \u65f6\u5728\u589e\u5927\u7684\uff1b\u53cd\u4e4b\uff0c\u8d1f\u76f8\u5173\u3002</p> <p>\u800c\u5b9e\u8d28\u4e0a\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684 \\mathbb{R}\\to [0,1] \u7684\u51fd\u6570\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6784\u9020\u51fa\u8fd9\u6837\u7684\u56de\u5f52\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u8bbe\u6807\u51c6\u6b63\u6001\u5206\u5e03\u7684\u5206\u5e03\u51fd\u6570\u4e3a \\Phi(x)\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d6 p(X) = \\Phi(\\beta_0 + \\beta_1 X)\uff0c\u8fd9\u88ab\u79f0\u4e3a Probit \u56de\u5f52\u6a21\u578b\uff08\u53c8\u79f0\u591a\u5143\u6982\u7387\u6bd4\u56de\u5f52\u6a21\u578b\uff09\uff1b\u5982\u679c\u53d6\u53cc\u5bf9\u6570\u53d8\u6362 f(x) = \\log(-\\log(1-x)) \u53d6\u4ee3 logic \u51fd\u6570\uff0c\u5219\u6709 \\log(-\\log(1-p(X))) = \\beta_0 + \\beta_1 X\uff0cp(X) = 1 - e^{-\\exp(\\beta_0 + \\beta_1 X)}\u3002</p> <p>\u800c\u5bf9\u4e8e\u53c2\u6570\u7684\u4f30\u8ba1\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e24\u79cd\u65b9\u5f0f\uff1aLSE, MLE\u3002\u4e0b\u9762\u5047\u8bbe\u5404\u4e2a x_i \u4e4b\u95f4\u90fd\u662f\u72ec\u7acb\u7684\u3002</p> <p>\u5982\u679c\u4f7f\u7528**\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1**\uff0c\u8f83\u4e3a\u5b9e\u7528\u7684\u60c5\u5f62\u4e3a\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 p(x) \u548c x \u7684\u6570\u636e\u3002\u8fd9\u5c24\u5176\u9002\u7528\u4e8e\u53ef\u4ee5\u5bf9\u540c\u4e00\u7ec4 x \u8fdb\u884c\u591a\u6b21\u89c2\u6d4b\uff0c\u8fdb\u800c\u4f7f\u7528\u9891\u7387\u4f30\u8ba1\u81ea\u53d8\u91cf\u4e3a x_i \u65f6\u5206\u7c7b\u4e3a 1 \u7684\u6982\u7387 p(x_i)\uff0c\u6b64\u65f6\u628a\u8fd9\u4e9b\u6982\u7387\u7684\u4f30\u8ba1\u8bb0\u4e3a \\hat{p}(x_i)\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u5206\u7ec4\u6570\u636e\u60c5\u5f62\u201d\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4ec5\u9700\u4f7f\u7528 \\hat{p}(x) \u4ee3\u66ff p(x) \u540e\uff0c\u518d\u5bf9\u5176\u8fdb\u884c\u53d8\u6362\u5373\u53ef\u76f4\u63a5\u6700\u5c0f\u4e8c\u4e58\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u6700\u5c0f\u4e8c\u4e58\u5b9e\u9645\u4e0a\u5e94\u4e3a\u5e7f\u4e49\u6700\u5c0f\u4e8c\u4e58\uff08GLSE\uff09\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684 x_i\uff0c\u6211\u4eec\u90fd\u5bf9\u5176\u89c2\u6d4b\u4e86 n_i \u6b21\uff0c\u8fd9\u4e9b n_i \u4e0d\u4e00\u5b9a\u662f\u76f8\u7b49\u7684\uff0c\u8fd9\u5bfc\u81f4\u6bcf\u6761\u6570\u636e\u4e4b\u95f4\u5e76\u4e0d\u662f\u540c\u65b9\u5dee\u7684\u3002\u53ef\u4ee5\u901a\u8fc7 Delta \u65b9\u6cd5\u8bc1\u660e\uff0c\u5f53 \\min\\{n_i\\} \u5145\u5206\u5927\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 \\hat{v}_i = 1/(n_i\\hat{p}(x_i)(1-\\hat{p}(x_i))) \u6765\u4f5c\u4e3a GLSE \u4e2d\u4f7f\u7528\u6570\u636e x_i \u65f6\uff0ce_i \u7684\u65b9\u5dee\u3002</p> <p>\u800c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u65e0\u6cd5\u5bf9\u540c\u4e00\u7ec4 x \u8fdb\u884c\u591a\u6b21\u89c2\u5bdf\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5f97\u5230 \\hat{p}(x)\uff0c\u6211\u4eec\u4ec5\u6709 X=x_i \u65f6\u7684\u5206\u7c7b\u662f 0 \u8fd8\u662f 1\u3002\u6240\u4ee5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u4e0d\u4fbf\u4f7f\u7528\uff0c\u6211\u4eec\u4f7f\u7528**\u6781\u5927\u4f3c\u7136\u4f30\u8ba1**\u6765\u89e3\u51b3 \\hat\\beta_0, \\hat\\beta_1\u3002</p> <p>\u663e\u7136\uff0cy_i\\sim B(1, p(x_i))\uff0cf(y_i) = p(x_i)^{y_i}(1-p(x_i))^{1-y_i}, y_i = 0,1\uff0c\u5219\u4f3c\u7136\u51fd\u6570\u53ca\u5bf9\u6570\u4f3c\u7136\u51fd\u6570\u4e3a $$ L(p(x_i)) = \\prod_{i}p(x_i)<sup>{y_i}(1-p(x_i))</sup>{1-y_i}\\ l(x_i) = \\sum_i [y_i\\log p(x_i) + (1-y_i)\\log (1-p(x_i))] $$ \u628a p(X) = \\dfrac{e^{\\boldsymbol{X}'\\boldsymbol{\\beta}}}{1 + e^{\\boldsymbol{X}'\\boldsymbol{\\beta}}} \u4ee3\u5165\u6709 $$ l(\\boldsymbol{\\beta}) = \\sum_i[y_i\\boldsymbol{x_i}'\\boldsymbol{\\beta} - \\log(1 + \\exp(\\boldsymbol{x_i}'\\boldsymbol{\\beta}))] $$ \u5bf9 \\boldsymbol{\\beta} \u6c42\u5bfc\uff0c\u4ee4\u5bfc\u51fd\u6570\u4e3a 0\uff0c\u6709 $$ \\frac{\\partial l(\\boldsymbol{\\beta})}{\\partial \\boldsymbol{\\beta}} = \\sum_i(y_i-\\frac{e^{\\boldsymbol{x_i}'\\boldsymbol{\\beta}}}{1 + e^{\\boldsymbol{x_i}'\\boldsymbol{\\beta}}})\\boldsymbol{x_i}=0 $$ \u53ef\u901a\u8fc7\u8fed\u4ee3\u6c42\u6570\u503c\u89e3\u3002</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#multinomial-logistic-regression","title":"Multinomial Logistic Regression","text":"<p>\u591a\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u5904\u7406\u529e\u6cd5\uff1a\u57fa\u51c6\u7c7b/Softmax \u7f16\u7801</p> <p>\u57fa\u51c6\u7c7b\u6cd5</p> <p>\u5047\u8bbe\u603b\u5171\u6709 K \u4e2a\u7c7b\uff0c\u4e3a 1, 2, \\cdots, K\uff0c\u5219 $$ P(Y = k|X = x) = \\begin{cases} \\dfrac{e^{\\boldsymbol{x}'\\boldsymbol{\\beta}k}}{1 + \\sum{i=1}<sup>{K-1}e</sup>{\\boldsymbol{x}'\\boldsymbol{\\beta}i}}&amp;, \\text{for }k = 1, \\cdots, K-1\\ \\dfrac{1}{1 + \\sum{i=1}<sup>{K-1}e</sup>{\\boldsymbol{x}'\\boldsymbol{\\beta}_i}}&amp;, \\text{for }k = K\\ \\end{cases} $$ \u5373\u4e3a\uff08log odd \u6216 logic \u7684\u5f62\u5f0f\uff09 $$ \\ln (\\dfrac{P(Y = k|X = x)}{P(Y = K|X = x)}) = \\boldsymbol{x}'\\boldsymbol{\\beta}_k $$ \u8fd9\u6837\u8ba1\u7b97\u51fa\u6765\u7684 \\beta_{k,i} \u4ee3\u8868\u7b2c i \u7ef4\u53d8\u5316\u65f6\uff0c\u5206\u7c7b\u5230 k \u76f8\u6bd4\u4e8e\u5206\u7c7b\u5230 K \u7684\u5f71\u54cd\u7684\u53ef\u80fd\u6027\u3002</p> <p>\u57fa\u51c6\u7c7b\u9700\u8981\u4e25\u8c28\u9009\u53d6\uff0c\u56e0\u4e3a\u8fd9\u548c\u6211\u4eec\u5206\u6790\u7cfb\u6570\u7684\u7ed3\u8bba\u606f\u606f\u76f8\u5173\uff1b\u4f46\u540c\u65f6\u53c8\u662f\u4e0d\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u65e0\u8bba\u57fa\u51c6\u7c7b\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u5f97\u5230\u7684\u7ed3\u8bba\uff08\u5982\u8fdb\u884c\u9884\u6d4b\u7b49\uff09\u603b\u662f\u4e00\u81f4\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9e\u9645\u5e94\u7528\u65f6\u53ea\u662f\u5229\u7528\u8fd9\u4e2a\u6982\u7387\u4f5c\u4e3a\u4e00\u4e2a Score\uff0c\u53bb\u6bd4\u8f83\u76f8\u5bf9\u5927\u5c0f\u3002</p> <p>Softmax \u7f16\u7801</p> <p></p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-5","title":"Ch 5 \u91cd\u91c7\u6837\u65b9\u6cd5","text":"<p>Validation Set: \u628a\u8bad\u7ec3\u96c6\u5206\u6210\u4e24\u4efd\uff0c\u4e00\u4efd\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u4e00\u4efd\u4f5c\u4e3a\u9a8c\u8bc1\u96c6</p> <p>\u7f3a\u9677\uff1a\u5bf9\u9519\u8bef\u7387\u7684\u9a8c\u8bc1\u4f30\u8ba1\u503c\u53ef\u80fd\u53d8\u5316\u5f88\u5927\uff1b\u6709\u4e00\u90e8\u5206\u6570\u636e\u53bb\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\u4e86\uff0c\u6ca1\u6709\u5e94\u7528\u5728\u8bad\u7ec3\u4e2d</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#cross-validation","title":"\u4ea4\u53c9\u9a8c\u8bc1 Cross Validation","text":"<p>\u5982\u679c\u6ca1\u6709 Test Data Set\uff0c\u53ef\u4ee5\u8bd5\u7740\u4ece Train Data \u91cc Resample</p> <p>Leave One Out Cross Validation LOOCV</p> <p>\u6bcf\u6b21\u627e\u51fa\u6765\u4e00\u4e2a\u4f5c\u4e3a Validation\uff0c\u7528\u5176\u4ed6\u7684 Train\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u4e00\u6b21\u7684 MSE\uff1b\u6700\u7ec8\u7ed3\u679c\u662f\u628a\u6240\u6709\u7684 MSE \u52a0\u8d77\u6765\u9664\u4ee5\u4e2a\u6570\u3002</p> <p>\u7f3a\u9677\uff1a\u592a\u6162</p> <p>\u5bf9\u4e8e\u6700\u5c0f\u4e8c\u4e58\u7ebf\u6027/\u591a\u9879\u5f0f\u56de\u5f52</p> <p>k-fold Cross Validation</p> <p>\u76f8\u5f53\u4e8e\u603b\u5171\u5206\u6210 k \u4efd</p> <p>\u6709\u65f6\u9700\u8981\u5728\u610f\u4f30\u8ba1\u7684 MSE \u7684\u503c\uff0c\u4f46\u6709\u65f6\u53ea\u9700\u8981 MSE \u7684\u6700\u5c0f\u503c\u70b9</p> <p>\u4ece\u51cf\u5c11\u504f\u5dee\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5f88\u660e\u663e\uff0cLOOCV\u6bd4k-fold CV\u66f4\u53ef\u53d6\u3002\u7136\u800c\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u5728\u4f30\u8ba1\u8fc7\u7a0b\u4e2d\uff0c\u504f\u5dee\u5e76\u4e0d\u662f\u552f\u4e00\u503c\u5f97\u5173\u6ce8\u7684\u6765\u6e90\uff1b\u6211\u4eec\u8fd8\u5fc5\u987b\u8003\u8651\u7a0b\u5e8f\u7684\u5dee\u5f02\u3002\u7ed3\u679c\u8868\u660e\uff0c\u5f53k\uff1cn\u65f6\uff0cLOOCV\u7684\u65b9\u5dee\u5927\u4e8ek\u500dCV\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u5f53\u6211\u4eec\u6267\u884cLOOCV\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5bf9n\u4e2a\u62df\u5408\u6a21\u578b\u7684\u8f93\u51fa\u8fdb\u884c\u5e73\u5747\uff0c\u6bcf\u4e2a\u6a21\u578b\u90fd\u5728\u51e0\u4e4e\u76f8\u540c\u7684\u89c2\u6d4b\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff1b\u56e0\u6b64\uff0c\u8fd9\u4e9b\u8f93\u51fa\u5f7c\u6b64\u9ad8\u5ea6\uff08\u6b63\uff09\u76f8\u5173\u3002\u76f8\u53cd\uff0c\u5f53\u6211\u4eec\u5728k&lt;n\u7684\u60c5\u51b5\u4e0b\u6267\u884ck\u500dCV\u65f6\uff0c\u6211\u4eec\u5e73\u5747k\u62df\u5408\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u8fd9\u4e9b\u6a21\u578b\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u7a0d\u4f4e</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#bootstrap","title":"\u5f15\u5bfc Bootstrap","text":"<p>\u4ece\u8bad\u7ec3\u6570\u636e\u96c6\u91cc\u62bd\u6837\uff0c\u7b97\u51fa\u4f30\u8ba1\u7684\u503c\uff0c\u7136\u540e\u628a\u5f85\u4f30\u503c\u53d6 Mean\uff0c\u5e76\u8ba1\u7b97\u6807\u51c6\u5dee\u5f97\u5230\u8fd1\u4f3c\u7f6e\u4fe1\u533a\u95f4\u3002</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-6","title":"Ch 6 \u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u5b50\u96c6\u9009\u62e9\u4e0e\u6a21\u578b\u6b63\u5219\u5316","text":""},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#subset-selection","title":"Subset Selection","text":"<p>\u6700\u4f18\u5b50\u96c6\u9009\u62e9\uff1a\u628a\u6240\u6709\u7684\u5b50\u96c6\u7f8e\u5267\u51fa\u6765\uff0c\u6700\u540e\u9009 RSS min\u7684\u3002</p> <p>\u5411\u524d\u5b50\u96c6\u9009\u62e9\uff1a\u6bcf\u6b21\u9009\u4e00\u4e2a\uff0c\u4f7f\u5f97 RSS \u51cf\u5c11\u6700\u591a</p> <p>\u5411\u540e\u5b50\u96c6\u9009\u62e9\uff1a\u6bcf\u6b21\u5c1d\u8bd5\u5254\u9664\u4e00\u4e2a\uff0c\u9009\u62e9RSS\u6700\u5c0f\u7684\uff1b\u8981\u6c42 n\\geq p\uff0c\u4f46\u662f\u5411\u524d\u7684\u5c31\u5373\u4f7f n&lt;p \u90fd\u884c\u3002</p> <p></p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ridge-regression","title":"Ridge Regression","text":"<p>L2 \u6b63\u5219\u5316 $$ \\min \\text{RSS} + \\lambda \\sum_{j=1}<sup>p\\beta_j</sup>2 $$</p> <p>\u8981\u6ce8\u610f\uff0c\u5e76\u6ca1\u6709 \\beta_0\u3002\u7f3a\u9677\uff1a\u5b83\u53ea\u80fd\u628a\u7cfb\u6570\u5c3d\u53ef\u80fd\u8d8b\u4e8e0\uff0c\u800c\u4e0d\u662f\u7cbe\u786e\u8bbe\u7f6e\u4e3a0\uff0c\u5373\u4e0d\u80fd\u6392\u9664\u4efb\u4f55\u4e00\u4e2a\u53d8\u91cf\u3002 $$ \\hat{\\beta}(k) = (X'X+kI)^{-1}X'Y $$</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#lasso","title":"Lasso","text":"<p>L1 \u6b63\u5219\u5316 $$ \\min \\text{RSS} + \\lambda \\sum_{j=1}^p|\\beta_j| $$</p> <p>\\lambda \u5f88\u5927\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e9b\u7cfb\u6570\u4e3a 0\u3002</p> <p></p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#l1-l2-lasso-ridge","title":"L1 \u6b63\u5219\u5316\u548c L2 \u6b63\u5219\u5316\u7684\u533a\u522b\uff08Lasso &amp; Ridge\uff09","text":"<p>https://www.zhihu.com/column/c_171321929</p> <ul> <li>\u4e3a\u4ec0\u4e48 L1 \u6613\u4e8e\u53d6\u5230 0\uff1f</li> </ul> <p>\u5047\u8bbe\u635f\u5931\u51fd\u6570\u8bb0\u4e3a   $$   L(w) = f(w) + C|w|   $$   \u8981\u8ba9\u635f\u5931\u51fd\u6570\u5728 0 \u70b9\u53d6 \\min\uff0c\u7531\u4e8e 0 \u70b9\u662f\u95f4\u6bb5\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u4f7f\u5f97 L'(0^-)\\times L'(0^+)&lt;0 \u5373\u53ef\uff0c\u5373   $$   (f'(0)+C)\\times (f'(0) - C) &lt; 0\\Leftrightarrow C&gt;|f'(0)|   $$   \u800c L2 \u6b63\u5219\u5316\u4e2d\uff0c\u7531\u4e8e\u8fde\u7eed\u6027\uff0c\u5f53\u4e14\u4ec5\u5f53 L'(0)=0 \u65f6\uff0c\u5728\u53ef\u4ee5\u5728 0 \u5904 \u53d6 \\min\uff0c\u8fd9\u53ea\u5bf9\u5e94\u4e86\u4e00\u70b9\uff0c\u800c L1 \u6b63\u5219\u5316\u5bf9\u5e94\u7684\u662f\u4e00\u6574\u4e2a\u533a\u95f4\u3002</p> <ul> <li>\u4ece Bayes \u7684\u89d2\u5ea6\u7406\u89e3\u7ebf\u6027\u56de\u5f52 MLE \u7684 L1 \u6b63\u5219\u5316\u548c L2 \u6b63\u5219\u5316</li> </ul> <p></p> <p>L1 \u6b63\u5219\u5316\u5373\u5bf9\u5e94\u8fd9\u91cc\u7684 w \u7b26\u5408\u6807\u51c6\u62c9\u666e\u62c9\u65af\u5206\u5e03\uff0cp(w) = \\dfrac{1}{2}\\exp(-|x|)\uff1bL2 \u6b63\u5219\u5316\u5bf9\u5e94\u8fd9\u91cc\u7684 w\\sim N(0,1)\u3002</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#pcr","title":"PCR","text":"<p>PCR \u8868\u73b0\u4e0d\u662f\u5f88\u597d\u7684\u539f\u56e0\uff1a\u6570\u636e\u662f\u7531\u591a\u4e2a\u5f71\u54cd\u56e0\u7d20\u5171\u540c\u751f\u6210\u7684\uff0c\u5982\u679c\u6570\u636e\u662f\u4ec5\u7531\u5c11\u91cf\u51e0\u4e2a\u5f71\u54cd\u56e0\u7d20\u751f\u6210\u70b9\uff0c\u90a3\u5c31\u4f1a\u8868\u73b0\u7684\u66f4\u597d\u3002</p> <p>\u5cad\u56de\u5f52\u53ef\u4ee5\u89c6\u4e3a\u8fde\u7eed\u7248\u672c\u7684PCR</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-7","title":"Ch 7 \u975e\u7ebf\u6027\u56de\u5f52","text":"<p>\u591a\u9879\u5f0f\u56de\u5f52\uff1aX, X^2, X^3</p> <p>Step functions\uff1a\u5206\u6bb5\u7ebf\u6027\u56de\u5f52</p> <p>Regression splines\uff1a\u7efc\u5408\u524d\u4e24\u79cd\u7684\u56de\u5f52</p> <p>Smoothing splines, Local regression</p> <p>Generalized additive models</p> <p>\u591a\u9879\u5f0f\u56de\u5f52</p> <p>\u600e\u6837\u753b 95% \u7f6e\u4fe1\u533a\u95f4\uff1f\u53d6\u6bcf\u4e2a\u70b9\u5904\u7684\u56de\u5f52\u51fd\u6570\u7684 2 \u500d\u6807\u51c6\u5dee\u4f5c\u4e3a\u754c\uff0c\u5047\u8bbe\u8bef\u5dee\u4e3a N(0,1)\uff0c\u6ee1\u8db3 2\\sigma \u539f\u5219\u3002</p> <p>\u5047\u8bbe\u56de\u5f52\u7cfb\u6570\u7684\u534f\u65b9\u5dee\u77e9\u9635\u662f C\uff0c\u90a3\u5982\u679c l_0' = (1,x_0, x_0^2)'\uff0c\u5219\u56de\u5f52\u51fd\u6570\u7684\u65b9\u5dee\u5373\u4e3a l_0'Cl_0\u3002</p> <p>\u5206\u6bb5\u7ebf\u6027\u56de\u5f52</p> <p>\u4e00\u822c\u5728\u5206\u754c\u7ebf\u660e\u663e\u7684\u65f6\u5019\u624d\u6765\u4f7f\u7528\u3002</p> <p>\u53d6 C_i(x) \u4f5c\u4e3a\u5206\u6bb5\u793a\u6027\u56de\u5f52\u53d8\u91cf\uff0c\u7136\u540e\u62df\u5408\uff0c\u56de\u5f52\u51fa\u6765\u7684\u51fd\u6570\u662f\u4e0d\u8fde\u7eed\u7684\u8bb8\u591a\u5e73\u53f0\uff0c\u7136\u540e\u518d\u628a\u4ed6\u4eec\u8fde\u8d77\u6765\u3002</p> <p> $$ Y = \\beta_0 + \\beta_1C_1(X) + \\cdots + \\beta_kC_k(X) + \\epsilon $$ \u57fa\u51fd\u6570</p> <p>\u524d\u4e24\u79cd\u56de\u5f52\u662f\u8fd9\u79cd\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u4f7f\u7528\u57fa\u51fd\u6570\u7684\u56de\u5f52\u5373 $$ Y = \\beta_0 + \\beta_1b_1(X) + \\cdots + \\beta_kb_k(X) + \\epsilon $$ \u57fa\u51fd\u6570\u662f\u786e\u5b9a\u4e14\u5df2\u77e5\u7684\u3002\u57fa\u51fd\u6570\u53ef\u4ee5\u662f\u5206\u6bb5\u7684\u3002</p> <p>Regression splines</p> <p>\u5206\u6bb5\u62df\u5408\u3002\u81ea\u7531\u5ea6\u5373\u62df\u5408\u7684\u5206\u6bb5\u51fd\u6570\u4e2d\u672a\u77e5\u53d8\u91cf\u7684\u6570\u76ee\uff0c\u518d\u51cf\u53bb\u7ea6\u675f\u6570\u76ee\u3002\u6837\u6761\u4e2d\uff0c\u8981\u6c42\u8fde\u7eed\u3001\u4e00\u9636\u5bfc\u8fde\u7eed\u3001\u4e8c\u9636\u5bfc\u8fde\u7eed\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8fde\u63a5\u70b9\u53ef\u4ee5\u51cf\u53bb3\u4e2a\u81ea\u7531\u5ea6\u3002</p> <p></p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-8","title":"Ch 8 \u51b3\u7b56\u6811","text":"<p>\u56de\u5f52\u6811</p> <p>\u76ee\u6807\uff1a $$ \\min RSS = \\min \\sum_{j=1}^J\\sum_{i\\in R_j}(y_i-\\hat{y}{R_j})^2 $$ \u81ea\u9876\u5411\u4e0b\u5206\u5272\uff0c\u6bcf\u4e00\u6b65\u7684\u9009\u62e9\u90fd\u8ba9 RSS \u4e0b\u964d\u5c3d\u53ef\u80fd\u591a\u3002\u5177\u4f53\u5efa\u6811\u65b9\u5f0f\uff1a $$ \\min{j,s}\\sum_{i:x_i\\in {X|X_j&lt;s}}(y_i-\\hat{y}{R_1})^2+\\sum{i:x_i\\in {X|X_j\\geq s}}(y_i-\\hat{y}_{R_2})^2 $$ \u76f4\u5230\u6bcf\u4e2a\u533a\u57df\u90fd\u6ca1\u6709\u8d85\u8fc7 5 \u4e2a\u89c2\u6d4b\u503c\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fc7\u62df\u5408\uff0c\u8fd8\u9700\u8981\u5bf9\u4e0a\u8ff0\u7b97\u6cd5\u751f\u6210\u7684\u5927\u6811\u8fdb\u884c\u526a\u679d pruning\u3002\u8bbe |T| \u4e3a\u672b\u7aef\u8282\u70b9\u5206\u7c7b\u7684\u4e2a\u6570\uff0c\u5219 $$ \\min_{\\alpha} \\sum_{m=1}^{|T|}\\sum_{i:x_i\\in R_m}(y_i-\\hat{y}_{R_m})^2+\\alpha|T| $$ \u53ef\u4ee5\u4f7f\u7528 k-fold cross-validation \u7684\u65b9\u6cd5\u786e\u5b9a \\alpha</p> <p></p> <p>\u5206\u7c7b\u6811</p> <p>\u635f\u5931\u51fd\u6570\uff1a $$ 1-\\max_k (\\hat{p}_{m,k}) $$ \\hat{p}_{m,k} \u4ee3\u8868\u5728\u7b2c m \u4e2a\u533a\u57df\u4e2d\uff0c\u5c5e\u4e8e\u7b2c k \u7c7b\u7684\u4e2a\u4f53\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u5982\u679c \\hat{p}_{m,k}=1\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e00\u533a\u57df\u4e2d\u6240\u6709\u7684\u90fd\u662f k \u7c7b\u7684\u3002</p> <p>Gini index $$ G = \\sum_{k=1}^K \\hat{p}{m,k}(1-\\hat{p}{m,k}) $$ \u5982\u679c \\hat{p}_{m,k} \u63a5\u8fd1 0 \u6216 1\uff0c\u90a3 G \u4f1a\u5f88\u5c0f\u3002\u6240\u4ee5 G \u8d8a\u5c0f\u8d8a\u597d\u3002</p> <p>entropy \u71b5 $$ D = -\\sum_{k=1}^K\\hat{p}{m,k}\\log \\hat{p}{m,k} $$ \u5982\u679c \\hat{p}_{m,k} \u63a5\u8fd1 0 \u6216 1\uff0c\u90a3 D \u4f1a\u5f88\u5c0f\u3002\u6240\u4ee5 D \u8d8a\u5c0f\u8d8a\u597d\u3002</p> <p>\u4e0d\u8fc7\u8fd9\u4e9b\u76ee\u6807\u51fd\u6570\u90fd\u8fc7\u4e8e\u5173\u6ce8\u7eaf\u51c0\u6027\uff0c\u800c\u4e0d\u592a\u5173\u6ce8\u9884\u6d4b\u7684\u51c6\u786e\u5ea6\u3002\u6240\u4ee5\u5efa\u6811\u7684\u65f6\u5019\u8fd8\u662f\u4f1a\u4f7f\u7528 Cross Validation Error\u3002</p> <p>\u5982\u679c\u5728\u5206\u7c7b\u8fb9\u754c\u975e\u7ebf\u6027\u7684\u60c5\u5f62\u4e0b\uff0c\u51b3\u7b56\u6811\u6548\u679c\u66f4\u597d\uff1b\u4f46\u5982\u679c\u5206\u7c7b\u7684\u8fb9\u754c\u662f\u7ebf\u6027\u7684\uff0c\u90a3\u7ebf\u6027\u56de\u5f52\u5c31\u591f\u3002</p> <p></p> <p>Bagging - Bootstrap Aggregation</p> <p>\u6734\u7d20\u7684\u51b3\u7b56\u6811\u53ef\u80fd\u6709\u5f88\u9ad8\u7684\u65b9\u5dee\u3002</p> <p>\u8981\u60f3\u51cf\u5c11\u65b9\u5dee\uff0c\u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\u5c31\u662f\u7528\u4e0d\u540c\u7684\u6570\u636e\u8bad\u7ec3\u51fa\u6765\u597d\u591a\u6a21\u578b\uff0c\u7136\u540e\u53d6\u8fd9\u4e9b\u6a21\u578b\u5f97\u5230\u7684\u7ed3\u679c\u7684\u5e73\u5747\u503c\uff0c\u8fd9\u6837\u5c31\u80fd\u51cf\u5c11\u65b9\u5dee\u3002</p> <p>\u5bf9\u4e8e\u51b3\u7b56\u6811\u800c\u8a00\uff0c\u6bcf\u68f5\u51b3\u7b56\u6811\u53ef\u4ee5\u4e0d\u7528\u526a\u679d\uff0c\u56e0\u4e3a\u6700\u540e\u7684\u7ed3\u679c\u4f1a\u505a\u5e73\u5747\u3002</p> <p>Boosting</p> <p>\u63d0\u5347\u65b9\u6cd5\uff08Boosting\uff09**\u662f\u4e00\u79cd\u53ef\u4ee5\u7528\u6765\u51cf\u5c0f\u76d1\u7763\u5b66\u4e60\u4e2d\u504f\u5dee\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002\u4e3b\u8981\u4e5f\u662f\u5b66\u4e60\u4e00\u7cfb\u5217\u5f31\u5206\u7c7b\u5668\uff0c\u5e76\u5c06\u5176\u7ec4\u5408\u4e3a\u4e00\u4e2a\u5f3a\u5206\u7c7b\u5668\u3002Boosting\u4e2d\u6709\u4ee3\u8868\u6027\u7684\u662f **AdaBoost\uff08Adaptive boosting\uff09\u7b97\u6cd5\uff1a\u521a\u5f00\u59cb\u8bad\u7ec3\u65f6\u5bf9\u6bcf\u4e00\u4e2a\u8bad\u7ec3\u4f8b\u8d4b\u76f8\u7b49\u7684\u6743\u91cd\uff0c\u7136\u540e\u7528\u8be5\u7b97\u6cd5\u5bf9\u8bad\u7ec3\u96c6\u8bad\u7ec3t\u8f6e\uff0c\u6bcf\u6b21\u8bad\u7ec3\u540e\uff0c\u5bf9\u8bad\u7ec3\u5931\u8d25\u7684\u8bad\u7ec3\u4f8b\u8d4b\u4ee5\u8f83\u5927\u7684\u6743\u91cd\uff0c\u4e5f\u5c31\u662f\u8ba9\u5b66\u4e60\u7b97\u6cd5\u5728\u6bcf\u6b21\u5b66\u4e60\u4ee5\u540e\u66f4\u6ce8\u610f\u5b66\u9519\u7684\u6837\u672c\uff0c\u4ece\u800c\u5f97\u5230\u591a\u4e2a\u9884\u6d4b\u51fd\u6570\u3002</p> <p>Bagging\u4e0eBoosting</p> <p>Bagging\u548cBoosting\u91c7\u7528\u7684\u90fd\u662f**\u91c7\u6837-\u5b66\u4e60-\u7ec4\u5408**\u7684\u65b9\u5f0f\uff0c\u4f46\u5728\u7ec6\u8282\u4e0a\u6709\u4e00\u4e9b\u4e0d\u540c\uff0c\u5982</p> <ul> <li>Bagging\u4e2d\u6bcf\u4e2a\u8bad\u7ec3\u96c6\u4e92\u4e0d\u76f8\u5173\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u57fa\u5206\u7c7b\u5668\u4e92\u4e0d\u76f8\u5173\uff0c\u800cBoosting\u4e2d\u8bad\u7ec3\u96c6\u8981\u5728\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c\u4e0a\u8fdb\u884c\u8c03\u6574\uff0c\u4e5f\u4f7f\u5f97\u5176\u4e0d\u80fd\u5e76\u884c\u8ba1\u7b97</li> <li>Bagging\u4e2d\u9884\u6d4b\u51fd\u6570\u662f\u5747\u5300\u5e73\u7b49\u7684\uff0c\u4f46\u5728Boosting\u4e2d\u9884\u6d4b\u51fd\u6570\u662f\u52a0\u6743\u7684</li> </ul> <p>**\u968f\u673a\u68ee\u6797**\u5c5e\u4e8e \u96c6\u6210\u5b66\u4e60 \u4e2d\u7684 Bagging\uff08Bootstrap Aggregation \u7684\u7b80\u79f0\uff09 \u65b9\u6cd5</p> <ol> <li>\u5b83\u53ef\u4ee5\u51fa\u6765\u5f88\u9ad8\u7ef4\u5ea6\uff08\u7279\u5f81\u5f88\u591a\uff09\u7684\u6570\u636e\uff0c\u5e76\u4e14\u4e0d\u7528\u964d\u7ef4\uff0c\u65e0\u9700\u505a\u7279\u5f81\u9009\u62e9</li> <li>\u5b83\u53ef\u4ee5\u5224\u65ad\u7279\u5f81\u7684\u91cd\u8981\u7a0b\u5ea6</li> <li>\u53ef\u4ee5\u5224\u65ad\u51fa\u4e0d\u540c\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u4e92\u5f71\u54cd</li> <li>\u4e0d\u5bb9\u6613\u8fc7\u62df\u5408</li> <li>\u8bad\u7ec3\u901f\u5ea6\u6bd4\u8f83\u5feb\uff0c\u5bb9\u6613\u505a\u6210\u5e76\u884c\u65b9\u6cd5</li> <li>\u5b9e\u73b0\u8d77\u6765\u6bd4\u8f83\u7b80\u5355</li> <li>\u5bf9\u4e8e\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6\u6765\u8bf4\uff0c\u5b83\u53ef\u4ee5\u5e73\u8861\u8bef\u5dee\u3002</li> <li>\u5982\u679c\u6709\u5f88\u5927\u4e00\u90e8\u5206\u7684\u7279\u5f81\u9057\u5931\uff0c\u4ecd\u53ef\u4ee5\u7ef4\u6301\u51c6\u786e\u5ea6\u3002</li> </ol> <p>\u7f3a\u9677\uff1a</p> <ol> <li>\u968f\u673a\u68ee\u6797\u5df2\u7ecf\u88ab\u8bc1\u660e\u5728\u67d0\u4e9b\u566a\u97f3\u8f83\u5927\u7684\u5206\u7c7b\u6216\u56de\u5f52\u95ee\u9898\u4e0a\u4f1a\u8fc7\u62df\u5408\u3002</li> <li>\u5bf9\u4e8e\u6709\u4e0d\u540c\u53d6\u503c\u7684\u5c5e\u6027\u7684\u6570\u636e\uff0c\u53d6\u503c\u5212\u5206\u8f83\u591a\u7684\u5c5e\u6027\u4f1a\u5bf9\u968f\u673a\u68ee\u6797\u4ea7\u751f\u66f4\u5927\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u968f\u673a\u68ee\u6797\u5728\u8fd9\u79cd\u6570\u636e\u4e0a\u4ea7\u51fa\u7684\u5c5e\u6027\u6743\u503c\u662f\u4e0d\u53ef\u4fe1\u7684</li> </ol> <p></p> <p>Bayesian Additive Regression Trees BART</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-9-svm","title":"Ch 9 SVM","text":"<p>\u6700\u5927\u95f4\u9694\u8d85\u5e73\u9762\uff1a</p> <p></p> <p>\u5982\u679c\u7ebf\u6027\u4e0d\u53ef\u5206\uff0c\u90a3 M&lt;0\u3002\u56e0\u4e3a M \u7684\u542b\u4e49\u662f\u652f\u6301\u5411\u91cf\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb\u3002</p> <p>SVM\uff1a</p> <p></p> <p>\u8fb9\u7f18\u7684\u9519\u8bef\u4e00\u4fa7\u548c\u8d85\u5e73\u9762\u7684\u9519\u8bef\u4e00\u4fa7\uff0c\u662f\u4e0d\u540c\u7684\uff1a\\epsilon&lt;0 \u6b63\u786e\u5206\u7c7b\uff0c0&lt;\\epsilon&lt;1 \u662f\u5728\u8fb9\u7f18\u7684\u9519\u8bef\u4e00\u4fa7\uff0c\\epsilon&gt;1 \u662f\u5728\u8d85\u5e73\u9762\u7684\u9519\u8bef\u4e00\u4fa7</p> <p>C \u662f\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u786e\u5b9a\u7684\u8d85\u53c2\u6570</p> <p>\u4f4d\u4e8e\u6b63\u786e\u5206\u7c7b\u7684\u70b9\uff0c\u6839\u672c\u4e0d\u4f1a\u5f71\u54cdSVM\u3002\u6240\u4ee5\u53ea\u6709\u90a3\u4e9b\u5728\u8fb9\u7f18\u91cc\u7684\uff0c\u624d\u88ab\u53eb\u505a\u652f\u6301\u5411\u91cf\u3002</p> <p>\u975e\u7ebf\u6027\uff1a</p> <p>\u589e\u52a0\u7279\u5f81\uff0c\u52a0\u5165 x_i^2 \u8fd9\u6837\u53d8\u6210 2p \u4e2a\u7279\u5f81\u3002</p> <p>\u6838\u51fd\u6570</p> <p>\u6211\u4eec\u60f3\u8981\u6269\u5927\u7279\u5f81\u7a7a\u95f4\uff0c\u4ee5\u9002\u5e94\u7c7b\u4e4b\u95f4\u7684\u975e\u7ebf\u6027\u8fb9\u754c\u3002</p> <p>\u5b9e\u9645\u8d77\u4f5c\u7528\u7684\u53ea\u6709\u51e0\u4e2a\u652f\u6301\u5411\u91cf\uff0c\u5f85\u4f30\u7684 x \u662f\u548c\u8fd9\u4e9b\u652f\u6301\u5411\u91cf\u505a\u5185\u79ef\u7136\u540e\u6c42\u52a0\u6743\u548c\u3002</p> <p>\u9884\u6d4b\u51fd\u6570\uff1a $$ f(x) = \\beta_0 + \\sum_{\\text{support vector }v}\\alpha_i\\xlongequal{\\triangle} \\beta_0 + \\sum_{\\text{support vector }v}\\alpha_iK(x, v) $$ \u7ebf\u6027 Linear Kernel:  $$ K(x_i, x_j) = \\sum_{k=1}^p x_{ik}x_{jk} $$ \u591a\u9879\u5f0f Polynomial Kernel:  $$ K(x_i, x_j) = (1 + \\sum_{k=1}^p x_{ik}x_{jk})^d $$ \u5f84\u5411 Radial Kernel: Radial Basis Function, RBF kernel $$ K(x_i, x_j) = \\exp\\left(-\\gamma \\sum_{k=1}^p (x_{ik} - x_{jk})^2\\right) $$ \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u8d8a\u5927\uff0c\u8fd9\u4e2a\u5f84\u5411\u6838\u51fd\u6570\u8d8a\u5c0f"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-10-ann","title":"Ch 10 ANN","text":"<p>\u591a\u5c42\u611f\u77e5\u673a</p> <p>\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u4e00\u4e9b\u7279\u5f81\u52a0\u6743\u6c42\u548c\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u4e2a\u6fc0\u6d3b\u51fd\u6570 Threshold Function\uff1b\u7136\u540e\u518d\u5230\u4e0b\u4e00\u5c42..</p> <p>Feed-Forward Network \u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff1a\u4ece\u8f93\u5165\u5f00\u59cb\uff0c\u4e00\u5c42\u4e00\u5c42\u5f80\u540e\u7b97</p> <p>Feedback Network \u53cd\u9988\u795e\u7ecf\u7f51\u7edc\uff1a\u4e0d\u540c\u5faa\u73af\u4e4b\u95f4\u6709\u4f9d\u8d56\uff0c\u53ef\u4ee5\u6709\u66f4\u590d\u6742\u7684\u51fd\u6570</p> <p>\u8bad\u7ec3\u65b9\u6cd5\uff1a</p> <p>\u4e00\u5c42\uff1a\u5bf9 Logistic \u51fd\u6570\u6c42\u5bfc\uff1b\u4f7f\u7528Batch\u68af\u5ea6\u4e0b\u964d/\u5728\u7ebf\u68af\u5ea6\u4e0b\u964d</p> <p>\u53cd\u5411\u4f20\u64ad Back propagation</p> <p>\u5b66\u4e60\u4e00\u4e2a AND \u5206\u7c7b\u7684\u611f\u77e5\u673a\uff1a</p> <p></p> <p>\u4f46\u662f\u5355\u5c42\u611f\u77e5\u673a\u6ca1\u529e\u6cd5\u5904\u7406\u4ea6\u6216\u3002</p> <p>\u591a\u5c42\u611f\u77e5\u673a\u5c31\u53ef\u4ee5\u5904\u7406\u4ea6\u6216\u4e86\u3002</p> <p></p> <p></p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#ch-12","title":"Ch 12 \u65e0\u76d1\u7763\u5b66\u4e60","text":"<p>\u6211\u4eec\u5bf9\u9884\u6d4b\u4e0d\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u5e76\u6ca1\u6709\u76f8\u5e94\u7684\u54cd\u5e94\u53d8\u91cf Y\uff1b\u6211\u4eec\u53ea\u662f\u60f3\u53d1\u73b0\u89e3\u91ca\u53d8\u91cf\u4e0a\u6709\u54ea\u4e9b\u53ef\u4ee5\u5206\u7c7b\u603b\u7ed3\u7684\u89c4\u5f8b\u3002</p> <p>\u66f4\u4e3b\u89c2\uff0c\u5206\u6790\u6ca1\u6709\u7b80\u5355\u7684\u76ee\u6807</p> <p>\u6ca1\u6709\u666e\u904d\u63a5\u53d7\u7684\u673a\u5236\u6765\u6267\u884c\u4ea4\u53c9\u9a8c\u8bc1\u6216\u5728\u72ec\u7acb\u6570\u636e\u96c6\u4e0a\u9a8c\u8bc1\u7ed3\u679c</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#pca","title":"PCA","text":"<p>\u6211\u4eec\u628a (x_1, \\cdots, x_n) \u6620\u5c04\u5230\u7b2c\u4e00\u4e3b\u6210\u5206\u5411\u91cf\u4e0a (\\phi_1, \\cdots, \\phi_n)\uff0c\u5f97\u5230\u7684\u6295\u5f71\u5c31\u662f\u7b2c\u4e00\u4e3b\u6210\u5206\u5f97\u5206 z_{11}, z_{21}, \\cdots, z_{n1}\u3002</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#_3","title":"\u805a\u7c7b","text":"<p>\u7279\u70b9\uff1a\u5c0f\u51b3\u7b56\u4ea7\u751f\u5927\u540e\u679c</p> <p>k means \u5c42\u6b21\u805a\u7c7b</p> <p></p> <p>Hierarchical \u805a\u7c7b \u5c42\u6b21\u805a\u7c7b\uff1aAgglomerative Clustering \u81ea\u5e95\u800c\u4e0a\uff0cdivisive \u81ea\u9876\u800c\u4e0b</p> <p>Single-linkage:\u8981\u6bd4\u8f83\u7684\u8ddd\u79bb\u4e3a\u5143\u7d20\u5bf9\u4e4b\u95f4\u7684\u6700\u5c0f\u8ddd\u79bb Complete-linkage:\u8981\u6bd4\u8f83\u7684\u8ddd\u79bb\u4e3a\u5143\u7d20\u5bf9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb Group average\uff1a\u8981\u6bd4\u8f83\u7684\u8ddd\u79bb\u4e3a\u7c7b\u4e4b\u95f4\u7684\u5e73\u5747\u8ddd\u79bb\uff1a\u7b97A\u7ec4\u4e2d\u7684\u89c2\u6d4b\u503c\u4e0eB\u7ec4\u4e2d\u7684\u89c2\u6d4b\u503c\u4e4b\u95f4\u7684\u6240\u6709\u6210\u5bf9\u4e0d\u76f8\u4f3c\u6027\uff0c\u5e76\u8bb0\u5f55\u8fd9\u4e9b\u4e0d\u76f8\u4f3c\u6027\u7684\u5e73\u5747\u503c</p> <p>Centroid\uff1a\u8d28\u5fc3\u7684\u8ddd\u79bb</p> <p>Dendrogram\uff1a\u5c42\u6b21\u805a\u7c7b\u7684\u6811\u72b6\u56fe</p> <p>k-means\uff1a</p> <p>\u4f18\u70b9\uff1a 2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e \u7f3a\u70b9\uff1a 1\uff0c\u9700\u8981\u5bf9\u5747\u503c\u7ed9\u51fa\u5b9a\u4e49, 2\uff0c\u9700\u8981\u6307\u5b9a\u8981\u805a\u7c7b\u7684\u6570\u76ee\uff1b 3\uff0c\u4e00\u4e9b\u8fc7\u5927\u7684\u5f02\u5e38\u503c\u4f1a\u5e26\u6765\u5f88\u5927\u5f71\u54cd\uff1b 4\uff0c\u7b97\u6cd5\u5bf9\u521d\u59cb\u9009\u503c\u654f\u611f\uff1b 5\uff0c\u9002\u5408\u7403\u5f62\u805a\u7c7b</p> <p>\u5c42\u6b21\u805a\u7c7b\uff1a</p> <p>\u4f18\u70b9\uff1a 1\uff0c\u8ddd\u79bb\u548c\u89c4\u5219\u7684\u76f8\u4f3c\u5ea6\u5bb9\u6613\u5b9a\u4e49\uff0c\u9650\u5236\u5c11\uff1b 2\uff0c\u4e0d\u9700\u8981\u9884\u5148\u5236\u5b9a\u805a\u7c7b\u6570\uff1b 3\uff0c\u53ef\u4ee5\u53d1\u73b0\u7c7b\u7684\u5c42\u6b21\u5173\u7cfb\uff1b 4\uff0c\u53ef\u4ee5\u805a\u7c7b\u6210\u5176\u5b83\u5f62\u72b6</p> <p>\u7f3a\u70b9\uff1a 1\uff0c\u8ba1\u7b97\u590d\u6742\u5ea6\u592a\u9ad8\uff1b 3\uff0c\u7b97\u6cd5\u5f88\u53ef\u80fd\u805a\u7c7b\u6210\u94fe\u72b6</p>"},{"location":"Statistics/Statistical%20Learning%20-%20Notes/#knn","title":"KNN","text":"<p>KNN\u7b97\u6cd5\u5b9e\u73b0\u65b9\u5f0f \u86ee\u529b\u5b9e\u73b0(brute)\uff1a\u8ba1\u7b97\u9884\u6d4b\u6837\u672c\u5230\u6240\u6709\u8bad\u7ec3\u96c6\u6837\u672c\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u9009\u62e9\u6700\u5c0f\u7684k\u4e2a\u8ddd\u79bb\u5373\u53ef\u5f97\u5230K\u4e2a\u6700\u90bb\u8fd1\u70b9\u3002\u7f3a\u70b9\u5728\u4e8e\u5f53\u7279\u5f81\u6570\u6bd4\u8f83\u591a\u3001\u6837\u672c\u6570\u6bd4\u8f83\u591a\u7684\u65f6\u5019\uff0c\u7b97\u6cd5\u7684\u6267\u884c\u6548\u7387\u6bd4\u8f83\u4f4e\uff1b KD\u6811(kd_tree)\uff1aKD\u6811\u7b97\u6cd5\u4e2d\uff0c\u9996\u5148\u662f\u5bf9\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u5efa\u6a21\uff0c\u6784\u5efaKD\u6811\uff0c\u7136\u540e\u518d\u6839\u636e\u5efa\u597d\u7684\u6a21\u578b\u6765\u83b7\u53d6\u90bb\u8fd1\u6837\u672c\u6570\u636e\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u4eceKD_Tree\u4fee\u6539\u540e\u7684\u6c42\u89e3\u6700\u90bb\u8fd1\u70b9\u7684\u7b97\u6cd5\uff0c\u6bd4\u5982:Ball Tree\u3001 BBF Tree\u3001MVP Tree\u7b49\u3002 KD Tree\u6784\u5efa     KD\u6811\u91c7\u7528\u4ecem\u4e2a\u6837\u672c\u7684n\u7ef4\u7279\u5f81\u4e2d\uff0c\u5206\u522b\u8ba1\u7b97n\u4e2a\u7279\u5f81\u53d6\u503c\u7684\u65b9\u5dee\uff0c\u7528\u65b9\u5dee\u6700\u5927\u7684\u7b2ck\u7ef4\u7279\u5f81nk\u4f5c\u4e3a\u6839\u8282\u70b9\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u7279\u5f81\uff0c\u5347\u5e8f\u6392\u5217\u540e\u9009\u62e9\u53d6\u503c\u7684\u4e2d\u4f4d\u6570nkv\u4f5c\u4e3a\u6837\u672c\u7684\u5212\u5206\u70b9\uff0c\u5bf9\u4e8e\u5c0f\u4e8e\u8be5\u503c\u7684\u6837\u672c\u5212\u5206\u5230\u5de6\u5b50\u6811\uff0c\u5bf9\u4e8e\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6837\u672c\u5212\u5206\u5230\u53f3\u5b50\u6811\uff0c\u5bf9\u5de6\u53f3\u5b50\u6811\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\u627e\u65b9\u5dee\u6700\u5927\u7684\u7279\u5f81\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u9012\u5f52\u5373\u53ef\u4ea7\u751fKD\u6811\u3002</p> <p>KD Tree\u67e5\u627e\u6700\u8fd1\u90bb     \u5f53\u6211\u4eec\u751f\u6210KD\u6811\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u53bb\u9884\u6d4b\u6d4b\u8bd5\u96c6\u91cc\u9762\u7684\u6837\u672c\u76ee\u6807\u70b9\u4e86\u3002\u5bf9\u4e8e\u4e00\u4e2a\u76ee\u6807\u70b9\uff0c\u6211\u4eec\u9996\u5148\u5728KD\u6811\u91cc\u9762\u627e\u5230\u5305\u542b\u76ee\u6807\u70b9\u7684\u53f6\u5b50\u8282\u70b9\u3002\u4ee5\u76ee\u6807\u70b9\u4e3a\u5706\u5fc3\uff0c\u4ee5\u76ee\u6807\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u6837\u672c\u5b9e\u4f8b\u7684\u8ddd\u79bb\u4e3a\u534a\u5f84\uff0c\u5f97\u5230\u4e00\u4e2a\u8d85\u7403\u4f53\uff0c\u6700\u8fd1\u90bb\u7684\u70b9\u4e00\u5b9a\u5728\u8fd9\u4e2a\u8d85\u7403\u4f53\u5185\u90e8\u3002\u7136\u540e\u8fd4\u56de\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u68c0\u67e5\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u5305\u542b\u7684\u8d85\u77e9\u5f62\u4f53\u662f\u5426\u548c\u8d85\u7403\u4f53\u76f8\u4ea4\uff0c\u5982\u679c\u76f8\u4ea4\u5c31\u5230\u8fd9\u4e2a\u5b50\u8282\u70b9\u5bfb\u627e\u662f\u5426\u6709\u66f4\u52a0\u8fd1\u7684\u8fd1\u90bb,\u6709\u7684\u8bdd \u5c31\u66f4\u65b0\u6700\u8fd1\u90bb\u3002\u5982\u679c\u4e0d\u76f8\u4ea4\u90a3\u5c31\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5728\u53e6\u4e00 \u4e2a\u5b50\u6811\u7ee7\u7eed\u641c\u7d22\u6700\u8fd1\u90bb\u3002\u5f53\u56de\u6eaf\u5230\u6839\u8282\u70b9\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u6b64\u65f6\u4fdd\u5b58\u7684\u6700\u8fd1\u90bb\u8282\u70b9 \u5c31\u662f\u6700\u7ec8\u7684\u6700\u8fd1\u90bb\u3002 \u5047\u8bbe\u6837\u672c\u96c6\u4e3a\uff1a{(2,3), (5,4), (9,6), (4,7), (8,1), (7,2)}\u3002\u6784\u5efa\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p>\uff081\uff09\u786e\u5b9asplit\u57df\uff0c6\u4e2a\u6570\u636e\u70b9\u5728x,y\u7ef4\u5ea6\u4e0a\u7684\u6570\u636e\u65b9\u5dee\u5206\u522b\u4e3a39, 28.63\u3002\u5728x\u8f74\u4e0a\u65b9\u5dee\u6700\u5927\uff0c\u6240\u4ee5split\u57df\u503c\u4e3a0\uff08x\u7ef4\u7684\u5e8f\u53f7\u4e3a0\uff09</p> <p>\uff082\uff09\u786e\u5b9a\u5206\u88c2\u8282\u70b9\uff0c\u6839\u636ex\u7ef4\u4e0a\u7684\u503c\u5c06\u6570\u636e\u6392\u5e8f\uff0c\u52196\u4e2a\u6570\u636e\u70b9\u518d\u6392\u5e8f\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\u636e\u70b9\u4e3a(7,2)\uff0c\u8be5\u7ed3\u70b9\u5c31\u662f\u5206\u5272\u8d85\u5e73\u9762\u5c31\u662f\u901a\u8fc7(7,2)\u5e76\u5782\u76f4\u4e8esplit=0(x)\u8f74\u7684\u76f4\u7ebfx=7</p> <p>\uff083\uff09\u5de6\u5b50\u7a7a\u95f4\u548c\u53f3\u5b50\u7a7a\u95f4\uff0c\u5206\u5272\u8d85\u9762x=7\u5c06\u6574\u4e2a\u7a7a\u95f4\u6c1b\u56f4\u4e24\u90e8\u5206\uff0cx&lt;=7\u7684\u90e8\u5206\u4e3a\u5de6\u5b50\u7a7a\u95f4\uff0c\u5305\u542b3\u4e2a\u6570\u636e\u70b9{(2,3), (5,4), (4,7)}\uff1b\u53e6\u4e00\u90e8\u5206\u4e3a\u53f3\u5b50\u7a7a\u95f4\uff0c\u5305\u542b2\u4e2a\u6570\u636e\u70b9{(9,6), (8,1)}\u3002</p> <p>\uff084\uff09\u5206\u522b\u5bf9\u5de6\u5b50\u7a7a\u95f4\u4e2d\u7684\u6570\u636e\u70b9\u548c\u53f3\u5b50\u7a7a\u95f4\u4e2d\u7684\u6570\u636e\u70b9\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u6784\u5efa\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u76f4\u5230\u7ecf\u8fc7\u5212\u5206\u7684\u5b50\u6837\u672c\u96c6\u4e3a\u7a7a\u3002</p> <p></p> <p>\u6211\u4eec\u6765\u67e5\u627e\u70b9(2.1,3.1)\uff0c\u5728(7,2)\u70b9\u6d4b\u8bd5\u5230\u8fbe(5,4)\uff0c\u5728(5,4)\u70b9\u6d4b\u8bd5\u5230\u8fbe(2,3)\uff0c\u7136\u540esearch_path\u4e2d\u7684\u7ed3\u70b9\u4e3a&lt;(7,2), (5,4), (2,3)&gt;\uff0c\u4ecesearch_path\u4e2d\u53d6\u51fa(2,3)\u4f5c\u4e3a\u5f53\u524d\u6700\u4f73\u7ed3\u70b9nearest, dist\u4e3a0.141\uff1b</p> <p>\u7136\u540e\u56de\u6eaf\u81f3(5,4)\uff0c\u4ee5(2.1,3.1)\u4e3a\u5706\u5fc3\uff0c\u4ee5dist=0.141\u4e3a\u534a\u5f84\u753b\u4e00\u4e2a\u5706\uff0c\u5e76\u4e0d\u548c\u8d85\u5e73\u9762y=4\u76f8\u4ea4\uff0c\u5982\u4e0b\u56fe\uff0c\u6240\u4ee5\u4e0d\u5fc5\u8df3\u5230\u7ed3\u70b9(5,4)\u7684\u53f3\u5b50\u7a7a\u95f4\u53bb\u641c\u7d22\uff0c\u56e0\u4e3a\u53f3\u5b50\u7a7a\u95f4\u4e2d\u4e0d\u53ef\u80fd\u6709\u66f4\u8fd1\u6837\u672c\u70b9\u4e86\u3002</p> <p></p> <p>\u4e8e\u662f\u5728\u56de\u6eaf\u81f3(7,2)\uff0c\u540c\u7406\uff0c\u4ee5(2.1,3.1)\u4e3a\u5706\u5fc3\uff0c\u4ee5dist=0.141\u4e3a\u534a\u5f84\u753b\u4e00\u4e2a\u5706\u5e76\u4e0d\u548c\u8d85\u5e73\u9762x=7\u76f8\u4ea4\uff0c\u6240\u4ee5\u4e5f\u4e0d\u7528\u8df3\u5230\u7ed3\u70b9(7,2)\u7684\u53f3\u5b50\u7a7a\u95f4\u53bb\u641c\u7d22\u3002</p> <p>\u81f3\u6b64\uff0csearch_path\u4e3a\u7a7a\uff0c\u7ed3\u675f\u6574\u4e2a\u641c\u7d22\uff0c\u8fd4\u56denearest(2,3)\u4f5c\u4e3a(2.1,3.1)\u7684\u6700\u8fd1\u90bb\u70b9\uff0c\u6700\u8fd1\u8ddd\u79bb\u4e3a0.141\u3002</p> <p>\u518d\u4e3e\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u6765\u67e5\u627e\u70b9(2,4.5)\uff0c\u5728(7,2)\u5904\u6d4b\u8bd5\u5230\u8fbe(5,4)\uff0c\u5728(5,4)\u5904\u6d4b\u8bd5\u5230\u8fbe(4,7)\uff0c\u7136\u540esearch_path\u4e2d\u7684\u7ed3\u70b9\u4e3a&lt;(7,2), (5,4), (4,7)&gt;\uff0c\u4ecesearch_path\u4e2d\u53d6\u51fa(4,7)\u4f5c\u4e3a\u5f53\u524d\u6700\u4f73\u7ed3\u70b9nearest, dist\u4e3a3.202\uff1b</p> <p>\u7136\u540e\u56de\u6eaf\u81f3(5,4)\uff0c\u4ee5(2,4.5)\u4e3a\u5706\u5fc3\uff0c\u4ee5dist=3.202\u4e3a\u534a\u5f84\u753b\u4e00\u4e2a\u5706\u4e0e\u8d85\u5e73\u9762y=4\u76f8\u4ea4\uff0c\u5982\u4e0b\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u5230(5,4)\u7684\u5de6\u5b50\u7a7a\u95f4\u53bb\u641c\u7d22\u3002\u6240\u4ee5\u8981\u5c06(2,3)\u52a0\u5165\u5230search_path\u4e2d\uff0c\u73b0\u5728search_path\u4e2d\u7684\u7ed3\u70b9\u4e3a&lt;(7,2), (2, 3)&gt;\uff1b\u53e6\u5916\uff0c(5,4)\u4e0e(2,4.5)\u7684\u8ddd\u79bb\u4e3a3.04 &lt; dist = 3.202\uff0c\u6240\u4ee5\u5c06(5,4)\u8d4b\u7ed9nearest\uff0c\u5e76\u4e14dist=3.04\u3002</p> <p></p> <p>\u56de\u6eaf\u81f3(2,3)\uff0c(2,3)\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u5e73\u5224\u65ad(2,3)\u662f\u5426\u79bb(2,4.5)\u66f4\u8fd1\uff0c\u8ba1\u7b97\u5f97\u5230\u8ddd\u79bb\u4e3a1.5\uff0c\u6240\u4ee5nearest\u66f4\u65b0\u4e3a(2,3)\uff0cdist\u66f4\u65b0\u4e3a(1.5)</p> <p>\u56de\u6eaf\u81f3(7,2)\uff0c\u540c\u7406\uff0c\u4ee5(2,4.5)\u4e3a\u5706\u5fc3\uff0c\u4ee5dist=1.5\u4e3a\u534a\u5f84\u753b\u4e00\u4e2a\u5706\u5e76\u4e0d\u548c\u8d85\u5e73\u9762x=7\u76f8\u4ea4, \u6240\u4ee5\u4e0d\u7528\u8df3\u5230\u7ed3\u70b9(7,2)\u7684\u53f3\u5b50\u7a7a\u95f4\u53bb\u641c\u7d22\u3002</p> <p>\u81f3\u6b64\uff0csearch_path\u4e3a\u7a7a\uff0c\u7ed3\u675f\u6574\u4e2a\u641c\u7d22\uff0c\u8fd4\u56denearest(2,3)\u4f5c\u4e3a(2,4.5)\u7684\u6700\u8fd1\u90bb\u70b9\uff0c\u6700\u8fd1\u8ddd\u79bb\u4e3a1.5\u3002</p>"},{"location":"Statistics/TSA-Reviewing/","title":"Time Series Analysis","text":""},{"location":"Statistics/TSA-Reviewing/#ch-1","title":"Ch 1","text":"<p>\u5e73\u7a33\u5e8f\u5217\u7684\u5b9a\u4e49\u3001\u4f1a\u8bc1\u5e73\u7a33\u5e8f\u5217</p> <p>\u5e38\u89c1\u7684\u5e73\u7a33\u5e8f\u5217\uff1a\u7ebf\u6027\u548c\u3001\u8c03\u548c\u5e73\u7a33\u5e8f\u5217\uff08\u51b3\u5b9a\u6027\u7684\uff09</p> <p>\u81ea\u534f\u65b9\u5dee\u51fd\u6570\u7684\u6027\u8d28\uff1a\u5bf9\u79f0\u6027\u3001\u975e\u8d1f\u5b9a\uff08\u4ec0\u4e48\u65f6\u5019\u6b63\u5b9a\uff1a\u8d8b\u4e8e0\uff0c..\uff09\u3001\u6709\u754c\u6027</p> <p>Cauchy-Schwarz \u4e0d\u7b49\u5f0f</p> <p>\u534f\u65b9\u5dee\u77e9\u9635\u7684\u4e00\u4e9b\u6027\u8d28</p> <p>\u767d\u566a\u58f0\uff08\u8c31\u5bc6\u5ea6\u662f\u5e38\u6570\uff09</p> <p>\u6b63\u4ea4\u3001\u4e0d\u76f8\u5173\uff08\u96f6\u5747\u503c \u6b63\u4ea4\u7b49\u4ef7\u4e8e\u4e0d\u76f8\u5173\uff09</p> <p>\u5e73\u7a33\u5e8f\u5217\u7684\u548c\u3001\u4e58\u79ef\uff08\u72ec\u7acb\u624d\u8fd8\u662f\u5e73\u7a33\u5e8f\u5217\uff0c\u4eceE\u7684\u89d2\u5ea6\uff09</p>"},{"location":"Statistics/TSA-Reviewing/#_1","title":"\u5e73\u7a33\u5e8f\u5217","text":"<p>\u63a7\u5236\u6536\u655b\u5b9a\u7406\u3001\u5355\u8c03\u6536\u655b\u5b9a\u7406</p> <p>\u7edd\u5bf9\u53ef\u548c\uff1aL1\u6536\u655b\uff0ca.s.\u6536\u655b</p> <p>\u5e73\u65b9\u53ef\u548c\uff1aL2\u6536\u655b</p> <p>\u4e86\u89e3\u4e00\u4e0b\u4e25\u5e73\u7a33\u5e8f\u5217\u7684\u4e00\u7cfb\u5217\u5185\u5bb9</p>"},{"location":"Statistics/TSA-Reviewing/#_2","title":"\u8c31\u51fd\u6570","text":"<p>\u8c31\u5206\u5e03\u51fd\u6570\u548c\u81ea\u534f\u65b9\u5dee\u51fd\u6570\u662f\u4e00\u4e00\u5bf9\u5e94\u7684</p> <p>\u5e73\u7a33\u5e8f\u5217\u4e00\u5b9a\u6709\u8c31\u5206\u5e03\u51fd\u6570</p> <p>\u7ebf\u6027\u5e73\u7a33\u5e8f\u5217\uff08\u548c\u5f0f\uff09\u7684\u8c31\u5bc6\u5ea6\uff0c\u5e38\u5e38\u628a e^{i\\lambda} \u8bb0\u6210 z \u8ba1\u7b97\u65b9\u4fbf</p> <p>\u76f8\u4e92\u6b63\u4ea4+\u5e38\u6570\uff1a\u8c31\u5206\u5e03\u51fd\u6570 \u8c31\u5bc6\u5ea6\u51fd\u6570 \u90fd\u662f\u7ebf\u6027\u7684</p>"},{"location":"Statistics/TSA-Reviewing/#ch-2","title":"Ch 2","text":"<p>\u9f50\u6b21\u5e38\u7cfb\u6570\u7ebf\u6027\u5dee\u5206\u65b9\u7a0b</p> <p>\u4f1a\u53d9\u8ff0\u4ec0\u4e48\u662fAR(p)\u6a21\u578b\uff1a\u767d\u566a\u58f0\u3001\u6700\u5c0f\u76f8\u4f4d\u6761\u4ef6\u3001\u5dee\u5206\u65b9\u7a0b</p> <p>\u5e73\u7a33\u89e3\uff1aA(z)\u7684Taylor\u5c55\u5f00\uff0c\u4e5f\u53ef\u4ee5\u7528Wold\u7cfb\u6570</p> <p>\u8c31\u5bc6\u5ea6\u51fd\u6570</p> <p>\u81ea\u534f\u65b9\u5dee\u51fd\u6570\u548c\u8c31\u5bc6\u5ea6\u51fd\u6570\u7684\u5173\u7cfb\uff08\u8bb0\u5f97 \\gamma_{-k} = \\gamma_k\uff09</p> <p>\u8981\u60f3\u8ba1\u7b97 AR(p) \u7684\u534f\u65b9\u5dee\u51fd\u6570\uff0c\u7528Yule-Walker\u65b9\u7a0b\uff0c\u7ecf\u5e38\u7528\u63a8\u8bba\uff1b\u81ea\u56de\u5f52\u7cfb\u6570\u600e\u4e48\u7b97</p> <p>\u504f\u76f8\u5173\u7cfb\u6570\uff0cp\u540e\u622a\u5c3e\u7684</p> <p>\u4e0d\u7528\u8bb0Levinson\u9012\u63a8</p> <p>\u8003\u8bd5\u7b2c\u4e00\u9898\uff0c\u76f4\u63a5\u7528\u89e3\u65b9\u7a0b\u66f4\u52a0\u65b9\u4fbf</p> <p>AR(p) \u5145\u8981\u6761\u4ef6\uff1a\u504f\u76f8\u5173\u7cfb\u6570 a_{n,n} p\u622a\u5c3e</p>"},{"location":"Statistics/TSA-Reviewing/#ch-3","title":"Ch 3","text":"<p>\u8981\u4f1a\u8bc1\uff1aMA(q) \u7684\u5145\u8981\u6761\u4ef6\uff1a\u81ea\u534f\u65b9\u5dee\u51fd\u6570\u662f q\u540e\u622a\u5c3e\u7684</p> <p>\u5b9a\u4e49\uff1a\u767d\u566a\u58f0\u3001\u4e0d\u5728\u5355\u4f4d\u5706\u5185-\u4fdd\u8bc1MA(q)\u7684\u552f\u4e00\u6027\u3001\u6ed1\u52a8\u5e73\u5747\u65b9\u7a0b</p> <p>\u53ef\u9006\u7684\uff1a\u5728\u5355\u4f4d\u5706\u5916</p> <p>\u5012\u8fc7\u6765\u7684\u57fa\u672c\u601d\u60f3\uff1a\u628a\u8c31\u5bc6\u5ea6\u51fd\u6570\u5012\u8fc7\u6765\uff0c\u7136\u540e\u518d\u51d1/MA(1) \u53ef\u4ee5\u8bbe\u7cfb\u6570\u7136\u540e\u5f85\u5b9a\u7cfb\u6570\u89e3\u65b9\u7a0b</p> <p></p> <p>2 \u53ef\u4ee5\u4e0d\u7528\u9012\u63a8\uff1f</p> <p>3 \u6709\u4ec0\u4e48\u7b80\u5355\u7684\u65b9\u6cd5\uff1f</p> <p>4 X_t = \\epsilon_t + b\\epsilon_{t-1}\uff0c\u6709 (1 + b^2)\\sigma^2 = 1, b\\sigma^2 = \\rho\uff0c\u6709\u89e3\uff0c\\Delta\\geq 0\u3002</p> <p>\u6216 E(X_t - yX_{t-1})^2\\geq 0, \\forall y\u3002</p> <p>5  (1 + b^2)\\sigma^2 = 1, b\\sigma^2 = \\rho</p> <p>eg</p>  \\gamma_0 = 1.2\\\\ \\gamma_k = 0.9\\gamma_{k-1} - 0.1\\gamma_{k-2},k\\geq 1  <p>\u6c42\u8bc1AR(2)\uff0c\u5e76\u7ed9\u51faAR(2)\u6a21\u578b</p> <p>\u89e3\uff1a</p>  \u4ee4 \\varepsilon_t = X_t - 0.9X_{t-1} + 0.2X_{t-2}\uff0c\u8bc1\u5b83\u662f\u767d\u566a\u58f0  <p>\u6cd52\uff1a\u7b97\u51fa \\{\\gamma_k\\}\uff0c\u518d\u63a8\u8c31\u5bc6\u5ea6\u51fd\u6570</p>"},{"location":"Statistics/TSA-Reviewing/#armapq","title":"ARMA(p,q)","text":"<p>\u53d9\u8ff0\uff1a\u6ca1\u6709\u516c\u5171\u6839\u3001\u5355\u4f4d\u5706\u5916\u3001\u4e0d\u5728\u5355\u4f4d\u5706\u5185\uff0c\u5dee\u5206\u65b9\u7a0b</p> <p>\u901a\u89e3\u3001\u5e73\u7a33\u89e3</p> <p>\u4e00\u822c\u7b97\u5230 \\psi(2) \u5c31\u884c\uff0c\u5982\u679c\u76f4\u63a5\u8981\u6c42\u7b97\u7cfb\u6570\u90a3\u5c31\u76f4\u63a5\u7ea7\u6570\u5c55\u5f00/\u9012\u63a8</p> <p>\u5ef6\u62d3\u7684YW\u65b9\u7a0b\uff0c\u7b97\u81ea\u56de\u5f52\u7cfb\u6570\uff0c\u8981\u8bc1\u77e9\u9635\u662f\u6b63\u5b9a\u7684</p> <p>\u8003\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u5f15\u74062.2\uff0c\u6765\u8bc1\u6b63\u5b9a</p> <p>\u8981\u4f1a\u8bc1 \\Gamma_{m,q} \u53ef\u9006</p> <p>\u5982\u679c\u5df2\u7ecf\u6709\u4e86AR\u90e8\u5206\uff0cMA\u600e\u4e48\u8bc1\uff1f\u5b9a\u74062.4</p> <p>\u8c31\u5bc6\u5ea6\u51fd\u6570</p> <p>\u53ef\u9006\u7684ARMA\u6a21\u578b</p> <p>eg \u5c0f\u6d4b\u7b2c\u4e00\u9898</p> <p>\u6cd51</p>  \\psi(z) = \\frac{1-2bz}{1-bz} = 2-\\frac{1}{1-bz} = 1-bz-b^2z^2\\cdots\\\\ \\Rightarrow \\psi_0 = 1, \\psi_j = -b^j,j\\geq 1\\\\ \\Rightarrow \\gamma_j  <p>\u6cd52</p> <p>\u4e24\u8fb9\u540c\u4e58 X_t,X_{t-1}</p>  \\begin{cases} \\gamma_0 - b\\gamma_1 = 1 + 2b^2\\\\ \\gamma_1 - b\\gamma_0 = -2b\\\\ \\gamma_k - b\\gamma_{k-1} = 0, k\\geq 2 \\end{cases}  <p>\u7528YW\u65b9\u7a0b</p> <p>\u6cd53</p> <p>\u76f4\u63a5\u7b97 \\gamma_0 = EX_t^2,\\gamma_1 = EX_tX_{t-1}\u3002</p>"},{"location":"Statistics/TSA-Reviewing/#ch-4","title":"Ch 4","text":""},{"location":"Statistics/TSA-Reviewing/#_3","title":"\u5747\u503c\u7684\u4f30\u8ba1","text":"<p>\u8981\u4f1a\u8bc1\u660e\u662f\u76f8\u5408\u4f30\u8ba1\uff0c\\bar{X} \u7684\u65b9\u5dee</p> <p>\u5c0f\u6d4b\u7b2c\u4e8c\u9898</p>  (1-a)\\sum_{t=1}^N X_t-aX_0 + aX_N = \\sum_{t=1}^N \\varepsilon_t  <p>\u518d\u540c\u9664 \\sqrt{N}\u3002</p> <p>\u5982\u679c\u53f3\u8fb9\u518d\u53d8\u6210 \\sum_{t=1}^N (\\varepsilon_t + b\\varepsilon_t)\uff0c\u5c31\u628a\u53f3\u8fb9\u4e5f\u50cf\u5de6\u8fb9\u4e00\u6837\u62c6\u62c6</p> <p>\u5b9a\u7406 CLT \u4e0d\u7528\u77e5\u9053\u7684</p>"},{"location":"Statistics/TSA-Reviewing/#_4","title":"\u81ea\u534f\u65b9\u5dee\u51fd\u6570","text":"<p>\u81ea\u534f\u65b9\u5dee\u51fd\u6570\u7684\u4f30\u8ba1\u516c\u5f0f\u8981\u4f1a\u5199</p> <p>\u6837\u672c\u81ea\u534f\u65b9\u5dee\u77e9\u9635\u662f\u6b63\u5b9a\u7684</p> <p>\u8981\u4f1a\u8bc1\u76f8\u5408\u6027\uff0c\u5373\u6e10\u8fdb\u65e0\u504f\u6027</p> <p>\u8981\u77e5\u9053MA(1)\u548c\u767d\u566a\u58f0\u7684\u4e24\u4e2a\u60c5\u51b5 \uff0c\u5b9a\u7406\u4e0d\u7528\u770b\uff1b\u4e3b\u8981\u5f04\u5728\u5361\u65b90\u7684\u68c0\u9a8c?</p>"},{"location":"Statistics/TSA-Reviewing/#chi2chi2","title":"\u767d\u566a\u58f0\u7684 \\chi^2 \u68c0\u9a8c","text":""},{"location":"Statistics/TSA-Reviewing/#_5","title":"\u6837\u672c\u81ea\u76f8\u5173\u7f6e\u4fe1\u533a\u95f4\u68c0\u9a8c\u6cd5","text":""},{"location":"Statistics/TSA-Reviewing/#ch-5","title":"Ch 5","text":""},{"location":"Statistics/TSA-Reviewing/#_6","title":"\u9884\u6d4b\u7684\u6982\u5ff5\u548c\u6027\u8d28","text":"<p>\u53d9\u8ff0\u6982\u5ff5</p> <p>\u8981\u8bb0\u4f4f \\boldsymbol{X} = (X_1, \\cdots, X_n)' \u8fd8\u662f\u53cd\u7740\u7684\uff0c\u8fd9\u4f1a\u5bfc\u81f4 a'X \u6709\u533a\u522b\u3002</p> <p>\u6700\u4f73\u7ebf\u6027\u9884\u6d4b\u7684\u8bb8\u591a\u6027\u8d28</p> <p>Hilbert\u7a7a\u95f4\u4e0d\u63d0\uff0c\u4e0d\u7528\u7ba1\u6295\u5f71\u7b97\u5b50</p> <p>\u6700\u4f73\u9884\u6d4b</p>"},{"location":"Statistics/TSA-Reviewing/#_7","title":"\u51b3\u5b9a\u6027\u5e73\u7a33\u5e8f\u5217\u3001\u975e\u51b3\u5b9a\u6027\u3001\u7eaf\u975e\u51b3\u5b9a\u6027","text":"\\begin{aligned} \\sigma_1^2 &amp;= \\lim_{m\\to \\infty} \\mathrm{E}(X_{n+k}-L(X_{n+k}|\\boldsymbol{X}_{n,m}))\\\\ &amp;= \\mathrm{E}(X_{n+k}-L(X_{n+k}|H_n))\\\\ &amp;= \\mathrm{E}(X_{n+k}-L(X_{n+k}|X_k,k\\leq n))\\\\ \\end{aligned}  <p>\u5355\u8c03\u9012\u589e</p>"},{"location":"Statistics/TSA-Reviewing/#ar-ma-arma","title":"AR MA ARMA","text":"<p>\u65f6\u95f4\u5e8f\u5217\u7684\u9012\u63a8\u9884\u62a5\u516c\u5f0f\uff1a\u8bc1\u660e\u7684\u601d\u8def\u8981\u5f04\u6e05\u695a\uff1a\u5b9a\u74063.1</p> <p>\u6784\u9020\u65b0\u606f\u5e8f\u5217\uff0c\u6837\u672c\u65b0\u606f\u5e8f\u5217\u662f\u6b63\u4ea4\u7684\uff0c\u7b49\u4ef7\u4e8e\u7528\u5b83\u6765\u9884\u6d4b</p> <p>\u8981\u4f1a\u8bc1\u65b0\u606f\u9884\u6d4b\u3001\u9012\u63a8\u516c\u5f0f</p> <p>\u6bd4\u8f83\u7b80\u5355\u7684\u7cfb\u6570 \\theta_{11} \u7b49\uff0c\u8981\u4f1a\u63a8\u5bfc</p> <p>\u4f8b\u5b50\uff1a\u4e60\u98984 P183 4.4</p> <p></p>  \\begin{aligned} \\lim_{k\\to \\infty}\\lim_{n\\to \\infty} E(L(X_{n+k}|X_{n}, X_{n-1}, \\cdots, X_1))  &amp;= \\lim_{k\\to \\infty}\\lim_{n\\to \\infty} E(L(X_{k}|X_{0}, X_{-1}, \\cdots, X_{1-n}))\\\\ &amp;= \\lim_{k\\to \\infty} E(L(X_{k}|H_0))\\\\ &amp;= \\lim_{k\\to \\infty} E(L(X_{k}|\\epsilon_0, \\cdots))\\\\ &amp;= \\lim_{k\\to \\infty} \\sum_{j=k}^\\infty \\psi_jE\\epsilon_{k-j}^2\\\\ &amp;= \\lim_{k\\to \\infty} \\sum_{j=k}^\\infty \\psi_j\\sigma^2\\\\ &amp;= 0 \\end{aligned}  <p>\u7b2c\u4e00\u6b65\uff0c\u867d\u7136\u7ebf\u6027\u9884\u6d4b\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4f46\u662f\u6570\u5b66\u671f\u671b\u7684\u5e73\u65b9\u662f\u4e00\u6837\u7684:\u5982\u679c\u4ed4\u7ec6\u8bf4\u660e\u5c31\u6309\u7167\u5b9a\u74062.1\u7684\u5199\u6cd5\u63d2\u5165\u4e00\u4e9b</p> <p>(2) \u540c\u7406 \\psi_0E\\epsilon_1^2 = \\sigma^2 </p>"},{"location":"Statistics/TSA-Reviewing/#ch-6","title":"Ch 6","text":"<p>\u53d9\u8ff0 AR \u7684YW\u4f30\u8ba1\u3001\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u3001MLE</p> <p>\u7528\u540e\u9762MA(q)\u90a3\u91cc\u7684\u5f62\u5f0f\u53d9\u8ff0\u5b9a\u9636 \u4e3b\u8981\u662fAIC BIC\u5b9a\u9636</p> <p>\u8981\u77e5\u9053\u9006\u76f8\u5173\u51fd\u6570\u600e\u4e48\u5b9a\u4e49\uff0c\u7b80\u5355\u53d9\u8ff0ARp \u8c31\u5bc6\u5ea6\u51fd\u6570\u76f4\u63a5\u7684\u5173\u7cfb\uff0c\u9006\u76f8\u5173\u51fd\u6570\u548c\u81ea\u76f8\u5173\u51fd\u6570\u7684\u5173\u7cfb</p> <p>\u9006\u76f8\u5173\u51fd\u6570\u7684\u53d9\u8ff0\u8fc7\u7a0b\u770b\u7684\u61c2\u5c31\u597d</p> <p>\u8003\u7684\u6bd4\u8f83\u591a\u7684\uff1aMA\u65b0\u606f\u4f30\u8ba1</p> <p>AIC BIC \u5b9a\u9636</p> <p>ARMA</p> <p>\u77e9\u6cd5\u4f30\u8ba1\uff1a\u5ef6\u62d3YW\u65b9\u7a0b\u3001MA(q)\u9700\u8981\u7528\u5230\u81ea\u534f\u65b9\u5dee\u4f30\u8ba1\uff1f</p> <p>\u81ea\u56de\u5f52\u903c\u8fd1\u6cd5</p> <p>MLE</p> <p>\u9012\u63a8\u516c\u5f0f\u4e0d\u7528\u80cc</p> <p>ARMA\u5c31\u7b97\u4e86</p>"},{"location":"Statistics/perceptron/","title":"\u611f\u77e5\u673a Perceptron","text":"<p>\u6734\u7d20\u7684\u611f\u77e5\u673a\u7528\u4e8e\u89e3\u51b3\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u662f\u4e00\u79cd\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\uff0c\u5c5e\u4e8e\u5224\u522b\u6a21\u578b\u3002</p> <p>\u8f93\u5165\u7a7a\u95f4\uff1a\\mathcal{X}\\subset \\mathbb{R}^n\uff1b\u8f93\u51fa\u7a7a\u95f4\uff1a\\mathcal{Y} = \\{+1, -1\\}\u3002</p> <p>\u8f93\u5165 x\\in\\mathcal{X} \u8868\u793a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u4e2d\u7684\u70b9\uff1b\u8f93\u51fa y\\in\\mathcal{Y} \u8868\u793a x \u5bf9\u5e94\u7684\u7c7b\u522b\u3002</p>"},{"location":"Statistics/perceptron/#22","title":"\u4e60\u98982.2","text":"<p>\u6a21\u4eff\u4f8b\u98982.1\uff0c\u6784\u5efa\u4ece\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u6c42\u89e3\u611f\u77e5\u673a\u6a21\u578b\u7684\u4f8b\u5b50\u3002</p> <p>\u4e0d\u59a8\u5047\u8bbe\u67d0\u6570\u636e\u96c6\u4e2d\uff0c\u6b63\u5b9e\u4f8b\u70b9\u4e3ax_1 = (2, 2)^T, x_2 = (0, -1)^T\uff0c\u8d1f\u5b9e\u4f8b\u70b9\u4e3ax_3 = (1, 4)^T, x_4 = (3, 2)^T\u3002\u73b0\u4f7f\u7528\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u539f\u59cb\u5f62\u5f0f\u6c42\u89e3\u611f\u77e5\u673a\u6a21\u578bf(x) = {\\rm sign}(\\omega\\cdot x + b)\uff0c\u5176\u4e2d\\omega = (\\omega^{(1)}, \\omega^{(2)})^T, x = (x^{(1)}, x^{(2)})^T\u3002</p> <p>\u6784\u5efa\u6700\u4f18\u5316\u95ee\u9898\uff1a $$ \\min_{\\omega, b}L(\\omega, b) = -\\sum_{x_i\\in M}y_i(\\omega\\cdot x_i + b) $$ \u5176\u4e2dM\u4e3a\u8bef\u5206\u7c7b\u70b9\u96c6\u3002</p> <ol> <li> <p>\u53d6\u521d\u503c\\omega_0 = (0, 0)^T, b_0 = 0\u3002\u53d6\u6b65\u957f\\eta = 1\u3002</p> </li> <li> <p>\u5bf9\u4e8ex_1 = (2, 2)^T \uff0cy_1(\\omega_0\\cdot x_1+b_0) = 0 \\leq 0\uff0c\u672a\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u66f4\u65b0\\omega, b    $$    \\omega_1 = \\omega_0 + \\eta x_1y_1 = (2, 2)^T, b_1 = b_0 + \\eta y_1 = 1    $$    \u5f97\u5230\u7ebf\u6027\u6a21\u578b    $$    \\omega_1\\cdot x + b_1 = 2x^{(1)} + 2x^{(2)} + 1    $$</p> </li> <li> <p>\u5bf9\u4e8ex_1 = (2, 2)^T\uff0cy_1(\\omega_1\\cdot x_1 + b_1) = 9 &gt; 0\uff0c\u88ab\u6b63\u786e\u5206\u7c7b\uff1b</p> </li> <li> <p>\u5bf9\u4e8ex_2 = (0, -1)^T\uff0cy_2(\\omega_1\\cdot x_2 + b_1) = -1 \\leq 0\uff0c\u672a\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u66f4\u65b0\\omega, b    $$    \\omega_2 = \\omega_1 + \\eta x_2y_2 = (2, 1)^T, b_2 = b_1 + \\eta y_2 = 2    $$    \u5f97\u5230\u7ebf\u6027\u6a21\u578b    $$    \\omega_2\\cdot x + b_2 = 2x^{(1)} + x^{(2)} + 2    $$</p> </li> <li> <p>\u5bf9\u4e8ex_1 = (2, 2)^T\uff0cy_1(\\omega_2\\cdot x_1 + b_2) = 8 &gt; 0\uff0c\u88ab\u6b63\u786e\u5206\u7c7b\uff1b</p> </li> </ol> <p>\u5bf9\u4e8ex_2 = (0, -1)^T\uff0cy_2(\\omega_2\\cdot x_2 + b_2) = 1 &gt; 0\uff0c\u88ab\u6b63\u786e\u5206\u7c7b\uff1b</p> <p>\u5bf9\u4e8ex_3 = (1, 4)^T\uff0cy_3(\\omega_2\\cdot x_3 + b_2) = -8 \\leq 0\uff0c\u672a\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u66f4\u65b0\\omega, b    $$    \\omega_3 = \\omega_2 + \\eta x_3y_3 = (1, -3)^T, b_3 = b_2 + \\eta y_3 = 1    $$</p> <p>\u5f97\u5230\u7ebf\u6027\u6a21\u578b    $$    \\omega_3\\cdot x + b_3 = x^{(1)} - 3x^{(2)} + 1    $$</p> <ol> <li>\u5bf9\u4e8ex_1 = (2, 2)^T\uff0cy_1(\\omega_3\\cdot x_1 + b_3) = -3 \\leq 0\uff0c\u672a\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u66f4\u65b0\\omega, b</li> </ol> <p>$$    \\omega_4 = \\omega_3 + \\eta x_1y_1 = (3, -1)^T, b_4 = b_3 + \\eta y_1 = 2    $$</p> <p>\u5f97\u5230\u7ebf\u6027\u6a21\u578b    $$    \\omega_4\\cdot x + b_4 = 3x^{(1)} - 1x^{(2)} + 2    $$</p> <ol> <li>\u5bf9\u4e8ex_1 = (2, 2)^T\uff0cy_1(\\omega_4\\cdot x_1 + b_4) = 6 &gt; 0\uff0c\u88ab\u6b63\u786e\u5206\u7c7b\uff1b</li> </ol> <p>\u5bf9\u4e8ex_2 = (0, -1)^T\uff0cy_2(\\omega_4\\cdot x_2 + b_4) = 3 &gt; 0\uff0c\u88ab\u6b63\u786e\u5206\u7c7b\uff1b</p> <p>\u5bf9\u4e8ex_3 = (1, 4)^T\uff0cy_3(\\omega_4\\cdot x_3 + b_4) = -1 \\leq 0\uff0c\u672a\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u66f4\u65b0\\omega, b    $$    \\omega_5 = \\omega_4 + \\eta x_3y_3 = (2, -5)^T, b_5 = b_4 + \\eta y_3 = 1    $$</p> <p>\u5f97\u5230\u7ebf\u6027\u6a21\u578b    $$    \\omega_5\\cdot x + b_5 = 2x^{(1)} - 5x^{(2)} + 1    $$</p> <ol> <li>\u5faa\u73af\u4ee5\u4e0a\u8fc7\u7a0b\uff0c\u5229\u7528\u4ee3\u7801\uff08\u4e0b\u9644\uff09\u7b97\u51fa\\omega_{139} = (-2, -5), b_{139} = 15\uff0c\u5f97\u5230\u7ebf\u6027\u6a21\u578b    $$    \\omega_{139}\\cdot x + b_{139} = -2x^{(1)} - 5x^{(2)} + 15    $$</li> </ol> <p>\u5bf9\u4e8e\u6240\u6709\u6570\u636e\u70b9y_i(\\omega_{139}\\cdot x_i + b_{139})&gt;0\uff0c\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\uff0c\u635f\u5931\u51fd\u6570\u8fbe\u5230\u6781\u5c0f\u3002</p> <p>\u5206\u79bb\u8d85\u5e73\u9762\u4e3a\uff1a-2x^{(1)} - 5x^{(2)} + 15 = 0</p> <p>\u611f\u77e5\u673a\u6a21\u578b\u4e3a\uff1af(x) = {\\rm sign}(-2x^{(1)} - 5x^{(2)} + 15)</p> <p></p>"},{"location":"Statistics/perceptron/#23","title":"\u4e60\u9898 2.3","text":"<p>\u8bc1\u660e\u4ee5\u4e0b\u5b9a\u7406\uff1a\u6837\u672c\u96c6\u7ebf\u6027\u53ef\u5206\u7684\u5145\u8981\u6761\u4ef6\u662f\u6b63\u5b9e\u4f8b\u70b9\u96c6\u6240\u6784\u6210\u7684\u51f8\u58f3\u4e0e\u8d1f\u5b9e\u4f8b\u70b9\u96c6\u6240\u6784\u6210\u7684\u51f8\u58f3\u4e92\u4e0d\u76f8\u4ea4\u3002</p> <p>\u5176\u4e2d\uff0c\u5bf9\u4e8e\\mathbb{R}^n\u4e2d\u70b9\u96c6S = \\{x_1, x_2, .., x_k\\}\u7684\u51f8\u58f3\u5b9a\u4e49\u4e3a $$ {\\rm conv}(S) = {x = \\sum_{i=1}<sup>k\\lambda_ix_i:\\sum_{i=1}</sup>k\\lambda_1 = 1, \\lambda_i \\geq 0, i = 1, 2, .. k} $$</p> <p>\\Longrightarrow\uff1a</p> <p>\u8bbe\u6b63\u5b9e\u4f8b\u70b9\u96c6\u4e3aS_+\uff0c\u8d1f\u5b9e\u4f8b\u70b9\u96c6\u4e3aS_-\u3002\\forall x_+\\in S_+, x_-\\in S_-\uff0c\u7531\u7ebf\u6027\u53ef\u5206\u77e5\\omega\\cdot x_++b&gt;0,\\omega\\cdot x_-+b&lt;0\u3002</p> <p>\u82e5\u4e24\u51f8\u58f3\u76f8\u4ea4\uff0c\u5219\\exists x\\in{\\rm conv}(S_+)\\cap{\\rm conv}(S_-)\u3002</p> <p>\u7531x\\in {\\rm conv}(S_+)\u77e5 $$ \\omega\\cdot x = \\sum_{i=1}^k\\lambda_i(\\omega\\cdot x_i)&gt;-\\sum_{i=1}^kb\\lambda_i=-b $$</p> <p>\u7531x\\in {\\rm conv}(S_-)\u77e5 $$ \\omega\\cdot x = \\sum_{j=1}^k\\lambda_j(\\omega\\cdot x_j)&lt;-\\sum_{j=1}^kb\\lambda_j=-b $$</p> <p>\u4e8c\u5f0f\u77db\u76fe\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728x\\in{\\rm conv}(S_+)\\cap{\\rm conv}(S_-)\uff0c\u5373{\\rm conv}(S_+)\\cap{\\rm conv}(S_-) = \\empty\u3002</p> <p>\\Longleftarrow\uff1a</p> <p>\u7531\u4e24\u70b9\u96c6\u4e0d\u76f8\u4ea4\uff0c\u5219\u5b58\u5728\u4e00\u8d85\u5e73\u9762\u5c06\u4e24\u70b9\u96c6\u5206\u79bb\uff0c\u5373\u5b58\u5728\u8d85\u5e73\u9762\\omega\\cdot x + b = 0\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u51f8\u58f3\u4e2d\u7684\u70b9\u8fdb\u884c\u5206\u79bb\u3002\u800c\u663e\u7136\u5f53\\lambda_i=1,\\lambda_{j\\neq i}=0\u65f6\uff0c\u53ef\u4ee5\u53d6\u5230S_+\u6216S_-\u4e2d\u7684\u6240\u6709\u7684\u70b9x_i\u3002\u5373\u5bf9\u4e8e\u6240\u6709\u7684x_i\uff0c\u90fd\u53ef\u88ab\u8d85\u5e73\u9762\\omega\\cdot x + b = 0\u7ebf\u6027\u5206\u79bb\u3002\u6240\u4ee5\uff0c\u6837\u672c\u96c6\u7ebf\u6027\u53ef\u5206\u3002</p> <p>\u9644 \u4e60\u98982.2\u6240\u7528\u4ee3\u7801</p> <pre><code>dot = [(2, 2), (0, -1), (1, 4), (3, 2)]\ntag = [1, 1, -1, -1]\neta = 1\nomega = [0, 0]\nb = 0\ncnt = 0\nflag = True\nwhile flag:\n    print('Count %d:' % (cnt))\n    print('  Omega = (%d, %d), b = %d' % (omega[0], omega[1], b))\n    flag = False\n    cnt += 1\n    for i in range(4):\n        if tag[i] * (omega[0] * dot[i][0] + omega[1] * dot[i][1] + b) &lt;= 0:\n            flag = True\n            omega[0] += eta * tag[i] * dot[i][0]\n            omega[1] += eta * tag[i] * dot[i][1]\n            b += eta * tag[i]\n            break\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>Count 0:\n  Omega = (0, 0), b = 0\nCount 1:\n  Omega = (2, 2), b = 1\nCount 2:\n  Omega = (2, 1), b = 2\nCount 3:\n  Omega = (1, -3), b = 1\nCount 4:\n  Omega = (3, -1), b = 2\nCount 5:\n  Omega = (2, -5), b = 1\nCount 6:\n  Omega = (4, -3), b = 2\nCount 7:\n  Omega = (1, -5), b = 1\nCount 8:\n  Omega = (3, -3), b = 2\nCount 9:\n  Omega = (0, -5), b = 1\nCount 10:\n  Omega = (2, -3), b = 2\nCount 11:\n  Omega = (4, -1), b = 3\nCount 12:\n  Omega = (3, -5), b = 2\nCount 13:\n  Omega = (5, -3), b = 3\nCount 14:\n  Omega = (2, -5), b = 2\nCount 15:\n  Omega = (4, -3), b = 3\nCount 16:\n  Omega = (1, -5), b = 2\nCount 17:\n  Omega = (3, -3), b = 3\nCount 18:\n  Omega = (0, -5), b = 2\nCount 19:\n  Omega = (2, -3), b = 3\nCount 20:\n  Omega = (-1, -5), b = 2\nCount 21:\n  Omega = (1, -3), b = 3\nCount 22:\n  Omega = (3, -1), b = 4\nCount 23:\n  Omega = (2, -5), b = 3\nCount 24:\n  Omega = (4, -3), b = 4\nCount 25:\n  Omega = (1, -5), b = 3\nCount 26:\n  Omega = (3, -3), b = 4\nCount 27:\n  Omega = (0, -5), b = 3\nCount 28:\n  Omega = (2, -3), b = 4\nCount 29:\n  Omega = (-1, -5), b = 3\nCount 30:\n  Omega = (1, -3), b = 4\nCount 31:\n  Omega = (3, -1), b = 5\nCount 32:\n  Omega = (2, -5), b = 4\nCount 33:\n  Omega = (4, -3), b = 5\nCount 34:\n  Omega = (1, -5), b = 4\nCount 35:\n  Omega = (3, -3), b = 5\nCount 36:\n  Omega = (0, -5), b = 4\nCount 37:\n  Omega = (2, -3), b = 5\nCount 38:\n  Omega = (-1, -5), b = 4\nCount 39:\n  Omega = (1, -3), b = 5\nCount 40:\n  Omega = (-2, -5), b = 4\nCount 41:\n  Omega = (0, -3), b = 5\nCount 42:\n  Omega = (2, -1), b = 6\nCount 43:\n  Omega = (1, -5), b = 5\nCount 44:\n  Omega = (3, -3), b = 6\nCount 45:\n  Omega = (0, -5), b = 5\nCount 46:\n  Omega = (2, -3), b = 6\nCount 47:\n  Omega = (-1, -5), b = 5\nCount 48:\n  Omega = (1, -3), b = 6\nCount 49:\n  Omega = (-2, -5), b = 5\nCount 50:\n  Omega = (0, -3), b = 6\nCount 51:\n  Omega = (2, -1), b = 7\nCount 52:\n  Omega = (1, -5), b = 6\nCount 53:\n  Omega = (3, -3), b = 7\nCount 54:\n  Omega = (0, -5), b = 6\nCount 55:\n  Omega = (2, -3), b = 7\nCount 56:\n  Omega = (-1, -5), b = 6\nCount 57:\n  Omega = (1, -3), b = 7\nCount 58:\n  Omega = (-2, -5), b = 6\nCount 59:\n  Omega = (0, -3), b = 7\nCount 60:\n  Omega = (-3, -5), b = 6\nCount 61:\n  Omega = (-1, -3), b = 7\nCount 62:\n  Omega = (1, -1), b = 8\nCount 63:\n  Omega = (0, -5), b = 7\nCount 64:\n  Omega = (2, -3), b = 8\nCount 65:\n  Omega = (-1, -5), b = 7\nCount 66:\n  Omega = (1, -3), b = 8\nCount 67:\n  Omega = (-2, -5), b = 7\nCount 68:\n  Omega = (0, -3), b = 8\nCount 69:\n  Omega = (-3, -5), b = 7\nCount 70:\n  Omega = (-1, -3), b = 8\nCount 71:\n  Omega = (1, -1), b = 9\nCount 72:\n  Omega = (0, -5), b = 8\nCount 73:\n  Omega = (2, -3), b = 9\nCount 74:\n  Omega = (-1, -5), b = 8\nCount 75:\n  Omega = (1, -3), b = 9\nCount 76:\n  Omega = (-2, -5), b = 8\nCount 77:\n  Omega = (0, -3), b = 9\nCount 78:\n  Omega = (-3, -5), b = 8\nCount 79:\n  Omega = (-1, -3), b = 9\nCount 80:\n  Omega = (-4, -5), b = 8\nCount 81:\n  Omega = (-2, -3), b = 9\nCount 82:\n  Omega = (0, -1), b = 10\nCount 83:\n  Omega = (-1, -5), b = 9\nCount 84:\n  Omega = (1, -3), b = 10\nCount 85:\n  Omega = (-2, -5), b = 9\nCount 86:\n  Omega = (0, -3), b = 10\nCount 87:\n  Omega = (-3, -5), b = 9\nCount 88:\n  Omega = (-1, -3), b = 10\nCount 89:\n  Omega = (-4, -5), b = 9\nCount 90:\n  Omega = (-2, -3), b = 10\nCount 91:\n  Omega = (0, -1), b = 11\nCount 92:\n  Omega = (-1, -5), b = 10\nCount 93:\n  Omega = (1, -3), b = 11\nCount 94:\n  Omega = (0, -7), b = 10\nCount 95:\n  Omega = (2, -5), b = 11\nCount 96:\n  Omega = (-1, -7), b = 10\nCount 97:\n  Omega = (1, -5), b = 11\nCount 98:\n  Omega = (-2, -7), b = 10\nCount 99:\n  Omega = (0, -5), b = 11\nCount 100:\n  Omega = (-3, -7), b = 10\nCount 101:\n  Omega = (-1, -5), b = 11\nCount 102:\n  Omega = (1, -3), b = 12\nCount 103:\n  Omega = (0, -7), b = 11\nCount 104:\n  Omega = (2, -5), b = 12\nCount 105:\n  Omega = (-1, -7), b = 11\nCount 106:\n  Omega = (1, -5), b = 12\nCount 107:\n  Omega = (-2, -7), b = 11\nCount 108:\n  Omega = (0, -5), b = 12\nCount 109:\n  Omega = (-3, -7), b = 11\nCount 110:\n  Omega = (-1, -5), b = 12\nCount 111:\n  Omega = (1, -3), b = 13\nCount 112:\n  Omega = (0, -7), b = 12\nCount 113:\n  Omega = (2, -5), b = 13\nCount 114:\n  Omega = (-1, -7), b = 12\nCount 115:\n  Omega = (1, -5), b = 13\nCount 116:\n  Omega = (-2, -7), b = 12\nCount 117:\n  Omega = (0, -5), b = 13\nCount 118:\n  Omega = (-3, -7), b = 12\nCount 119:\n  Omega = (-1, -5), b = 13\nCount 120:\n  Omega = (-4, -7), b = 12\nCount 121:\n  Omega = (-2, -5), b = 13\nCount 122:\n  Omega = (0, -3), b = 14\nCount 123:\n  Omega = (-1, -7), b = 13\nCount 124:\n  Omega = (1, -5), b = 14\nCount 125:\n  Omega = (-2, -7), b = 13\nCount 126:\n  Omega = (0, -5), b = 14\nCount 127:\n  Omega = (-3, -7), b = 13\nCount 128:\n  Omega = (-1, -5), b = 14\nCount 129:\n  Omega = (-4, -7), b = 13\nCount 130:\n  Omega = (-2, -5), b = 14\nCount 131:\n  Omega = (0, -3), b = 15\nCount 132:\n  Omega = (-1, -7), b = 14\nCount 133:\n  Omega = (1, -5), b = 15\nCount 134:\n  Omega = (-2, -7), b = 14\nCount 135:\n  Omega = (0, -5), b = 15\nCount 136:\n  Omega = (-3, -7), b = 14\nCount 137:\n  Omega = (-1, -5), b = 15\nCount 138:\n  Omega = (-4, -7), b = 14\nCount 139:\n  Omega = (-2, -5), b = 15\n</code></pre>"},{"location":"Statistics/summary/","title":"\u673a\u5668\u5b66\u4e60\u4e0e\u7edf\u8ba1\u5b66","text":"<p>\u4ec5\u4f5c\u4e3a\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u603b\u7ed3\uff0c\u5fc5\u6709\u758f\u6f0f\u9519\u8bef\uff0c\u70e6\u8bf7\u6307\u6b63\u3002</p> <p>\u76f8\u6bd4\u4e8e\u7edf\u8ba1\u5b66\u7684\u5927\u9886\u57df\uff0c\u673a\u5668\u5b66\u4e60\u66f4\u52a0\u4fa7\u91cd\u4e0e\u5bf9\u4e8e\u672a\u77e5\u6570\u636e\u7684\u9884\u6d4b\uff0c\u4ece\u90e8\u5206\u5df2\u77e5\u6570\u636e\u63a8\u65ad\u51fa\u5168\u90e8\u6570\u636e\uff0c\u4ece\u5df2\u6709\u6570\u636e\u751f\u6210\u66f4\u591a\u672a\u77e5\u6570\u636e\u3002</p>"},{"location":"Statistics/summary/#_2","title":"\u6709\u76d1\u7763\u5b66\u4e60\uff1a\u56de\u5f52\u3001\u5224\u522b\u4e0e\u5206\u7c7b","text":"<p>\u56de\u5f52</p> <p>\u5bf9\u4e8e\u8981\u5e94\u7528\u4e8e**\u8fde\u7eed\u578b**\u6570\u636e\u7684\u60c5\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5df2\u6709\u6570\u636e\uff0c\u62df\u5408\u51fa\u56de\u5f52\u6a21\u578b\u3002\u5e38\u7528\u7684\u56de\u5f52\u6a21\u578b\u4e3b\u8981\u4e3a\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u3002\u901a\u8fc7\u56de\u5f52\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u56de\u5f52\u9884\u6d4b\uff0c\u5982\u5728\u5747\u65b9\u8bef\u5dee\u6700\u5c0f\u7684\u60c5\u5f62\u4e0b\uff0c\u4f7f\u7528 X \u5bf9 y \u7684\u6700\u4f18\u9884\u6d4b\u5c31\u662f \\mathbb{E}(y|\\mathbf{X})\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u56de\u5f52\u7684\u5206\u6790\u7684\u7406\u8bba\u4ef7\u503c\u8f83\u9ad8\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\u5bf9\u4e8e\u5bf9\u6570\u636e\u7684\u8fde\u7eed\u9884\u6d4b\u9700\u6c42\u5e76\u6ca1\u6709\u5f88\u5927\u3002</p> <ul> <li>\u8fde\u7eed\u578b</li> <li>\u7ebf\u6027\u56de\u5f52\uff08\u56de\u5f52\u6570\u636e\u7684\u68c0\u9a8c\u3001\u6a21\u578b\u7684\u68c0\u9a8c\u3001\u81ea\u53d8\u91cf\u7684\u9009\u62e9\u7b49\uff09</li> </ul> <p>\u5224\u522b\u4e0e\u5206\u7c7b</p> <p>\u5224\u522b\uff08Discrimination\uff09\u6307\u5229\u7528\u5177\u6709\u7c7b\u522b\u4fe1\u606f\u7684\u89c2\u6d4b\u6570\u636e\uff08Training Dataset\uff09\u5efa\u7acb\u4e00\u4e2a\u5206\u7c7b\u5668\uff08Classifier\uff09\u6216\u8005\u5206\u7c7b\u6cd5\u5219\uff08Classification Rule\uff09\uff0c\u5176\u53ef\u4ee5\u6700\u5927\u53ef\u80fd\u5730\u533a\u5206\u4e8b\u5148\u5b9a\u4e49\u7684\u7c7b\u3002(Separation)</p> <p>\u5206\u7c7b\uff08Classification\uff09\u6307\u7ed9\u5b9a\u4e00\u7ec4\u65b0\u7684\u672a\u77e5\u7c7b\u522b\u4fe1\u606f\u7684\u89c2\u6d4b\u6570\u636e\u96c6\uff0c\u4f7f\u7528\u5206\u7c7b\u5668\u6216\u5206\u7c7b\u6cd5\u5219\u5c06\u5176\u5206\u914d\u5230\u4e00\u4e9b\u5df2\u77e5\u7684\u7c7b\u4e2d\u3002(Allocation)</p> <p>\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5224\u522b\u4e0e\u5206\u7c7b\u5e38\u5e38\u6df7\u5728\u4e00\u8d77\u3002\u5224\u522b\u66f4\u504f\u5411\u4e8e\u5efa\u7acb\u6a21\u578b\uff0c\u800c\u5206\u7c7b\u66f4\u504f\u5411\u4e8e\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u3002</p> <ul> <li>\u79bb\u6563\u578b</li> <li> <p>\u8ddd\u79bb\u5224\u522b\u3001\u6781\u5927\u4f3c\u7136\u5224\u522b\u3001Fisher \u7ebf\u6027\u5224\u522b\u3001Bayes \u5224\u522b\u3001\u611f\u77e5\u673a\u3001KNN\u3001SVM\u3001Logistic \u56de\u5f52\u3001\u51b3\u7b56\u6811</p> </li> <li> <p>\u5206\u7c7b\u6548\u679c\u7684\u5ea6\u91cf</p> </li> </ul>"},{"location":"Statistics/summary/#pca","title":"\u65e0\u76d1\u7763\u5b66\u4e60\uff1a\u805a\u7c7b\u3001PCA\u3001\u56e0\u5b50\u6a21\u578b","text":""},{"location":"System/Computer%20Organization/","title":"Computer Organization","text":""},{"location":"System/Computer%20Organization/#instruction-set-architecture","title":"Instruction Set Architecture","text":""},{"location":"System/Computer%20Organization/#introduction-to-isa","title":"Introduction to ISA","text":"<p>\u6307\u4ee4\u96c6\u7cfb\u7edf\uff0c\u662f\u5fae\u4f53\u7cfb\u7ed3\u6784\u7684\u9700\u6c42</p> <p>Operation Code (opcode) + (Source Operand Reference, Result Operand Reference) operands, Next Instructions Reference (\u5b9e\u73b0 jump \u529f\u80fd)</p> <p>\u64cd\u4f5c\u6570\u5b58\u50a8\u7684\u4f4d\u7f6e\uff1a\u5185\u5b58\u3001\u5bc4\u5b58\u5668\u3001I/O \u8bbe\u5907\uff08\u53ef\u4ee5\u50cf\u64cd\u4f5c\u6587\u4ef6\u4e00\u6837\u64cd\u4f5c I/O \u8bbe\u5907\uff09\uff0c\u7acb\u5373\u6570\uff08\u6307\u4ee4\u672c\u8eab\uff09</p> <p>\u6307\u4ee4\u7684\u683c\u5f0f\uff1ashort, long, variable\uff1b\u64cd\u4f5c\u6570\u7684\u6570\u91cf\uff1a0/\u00bd/3\uff1b\u5bc4\u5b58\u5668\u6570\u91cf\uff1b\u5bf9\u9f50\u65b9\u5f0f/\u6700\u5c0f\u5355\u4f4d - byte/word\uff1b\u76f4\u63a5\u5bfb\u5740\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u4e0b\u6807\u5bfb\u5740</p> <p>\u8f6f\u4ef6\u53ea\u80fd\u901a\u8fc7 ISA \u548c\u786c\u4ef6\u4ea4\u4e92</p> <p>\u4e00\u79cd ISA \u53ef\u80fd\u5bf9\u5e94\u591a\u79cd CPU \u67b6\u6784 (\\mu-architecture)</p>"},{"location":"System/Computer%20Organization/#about-isa-design","title":"About ISA design","text":"<p>\u64cd\u4f5c\u6570</p> <p>3\u64cd\u4f5c\u6570 / 2\u64cd\u4f5c\u6570 / 1\u64cd\u4f5c\u6570\uff08\u501f\u52a9\u7d2f\u52a0\u5668\uff09/ 0\u64cd\u4f5c\u6570\uff08\u628a\u6808\u9876\u4e24\u4e2a\u6570\u52a0\u8d77\u6765\u518d\u585e\u56de\u53bb\uff09</p> <p>0\u64cd\u4f5c\u6570\u7684\u5b9e\u9645\u662f\u6309\u7167\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff08Reversed Polish Notation\uff09\u8fd0\u7b97\u7684</p> <p>\u64cd\u4f5c\u6570\u7684\u589e\u52a0\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5185\u6307\u4ee4\u6570\u53d8\u5c11\uff0c\u4f46\u662f\u53d6\uff08fetch\uff09\u6307\u4ee4\u3001\u6267\u884c\uff08execution\uff09\u6307\u4ee4\u65f6\u901f\u5ea6\u53d8\u6162</p> <p>\u5bfb\u5740</p> <p>\u4e00\u4e2a\u64cd\u4f5c\u6570\u5b9e\u9645\u7684\u5730\u5740 The actual location of an operand is its effective address</p> <p>\u5bfb\u5740\uff08\u5bfb\u5740\u662f\u6307\u64cd\u4f5c\u6570\u5982\u4f55\u5f15\u7528\u6211\u4eec\u611f\u5174\u8da3\u7684\u6570\u636e\uff09\u6a21\u5f0f Addressing Modes</p> <ul> <li>Immediate \u7acb\u5373\u6570\uff08\u5982\u679c\u8fd9\u4e2a\u6570\u592a\u5927\u4e86\uff0c\u8d85\u51fa\u6307\u4ee4\u89c4\u5b9a\u7684\u7acb\u5373\u6570\u957f\u5ea6\uff0c\u5c31\u4f1a\u51fa\u95ee\u9898\uff09</li> <li>Direct \u76f4\u63a5\u5bfb\u5740\uff08\u628a\u90a3\u4e2a\u5730\u5740\u5b58\u7684\u6570\u62ff\u6765\u53c2\u4e0e\u8fd0\u7b97\uff0c\u9047\u5230\u5730\u5740\u592a\u957f\u600e\u4e48\u529e\uff1f\u7528\u76f8\u5bf9\u5730\u5740\uff09</li> <li>Indirect \u95f4\u63a5\u5bfb\u5740\uff08\u628a\u5730\u5740\u5b58\u7684\u6570\u4f5c\u4e3a\u5730\u5740\uff0c\u518d\u627e\u8fd9\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u6570\u62ff\u6765\u53c2\u4e0e\u8fd0\u7b97\uff1b\u7f3a\u9677\uff1a\u9700\u8981\u4e8c\u6b21\u5bfb\u5740\u6d6a\u8d39\u65f6\u95f4\uff1b\u4f18\u52bf\uff1a\u7b2c\u4e8c\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u6570\u662f\u53ef\u4ee5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6539\u52a8\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5faa\u73af\uff09</li> <li>Register Direct/Indirect \u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740\uff08\u76f4\u63a5\u628a\u5bc4\u5b58\u5668\u7684\u503c\u4f5c\u4e3a\u8fd0\u7b97\u6570\uff09</li> <li>Relative, Indexed and Based \u5bc4\u5b58\u5668\u95f4\u63a5\u5bfb\u5740\uff08\u628a\u5bc4\u5b58\u5668\u7684\u503c\u4f5c\u4e3a\u5730\u5740\uff0c\u53c2\u4e0e\u8fd0\u7b97\uff09</li> <li>Relative addressing \u76f8\u5bf9\u5bfb\u5740\uff08\u7528 PC \u4e2d\u7684\u6570\u636e\u4f5c\u4e3a offset\uff0c\u52a0\u5230\u8fd0\u7b97\u6570\u4e2d\uff0c\u518d\u4f5c\u4e3a\u5730\u5740\u5bfb\u627e\u5bf9\u5e94\u7684\u6570\uff09</li> <li>Indexed addressing \u53d8\u5740\u5bfb\u5740 \u7528\u5bc4\u5b58\u5668\u518d\u52a0\u4e0a\u4e00\u4e2a\u5bc4\u5b58\u5668 \u4f5c\u4e3a\u5730\u5740 \u5bfb\u627e\u5bf9\u5e94\u7684\u6570</li> <li>Based addressing \u57fa\u5740\u5bfb\u5740 \u7528\u5bc4\u5b58\u5668\u518d\u52a0\u4e0a\u4e00\u4e2a\u6570 \u4f5c\u4e3a\u5730\u5740 \u5bfb\u627e\u5bf9\u5e94\u7684\u6570</li> </ul> <p></p> <p>\u64cd\u4f5c\u6570\u548c\u7f16\u7801\u7684\u79cd\u7c7b</p> <p>Types of Operations</p> <p>\u25aa Arithmetic and Logic \u25aa Shift \u25aa Data Transfer, E.g., MOV/LOAD/STORE \u25aa String \u25aa Control, BRANCH/JMP/CALL/RET/\u2026 \u25aa System, HALT/INTERRUPT ON/INTERRUPT OFF/SWITCH\u2026 \u25aa Input/Output</p> <p>Types of Encodings</p> <p>Variable \u53d8\u957f\u3001Fixed \u5b9a\u957f\u3001Hybrid\uff08\u51e0\u4e2a\u5b9a\u957f\u7ec4\u5408\u8d77\u6765\uff09</p> <p>\u53d8\u957f\u7684\u53ef\u4ee5\u7f29\u77ed\u4ee3\u7801\u957f\u5ea6\uff0c\u5b9a\u957f\u7684\u66f4\u52a0\u6027\u80fd\u53cb\u597d</p> <p>\u5206\u7c7b</p> <p>CISC Complex Instruction Set Computers</p> <p>\u5199\u7684\u4e00\u6761\u6307\u4ee4\u53ef\u4ee5\u5e72\u597d\u591a\u4e8b\u60c5\uff0c\u5bf9\u8bd1\u7801\u3001\u7f16\u8bd1\u7684\u6548\u7387\u8981\u6c42\u5f88\u9ad8</p> <p>\u5982\u679c\u60f3\u65b0\u52a0\u4e00\u4e2a\u6307\u4ee4\uff0c\u9700\u8981\u8003\u8651\u5f88\u591a</p> <p>RISC Reduced Instruction Set Computer </p> <p>\u6307\u5b9a\u4e86\u4e00\u4e9b\u57fa\u7840\u5143\u7d20</p> <p>Load-store architecture</p> <p></p> <p>\u5728\u6162\u6162\u878d\u5408</p> <p>Classification of ISAs</p> <p>Accumulator 1-address</p> <p>Stack 0-address \u6307\u4ee4\u6bd4\u8f83\u77ed\uff0c\u865a\u62df\u673a\u672c\u8eab\u7684\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u5229\u7528\u5bc4\u5b58\u5668\u6548\u7387\u4f4e\uff0c\u96be\u4e8e\u5e76\u884c</p> <p>Memory-Memory 2-address, 3-address</p> <p>Register-Memory 2-address</p> <p>Register-Register (Load/Store) 3-address</p>"},{"location":"System/Computer%20Organization/#risc-v-isa","title":"RISC-V ISA","text":"<p>optional customer extensions \u989d\u5916\u652f\u6301\u4e00\u4e9b\u6307\u4ee4\uff0c\u4f7f\u5f97\u89e3\u7801\u66f4\u5feb</p> <p>User-level ISA, Compressed-level ISA (e.g. 16bits), Privileged-level ISA (\u5f15\u5bfc\u7c7b\u7684)</p> <p>\u547d\u540d\uff1a<code>RV</code> + word-width + extensions, e.g. <code>RA32I</code>\uff0c\u6dfb\u52a0\u6574\u578b\u76f8\u5173\u6307\u4ee4\uff08ALU, \u5206\u652f\uff0cLoad/Store\uff09\uff1b\u4e58\u9664\u6cd5 M</p> <p>RV64 \u7684\u6307\u4ee4\u957f\u5ea6\u662f 64 \u4f4d\u7684\uff0cRV32 \u7684\u6307\u4ee4\u957f\u5ea6\u662f 32 \u4f4d\u7684</p> <p>Register</p> <p>PC Program Counter \u5b58\u50a8\u8981\u6267\u884c\u7684\u6307\u4ee4\u7684\u4f4d\u7f6e</p> <p>FSR FP status register \u4fdd\u5b58\u4e86 FP rounding mode, exception reporting \u6ea2\u51fa</p> <p>32\u4e2a 32/64 \u4f4d\u5bc4\u5b58\u5668\uff1a\u6bcf\u4e2a\u5bc4\u5b58\u5668\u90fd\u8fd8\u6709\u5404\u81ea\u7279\u5b9a\u7684\u542b\u4e49</p> <p><code>x0</code> \u662f\u53ea\u8bfb\u7684\uff0c\u6c38\u8fdc\u662f 0\uff0c\u53ef\u4ee5\u7528 <code>add x0, x0, x0</code> \u8868\u8fbe <code>nop</code> \u64cd\u4f5c</p> <p><code>x1</code> \u4e2d\u81ea\u52a8\u4fdd\u5b58\u51fd\u6570\u8fd4\u56de\u503c</p> <p></p> <p>Instructions</p> <p><code>j</code> \u5f00\u5934\u7684\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c<code>b</code> \u5f00\u5934\u7684\u6709\u6761\u4ef6\u8df3\u8f6c</p> <p><code>blt</code> \u6309\u7167\u7b26\u53f7\u6570\u8fdb\u884c\u51cf\u6cd5\uff0c<code>bltu</code> \u6309\u7167\u975e\u7b26\u53f7\u6570\u51cf\u6cd5</p> <p>\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u4ee4\u7f16\u7801\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4f1a\u5728 <code>opcode</code> \u4e2d\u660e\u786e Type\uff0cType \u5927\u7c7b\u4e2d\u7684\u5177\u4f53\u7c7b\u578b\u4f1a\u5728 <code>funct3</code> \u4e2d\u660e\u786e\u3002</p> <p>R \u578b\u548c I \u578b\u6307\u4ee4\u4e2d\uff0cALU \u76f8\u5173\u7684\uff0c<code>opcode</code> \u90fd\u76f8\u540c\uff0c\u5177\u4f53\u7684\u8ba1\u7b97\u662f\u54ea\u4e00\u4e2a\u53ea\u7528 <code>funct3</code> \u7f16\u7801</p> <p>I \u578b\u652f\u6301 12 \u4f4d\u7acb\u5373\u6570</p> <p>Load (I-type): rd = Mem(rs1 + imm)\uff0cLoad \u662f I \u578b\uff01</p> <p><code>LW x13\uff0c4(x12)</code>: \u5728x12\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u52a0\u4e0a4\u7684\u504f\u79fb\u91cf\u5bf9\u5e94\u5730\u5740\u4e2d\uff0c\u8bfb\u51fa\u56db\u4e2a\u5b57\u8282\uff0c\u5b58\u5230x13\u5bc4\u5b58\u5668\u4e2d\u3002</p> <p><code>lh</code> \u662f\u8bfb 2 bytes \u7136\u540e\u7b26\u53f7\u6269\u5c55\uff0c<code>lhu</code> \u662f\u8bfb 1 byte \u7136\u540e\u96f6\u6269\u5c55\u3002<code>lb, lbu</code> 1 byte</p> <p>Store (S-type): Mem(rs1 + imm) = rs2 \u7684\u4f4ex\u4f4d</p> <p><code>SW rs2\uff0coffset(rs1)</code></p> <p>U-type \u9ad8\u4f4d\u7acb\u5373\u6570\u7c7b\u578b \u8bfe\u7a0b\u4e2d\u4e0d\u4f1a\u592a\u591a\u6d89\u53ca</p> <p>Modes</p> <p>Machine Mode, Supervisor Mode, User/Application Mode \u5c42\u7ea7\u8d8a\u6765\u8d8a\u9ad8\uff0c\u8bb8\u591a\u529f\u80fd\u4e5f\u4f1a\u88ab\u5c4f\u853d</p> <p>Machine Mode \u662f\u673a\u5668\u81ea\u52a8\u505a\u7684\uff0c</p>"},{"location":"System/Computer%20Organization/#risc-v-assembly-language","title":"RISC V Assembly Language","text":"<p>\u51fd\u6570\u8c03\u7528</p> <p>Caller, Callee</p> <p>Caller: Passes arguments to callee, Jumps to callee</p> <p>Callee: Performs the function, Returns result to caller, Returns to point of call</p> <p>\u51fd\u6570\u8c03\u7528 6 \u9636\u6bb5\uff1a</p> <p>Calling \u8981\u628a\u53c2\u6570\u653e\u5728 Callee \u53ef\u4ee5\u8bbf\u95ee\u7684\u5730\u65b9</p> <p>\u628a PC \u6307\u5411 Callee \u7684\u4f4d\u7f6e</p> <p>\u83b7\u53d6\u6570\u636e</p> <p>\u6267\u884c\u51fd\u6570</p> <p>\u628a\u8fd4\u56de\u503c\u653e\u5728 Caller \u53ef\u4ee5\u8bbf\u95ee\u7684\u5730\u65b9\u3001\u628a\u5bc4\u5b58\u5668\u8fd8\u539f\u3001\u628a\u5b58\u50a8\u8d44\u6e90\u8fd8\u539f</p> <p>\u628a PC \u6307\u56de\u53bb</p> <p>Prologue \u51fd\u6570\u7684\u8fdb\u5165, Epilogue \u51fd\u6570\u7684\u9000\u51fa</p> <p>\u5982\u679c\u53c2\u6570\u5f88\u7b80\u5355\uff0c\u90a3\u53ea\u9700\u8981 x10-x17 \u5373\u53ef\u5b58\u50a8\u53c2\u6570</p> <p>\u5982\u679c\u53c2\u6570\u590d\u6742\uff0c\u90a3\u5c31\u9700\u8981\u5bf9\u6808\u8fdb\u884c\u5904\u7406\uff0ce.g. <code>sp</code> \u8981\u6307\u5411\u6b63\u786e\u7684\u4f4d\u7f6e\uff08sp \u51cf\u6389\u9700\u8981\u5360\u7528\u7684\u7a7a\u95f4\uff09</p> <p></p> <p></p> <p>\u6ea2\u51fa\uff1a\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u6ea2\u51fa\u4e4b\u540e\u88ab\u5360\u7528\u7684\u6570\u636e\u632a\u5230\u5b58\u50a8\u5668\u7684\u5176\u4ed6\u4f4d\u7f6e\uff0c\u8fd9\u4f1a\u9020\u6210\u6570\u636e\u6cc4\u9732</p> <p>C \u8bed\u8a00\u4ee3\u7801\u8fd0\u884c\u8fc7\u7a0b</p> <p>Compile - Assemble - Link - Load</p> <p>Linker: Jump \u5230\u54ea\u91cc</p> <p>Loader: \u628a\u786c\u76d8\u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6 Load \u5230 Memory\uff0c\u5e76\u4e14\u786e\u5b9a\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u7684\u5165\u53e3</p> <p>Compiler</p> <p>Preprocessor (*.c \u2192 *.i): Expands all macro definitions and include statements (and anything else starting with a #) and passes the result to the actual compiler.</p> <p>Compiler (*. i \u2192 *.s)</p> <p>\u6c47\u7f16\u5f88\u96be\u4ece\u4ee3\u7801\u672c\u8eab\u8bfb\u51fa\u5177\u4f53\u542b\u4e49</p> <p>Assembler</p> <p>\u4e0d\u4ec5\u4ec5\u662f\u7ffb\u8bd1\u6210\u673a\u5668\u7801\uff0c\u8fd8\u4f1a\u628a\u4e00\u4e9b\u4f2a\u4ee3\u7801 pseudoinstructions \u7ed9\u53d8\u6210\u6807\u51c6\u4ee3\u7801</p> <p>\u6c47\u7f16\u8bed\u8a00\u4e2d\u6ca1\u6709\u5730\u5740\uff0c\u4f7f\u7528 Symbol \u6765\u8fdb\u884c\u4ee3\u7801\u6bb5/\u6570\u636e\u7684\u6807\u6ce8\uff1b\u4f46\u662f <code>.o</code> \u6587\u4ef6\u4e2d\u5c31\u6709\u4e86\u5730\u5740\uff0c</p> <p>Linker</p> <p>\u7f16\u8bd1\u4e2d\uff0c\u8017\u65f6\u592a\u957f\uff1b\u6240\u4ee5\u53ef\u4ee5\u628a\u4e00\u4e9b\u9700\u8981\u8c03\u7528\u7684\u5e93\u63d0\u524d\u7f16\u8bd1\u6210 <code>.o</code> \u4e4b\u540e\uff0c\u53ea Link \u5230\u4e00\u8d77\u5373\u53ef\u3002</p> <p>Static vs. Dynamic Linking</p> <p>Static: Link \u5b8c\u4e4b\u540e\u518d\u6267\u884c\u5373\u53ef\uff0c\u4f46\u662f Dynamic \u7684\u5c31\u53ea\u5728\u8fd0\u884c\u7684\u65f6\u5019\u518d\u53bb\u627e\u3001\u53bb Link</p>"},{"location":"System/Computer%20Organization/#the-processor-basic-principles","title":"The Processor: Basic Principles","text":"<p>Non programmable System: Specific System</p> <p>Programmable System : General system</p> <p>Finite state machine machine FSM, Program state machine PSM</p> <p>\u5047\u8c61\u51fa\u7684\u56fe\u7075\u673a</p> <ul> <li> <p>Tape: \u7eb8\u5e26</p> </li> <li> <p>Head: \u53ea\u80fd\u505a\u5411\u5de6\u79fb\u3001\u5411\u53f3\u79fb\u3001\u8bfb/\u5199</p> </li> <li> <p>Table: \u4e0b\u4e00\u64cd\u4f5c\u7684\u89c4\u5219</p> </li> <li> <p>Register\uff1acurrent state</p> </li> </ul> <p>\u6bcf\u4e2a\u547d\u4ee4\u90fd\u662f7\u5143\u7ec4\uff0cProgram \u90fd\u662f5\u5143\u7ec4</p> <p>\u95ee\u9898\uff1a\u5b58\u50a8\u4ecb\u8d28\u80af\u5b9a\u662f\u6709\u9650\u7684\u3001\u901f\u5ea6</p> <p>\u56fe\u7075\u673a\u4e2d\uff0c\u4e0d\u4f1a\u4fdd\u5b58\u4e2d\u95f4\u72b6\u6001\uff1b\u4f46\u662f\u5728\u5b9e\u9645\u5b9e\u73b0\u7684\u673a\u5668\u4e2d\uff0c\u53ef\u4ee5\u5411 Register \u4fdd\u5b58\u8fd9\u4e9b\u4e2d\u95f4\u72b6\u6001\u3002</p> <p>\u901a\u8fc7 CPU \u5b9e\u73b0\u4e86\u4e00\u4e2a\u66f4\u52a0\u5f3a\u5927\u7684 Head\u3002</p> <p>\u5bc4\u5b58\u5668\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a WE (Write and Enable) \u6765\u63a7\u5236\u662f\u5426\u53ef\u4ee5\u5199\u5165</p> <p>CPU \u9700\u8981\u5b9e\u73b0\uff1a</p> <p>\u5b58\u50a8\u5e8f\u5217\uff08\u65e0\u9650\u957f\u7684\u7eb8\u5e26\uff09\u3001let \u6307\u4ee4\uff08HEAD\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\uff09\u3001\u63a7\u5236\u6d41\uff08\u63a7\u5236\u51c6\u6d4b\u7684 TABLE\uff09\u3001\u5bc4\u5b58\u5668\uff08\u66f4\u591a\u7684\u72b6\u6001\u5b58\u50a8\u548c\u7acb\u5373\u6570\uff09</p> <p>\u8fd9\u4e0a\u9762\u7684 1, 2, 4 \u90fd\u662f\u4e0d\u9700\u8981\u903b\u8f91\u89c4\u5219\u7684\u786c\u4ef6\uff0c3 \u9700\u8981\u6307\u4ee4</p> <p>\u6307\u4ee4\u7684\u6267\u884c\uff1a\u4ece\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u89e3\u6790\u51fa\u6307\u4ee4\u5730\u5740\uff0c\u89e3\u7801\u3001\u8bfb\u5bc4\u5b58\u5668</p> <p>\u6307\u4ee4\u7684\u5206\u7c7b\uff1a\u5185\u5b58\u8bfb\u5199 <code>lw</code>('i'), <code>sw</code>('s')\u3001\u8fd0\u7b97 add, sub, and, or('r')\u3001\u63a7\u5236\u6d41\u6307\u4ee4 <code>b</code>('b'), <code>jal</code>('j')</p> <p>Performance \u8861\u91cf\u6807\u51c6: \u54cd\u5e94\u65f6\u95f4\u3001\u541e\u5410\u91cf\u7b49\uff0c\u73b0\u5728\u8fd8\u4f1a\u589e\u52a0\u4e00\u4e9b\u80fd\u8017\u3001\u6210\u672c\u4e4b\u7c7b\u7684\u8861\u91cf\u6807\u51c6</p> <p>\u6267\u884c\u65f6\u95f4\u7684\u5b9a\u4e49\uff1aElapsed Time (Total response time), CPU Time (without I/O time)</p> <p>\u6267\u884c\u65f6\u95f4 = 1/CPU Execution Time</p> <p>CPU Execution Time = CPU Clock Cycles * Clock Period = CPU Clock Cycles / Clock Frequency (Clock Rate) CPU \u4e3b\u9891</p> <p>Average cycles per instruction (CPI), CPI = CPU Clock Cycles / Instruction Count (IC)\uff0c\u5355\u6761\u6307\u4ee4\u9700\u8981\u7684 Clock Cycle \u6570</p> <p>\u5982\u679c\u5f15\u5165\u6d41\u6c34\u7ebf\u6216\u8005\u5e76\u884c\uff0c\u4e00\u822c CPI &lt; 1\uff0c\u90a3\u5c31\u4f7f\u7528 IPC \u6765\u8861\u91cf\uff0c\u770b\u6bcf\u4e2a Clock Cycle \u53ef\u4ee5\u8fd0\u884c\u7684\u6307\u4ee4\u6570\u76ee\u3002</p>"},{"location":"System/Computer%20Organization/#the-processor-design","title":"The Processor: Design","text":""},{"location":"System/Computer%20Organization/#instruction-execution-in-risc-v","title":"Instruction execution in RISC V","text":"<p>\u6307\u4ee4\u7684\u89c4\u6574\u6027</p> <p>\u64cd\u4f5c\u6570\uff1a2\u7c7b - \u5bc4\u5b58\u5668\u3001\u7acb\u5373\u6570</p> <p>\u8981\u6ce8\u610f\u533a\u5206\u6307\u4ee4\u4e2d\u7684 <code>rs1</code>, <code>rs2</code>\u3002</p> <p><code>sub x5, x6, x7</code> \u4e2d\uff0c<code>x6</code> \u662f <code>rs1</code>\uff0c<code>x7</code> \u662f <code>rs2</code>\u3002</p> <p><code>ld x5, 40(x6)</code> \u4e2d\uff0c<code>x5</code> \u662f <code>rd</code>\u3002</p> <p><code>sd x5, 40(x6)</code> \u4e2d\uff0c<code>x5</code>  \u662f <code>rs2</code>\uff0c<code>x6</code> \u662f <code>rs1</code>\u3002</p> <p><code>beq rs1\uff0crs2\uff0coffset</code>\u3002</p> <p></p>"},{"location":"System/Computer%20Organization/#datapath","title":"\u6570\u636e\u901a\u8def Datapath","text":"<p>\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\uff1a</p> <ol> <li> <p>\u4f7f\u7528 <code>PC</code> \u4e2d\u4fdd\u5b58\u7684\u5730\u5740\uff0c\u5230\u6307\u4ee4\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u6307\u4ee4\u540e\uff0c\u6539\u53d8 <code>PC</code> \u7684\u503c\u3002</p> </li> <li> <p>\u89e3\u7801\u8f6c\u4e3a\u673a\u5668\u7801\uff0c\u8bfb\u64cd\u4f5c\u6570 operand (\u6307\u4ee4\u4e2d\u7528\u5230\u7684\u5bc4\u5b58\u5668\u7b49)</p> </li> <li>\u6267\u884c/\u5185\u5b58\u8bbf\u95ee/\u5199\u5bc4\u5b58\u5668/\u6539\u53d8PC\uff0c\u53d6\u51b3\u4e8e\u6307\u4ee4\u7c7b\u578b\uff1aExecutive Control, Memory Access, Write results to register, Modify PC</li> </ol> <p>\u7b2c\u4e00\u6b65\u4e3a Fetch Instruction\uff1a\u9700\u8981\u7528\u5230\u6307\u4ee4\u5b58\u50a8\u5668\u7684\u8bfb\u53d6\u3001PC \u8fd9\u4e2a\u5bc4\u5b58\u5668\u3001\u52a0\u6cd5\u5668</p> <p>\u7b2c\u4e8c\u6b65\u4e3a Instruction Decoding &amp; Read Operand\uff1a\u7ffb\u8bd1\u4e3a\u673a\u5668\u7801\uff0c\u8bfb\u53d6 Register Operands</p> <p>\u8bd1\u7801\u65f6\uff0c\u4e00\u90e8\u5206\u662f control signal \u7684\u8bbe\u8ba1\uff0c\u4e00\u90e8\u5206\u662f\u8981\u8bbf\u95ee\u5b9e\u9645\u5730\u5740</p> <p>\u5bc4\u5b58\u5668\u7ec4\u7684\u8f93\u5165\u8f93\u51fa\u4e2d\uff1a\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u5730\u5740\u63a5\u53e3\u662f 5 \u4f4d\uff08\\log_2 32\uff09\u7684\uff0c\u8f93\u5165\u8f93\u51fa\u7684\u6570\u636e\uff08\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u5230\u7684/\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u636e\uff09\u662f 32 \u4f4d\u7684\u3002</p> <p>\u6570\u636e\u901a\u8def\u56fe\uff1a\u56fe\u4e2d\u7684 64 \u90fd\u5e94\u8be5\u662f 32\u3002</p> <p></p> <p></p> <p></p> <p></p> <p>R, I, S \u76f8\u5bf9\u7c7b\u4f3c</p> <p>B, J \u6d89\u53ca\u5bf9 PC \u7684\u4fee\u6539\u3002</p> <p>\u4e3a\u4ec0\u4e48\u9700\u8981 \u5de6\u79fb1\u4f4d\uff1f\u56e0\u4e3a\u7f16\u7801\u4e2d\u6ca1\u6709\u7b2c0\u4f4d\uff0c\u662f\u4ece\u7b2c1\u4f4d\u5f00\u59cb\u7f16\u7801\u7684\uff0c\u9ed8\u8ba4\u5c31\u8981\u4e582\u3002</p> <p></p> <p></p> <p>B \u4e2d\u9700\u8981 ALU \u4e2d\u8f93\u51fa\u7684 zero flag\uff0c\u800c\u4e0d\u662f\u8f93\u51fa\uff1b\u8ba1\u7b97 PC+offset \u65f6\u9700\u8981\u4f7f\u7528\u989d\u5916\u7684\u52a0\u6cd5\u5668\u3002\u7136\u540e\u518d\u628a PC+4 \u548c PC+offset \u7528 branch AND zf \u6765\u8fdb\u884c\u591a\u8def\u9009\u62e9\uff0c\u8d4b\u503c\u7ed9 PC\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u628a J \u578b\u6307\u4ee4\u7684\u6570\u636e\u901a\u8def\u548c B \u578b\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u6240\u4ee5\u8ba4\u5b9a ALU \u662f\u6570\u636e\u6d41\u7684\u64cd\u4f5c\uff0c\u800c\u989d\u5916\u7684 Adder \u4e13\u95e8\u8d1f\u8d23\u5904\u7406 PC \u7684\u52a0\u6cd5\u3002</p> <p>\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u6765\u5b9e\u73b0 Share\uff0c\u4e24\u4e2a\u8f93\u5165\u4e00\u4e2a\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u9700\u8981\u901a\u8fc7\u6570\u636e\u4fe1\u53f7\u6765\u786e\u5b9a\u6570\u636e\u7a76\u7adf\u9009\u62e9\u54ea\u4e2a\u3002</p> <p>\u63a7\u523632\u4e2a\u5bc4\u5b58\u5668\uff0c\u9700\u898132\u4f4d\u591a\u8def\u9009\u62e9\u5668\u3002</p>"},{"location":"System/Computer%20Organization/#controller","title":"\u63a7\u5236\u5668 Controller","text":"<p>4 bits, ALUSrc, MemtoReg, Branch, Jump\uff0c\u591a\u8def\u9009\u62e9\u5668\u7684\u63a7\u5236\u90e8\u4ef6\uff1b</p> <p>2 bits, ALU operation\uff0cALU \u7684\u63a7\u5236\uff1b</p> <p>3 bits, RegWrite, MemRead, MemRrite\uff0c\u8bfb\u5199\u64cd\u4f5c\uff0c\u4ece\u64cd\u4f5c\u6570\u4e2d\u5f97\u5230\u3002</p> <p>2 \u9636\u6bb5\u63a7\u5236\u5668 - Main Decoder, ALU Decoder</p> <p>Main Decoder \u53ea\u9700\u8981\u63a5\u6536 opcode\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u7684</p> <p>\u63a7\u5236\u4fe1\u53f7\u786e\u5b9a\uff1a\u6839\u636e\u7c7b\u4f3c\u771f\u503c\u8868\u7684\u65b9\u5f0f\uff0c\u5199\u51fa\u5173\u4e8e OPCode \u7684\u903b\u8f91\u8868\u8fbe\u5f0f\u3002</p> <p>ALU Decoder \u63a5\u6536 Main Decoder \u4f20\u8fc7\u6765\u7684 2 bits ALU op\uff0c\u7136\u540e\u518d\u8bfb func3, func7\uff0c\u6700\u540e\u8f93\u51fa 4 bits \u7684 ALU Control \u4f20\u7ed9 ALU\u3002</p> <p>\u65f6\u949f\u5468\u671f\uff1a\u53d6\u5740\u3001\u8bd1\u7801\u3001\u6267\u884c\u63a7\u5236\u3001\u8bbf\u5b58\u3001\u5199\u56de</p> <p></p> <p>R\u578b\u6307\u4ee4\u6ca1\u6709\u8bbf\u5b58\u3002</p> <p>\u6700\u540e\u4e00\u6b65 write data \u53ea\u662f\u628a\u4e1c\u897f\u8ba1\u7b97\u597d\uff0c\u5e76\u6ca1\u6709\u5199\u56de\u5bc4\u5b58\u5668\u7ec4\uff0c\u5199\u56de\u662f\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u8fdb\u884c\u7684\u3002</p> <p>PC \u7684\u4fee\u6539\u4e0d\u4f1a\u5355\u72ec\u5360\u7528\u67d0\u4e00\u4e2a\u65f6\u95f4\uff0c\u662f\u5e76\u884c\u7684\u3002</p> <p>R Type: </p> <p></p>"},{"location":"System/Computer%20Organization/#multi-cycle-cpu-design","title":"Multi-Cycle CPU Design","text":"<p>\u4f18\u5316\u65b9\u6cd5\uff1a\u51cf\u5c11\u6307\u4ee4\u6570\uff08CISC\uff09\u3001\u51cf\u5c11\u6bcf\u6761\u6307\u4ee4\u6240\u9700\u65f6\u95f4\uff08RISC\uff09\u3001\u589e\u52a0\u65f6\u949f\u9891\u7387</p> <p>CPU\u4e2d\uff1a\u6570\u636e\u901a\u8def\u3001\u63a7\u5236\u5668\u3001\u7f13\u5b58</p> <p>\u591a\u5468\u671f\uff1a</p> <p>\u4ecd\u7136\u662f\uff1a\u53d6\u5740 IF\u3001\u8bd1\u7801 ID\u3001\u6267\u884c\u63a7\u5236 EX\u3001\u8bbf\u5b58 MEM\u3001\u5199\u56de WB</p> <p>\u5927\u5e45\u5ea6\u51cf\u5c11\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u7528\u597d\u591a Cycle \u8ba1\u7b97\u4e00\u6761\u6307\u4ee4\uff0c\u53ef\u4ee5\u590d\u7528\u4e00\u4e9b\u6602\u8d35\u7684\u786c\u4ef6\u3002</p> <p>\u4e0d\u518d\u9700\u8981\u7b49\u7740\u90a3\u4e2a\u65f6\u95f4\u6700\u957f\u7684\u6307\u4ee4\uff0c\u4e0d\u9700\u8981\u4e24\u4e2a Adder\uff0c\u4e24\u4e2a Memory\uff08\u53ea\u80fd\u54c8\u4f5b\u67b6\u6784\uff09\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\uff0c\u4f7f\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u6307\u4ee4\u548c\u6570\u636e\u7684\u5206\u79bb\u3002</p> <p>\u4f7f\u7528\u5bc4\u5b58\u5668\u4fdd\u5b58\u5468\u671f\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u662f\u7528\u6765\u8bb0\u5f55\u72b6\u6001\u7684\u7ec4\u4ef6\u3002</p> <p>IR instruction register</p> <p>DR data register</p> <p>\u6570\u636e\u901a\u8def</p> <p>\u67d0\u4e00\u4e2a\u5468\u671f\u4e2d\uff0c\u6d89\u53ca\u5230\u7684\u7535\u8def\u90fd\u662f\u7ec4\u5408\u903b\u8f91\u7535\u8def\uff0c\u53ea\u6709\u5728\u8fb9\u754c\u624d\u662f\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u3002</p> <p>\u6bcf\u4e2a\u6307\u4ee4\u9700\u8981 3-5 \u4e2a\u6307\u4ee4\u6765\u6267\u884c\uff0c\u53ea\u6709 Load \u9700\u89815\u4e2a\u3002</p> <p>\u4ee5\u4e0b\u5b58\u7591\uff1a</p> <p>\u53d6\u5740\uff1a\u53d6\u5230 PC\uff0c\u8ba1\u7b97 PC + 4 \u7b49\u5f85\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5199\u5165 PC\uff1b\u7ecf\u8fc7\u591a\u8def\u9009\u62e9\u5668\uff08\u51b3\u5b9a\u662fPC\u4f5c\u4e3a\u5185\u5b58\u7684\u4e0b\u6807\u8fd8\u662f\u7528\u8ba1\u7b97\u5f97\u5230\u7684\u6570\u636e\u4f5c\u4e3a\u5185\u5b58\u7684\u4e0b\u6807\uff09\uff0c\u4ece\u5185\u5b58\u4e2d\u53d6\u5230\u5f53\u524d\u5730\u5740\u7684\u6307\u4ee4\uff0c\u7136\u540e\u653e\u5230 IR \u91cc\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5468\u671f\u5199\u5165\u5230 IR\u3002</p> <p>\u8bd1\u7801\uff1a\u5199\u5165 PC\uff0c\u628a\u6307\u4ee4\u5199\u5165 IR\uff1b\u628a IR \u4e2d\u7684\u6570\u636e\u8bd1\u7801\u5230\u63a7\u5236\u5668\u3001\u5bc4\u5b58\u5668\u7ec4\u5bf9\u5e94\u8f93\u5230 AB \u7b49\u5f85\u4e0b\u4e00\u4e2a\u5468\u671f\u8bfb\u53d6\uff1b\u5bf9\u4e8e B \u578b\u6307\u4ee4\uff0c\u4f1a\u5229\u7528\u7acb\u5373\u6570\u7684\u7ec4\u4ef6\u628a Target \u7684\u8ba1\u7b97\u4e5f\u5b58\u8d77\u6765\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5468\u671f\u628a\u8981\u8df3\u8f6c\u5230\u7684\u5730\u5740\u8bfb\u53d6\uff0c\u8fd9\u65f6\u7531\u4e8e AB \u8fd8\u6ca1\u6709\u5b9e\u9645\u8bfb\u5230\u6570\u636e\uff0c\u6240\u4ee5\u5e76\u4e0d\u77e5\u9053\u6761\u4ef6\u662f\u5426\u6210\u7acb\u3002</p> <p>\u6267\u884c\uff1aAB \u4e2d\u7684\u6570\u636e\u8ba1\u7b97\u540e\uff0c\u5b58\u5230 ALUout</p> <p>\u8bbf\u5b58\uff1aALUout \u5199\u5230\u5185\u5b58</p> <p>\u5199\u56de\uff1a\u628a IR \u4e2d\u7684\u5199\u56de\u5bc4\u5b58\u5668\u7ec4</p> <p>\u63a7\u5236\u5668</p> <p>\u4e0d\u540c\u7684\u65f6\u949f\u5468\u671f\u5185\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u6307\u4ee4\uff0c\u63a7\u5236\u4fe1\u53f7\u662f\u4e0d\u540c\u7684\u3002\u63a7\u5236\u5668\u53d8\u6210\u4e86\u65f6\u5e8f\u903b\u8f91\u90e8\u4ef6\uff08\u662f\u65f6\u949f\u76f4\u63a5\u5bfc\u81f4\u4ed6\u53d8\uff09\u3002</p> <p>\u786c\u8fde\u7ebf\u63a7\u5236\u5668 Hardwired Controller - RISC\uff0c\u57fa\u4e8e\u6709\u9650\u72b6\u6001\u673a FSM</p> <p>\u5fae\u6307\u4ee4\u63a7\u5236\u5668 Micro-program Controller - CISC</p> <p>Hardwired Controller FSM: Reset -&gt; IF -&gt; ID \u4e4b\u540e\u5206\u53c9\u3002</p> <p>\u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u786c\u8fde\u7ebf\u63a7\u5236\u5668\u4e2d\u4e5f\u662f\u542b\u6709\u72b6\u6001\u5bc4\u5b58\u5668\u7684\uff0c\u8981\u628a\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u8f93\u5165\uff1b\u5185\u90e8\u662f\u7ec4\u5408\u7535\u8def\uff0c\u4f46\u662f\u72b6\u6001\u5bc4\u5b58\u5668\u7684\u8f93\u5165\u4e2d\u6709\u65f6\u949f\uff0c\u6240\u4ee5\u662f\u968f\u65f6\u949f\u53d8\u5316\u7684\u3002</p> <p>\u786c\u8fde\u7ebf\u7684\u597d\u5904\uff1a\u5185\u90e8\u5b9e\u73b0\u90fd\u662f\u7ec4\u5408\u903b\u8f91\uff0c\u6ca1\u6709\u5ef6\u8fdf\uff1b\u4f46\u662f\u5982\u679c\u53c8\u589e\u52a0\u65b0\u7684\u6307\u4ee4\uff0c\u90a3\u4f1a\u5bfc\u81f4\u8fc7\u4e8e\u590d\u6742\u3002</p> <p>\u5fae\u6307\u4ee4\u7684\u574f\u5904\uff1a\u9700\u8981\u66f4\u957f\u7684\u6267\u884c\u65f6\u95f4</p> <p>\u8ba1\u7b97 CPU Time: Critical Path - \u6d89\u53ca\u5230\u7535\u8def\u6700\u591a\u7684/\u6d89\u53ca\u5230\u5b58\u50a8\u5668\u7684</p>"},{"location":"System/Digital%20Logic/","title":"Digital Logic","text":""},{"location":"System/Digital%20Logic/#introduction","title":"Introduction","text":"<p>Every problem in computer science can be solved by adding another level of indirection. </p> <p>\u5bf9\u4e8e\u89e3\u51b3\u4e0d\u4e86\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u591a\u52a0\u4e00\u5c42\u6765\u89e3\u51b3\u3002</p>"},{"location":"System/Digital%20Logic/#system","title":"System","text":"<p>\u64cd\u4f5c\u7cfb\u7edf - Operating System</p> <p>\u4f53\u7cfb\u7ed3\u6784 - ISA \u4f4d\u6307\u4ee4\u96c6\u7ed3\u6784 Instruction Set Architecture</p> <p>\u8ba1\u7b97\u673a\u7ec4\u6210 - Computer Organization</p> <p>\u6570\u5b57\u903b\u8f91\u7535\u8def - Register Transfer Level, Digital Logic Circuit</p> <p>\u7cfb\u7edf\u2160\uff1a\u7b80\u5355\u6307\u4ee4(\u5355\u5468\u671fCPU) -&gt; \u7b80\u5355\u6307\u4ee4(\u6d41\u6c34\u7ebf) -&gt; \u57fa\u672c\u6307\u4ee4 + kernel</p> <p>\u51af\u8bfa\u4f0a\u66fc\u67b6\u6784 \u6570\u636e\u548c\u6307\u4ee4\u6df7\u5728\u4e00\u8d77\u4e0d\u533a\u5206</p>"},{"location":"System/Digital%20Logic/#_1","title":"\u5b58\u50a8\u6570\u636e","text":"<p>0: Zero Voltage(\u7535\u538b), 1: Positive Voltage\uff0c\u7269\u7406\u5b9e\u73b0\u4e2d\uff0c\u662f\u5728\u67d0\u4e00\u8303\u56f4\u6ce2\u52a8\u90fd\u8ba4\u4e3a\u662f\u67d0\u4e00\u503c</p> <p>bit: smallest unit of information 0/1</p>"},{"location":"System/Digital%20Logic/#cpu","title":"CPU","text":"<p>Arithmetic and Logic Unit \u7b97\u672f\u548c\u903b\u8f91\u8fd0\u7b97\u5355\u5143\uff1bControl Unit \u63a7\u5236\u5355\u5143\uff1b\u5bc4\u5b58\u5668(\u5305\u62ecprogram counter \u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u5730\u5740, current instruction \u5f53\u524d\u6307\u4ee4)</p>"},{"location":"System/Digital%20Logic/#_2","title":"\u8bfe\u7a0b\u76f8\u5173","text":"<p>\u6570\u5b57\u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u7ec4\u6210 \u8881\u6625\u98ce\u3001\u6b66\u6e2f\u5c71\u7b49 \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e</p> <p>Computer Organization and Design, RISC-V Edition, 1<sup>st</sup> Edition</p> <p>\u53c2\u8003\uff1aCSAPP \u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf</p> <p>\u5b9e\u9a8c\u4e0d\u5206\u7ec4</p>"},{"location":"System/Digital%20Logic/#_3","title":"\u6210\u7ee9","text":"<p>\u671f\u672b 30% + 7 Labs 55% + \u4f5c\u4e1a 10%</p> <p>Lab Bonus 10%</p> <p>\u8fdf\u4ea4\u4e00\u5929\uff0c\u6263 5%</p>"},{"location":"System/Digital%20Logic/#computer-system-and-information-representation","title":"Computer System and Information Representation","text":""},{"location":"System/Digital%20Logic/#introduction-to-computer-system","title":"Introduction to Computer System","text":"<p>CPU\uff1a\u63a7\u5236\u90e8\u4ef6\u3001Data Pass \u6570\u636e\u603b\u7ebf\uff08\u5f88\u591a\u8bbe\u5907\u5171\u4eab\u540c\u4e00\u6761\u7ebf\uff0c\u8fbe\u5230\u66f4\u9ad8\u5229\u7528\u7387\uff09</p> <p>\u63a7\u5236\u90e8\u4ef6\uff08\u4e00\u4e9b\u5bc4\u5b58\u5668\uff09\uff1a</p> <ul> <li> <p>MAR: Memory Address Register \u5411\u5185\u5b58\u4e2d\u5199\u6570\u636e</p> </li> <li> <p>MDR: Memory Data Register \u4ece\u5185\u5b58\u4e2d\u8bfb\u5199\u6570\u636e</p> </li> <li> <p>PC: Program Counter \u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u5730\u5740</p> </li> <li> <p>IR: \u5f53\u524d\u6307\u4ee4</p> </li> </ul> <p>\u628a\u9ad8\u7ea7\u8bed\u8a00\u53d8\u6210\u673a\u5668\u578b\u8bed\u8a00\uff1a</p> <p>Translator: Assembler, Interpreter, Compiler</p> <p>Interpreter: \u89e3\u91ca\u5668\uff0c\u628a\u7a0b\u5e8f\u53d8\u6210\u5b57\u8282\u7801\u4e4b\u540e\uff0c\u7531\u89e3\u91ca\u5668\u8fd0\u884c\uff08\u5e73\u53f0\u65e0\u5173\uff09</p> <p>Compiler: \u7f16\u8bd1\u5668\uff0c\u628a\u7a0b\u5e8f\u53d8\u6210\u67d0\u4e2aCPU/\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u7684\u673a\u5668\u7801\uff08\u5e73\u53f0\u76f8\u5173\uff09</p> <p>5\u9636\u6bb5\uff1a</p> <p>Instruction Fetch -&gt; Instruction Decode -&gt; Execute -&gt; Memory Access -&gt; Write Back</p> <p>\u4e00\u822c\u91c7\u7528\u6d41\u6c34\u7ebf\u7684\u65b9\u5f0f\uff0c\u7b2c\u4e00\u9636\u6bb5\u5e72\u5b8c\u4e86\u4e0d\u4f1a\u7b49\u7740\u6700\u540e\u4e00\u4e2a\u5e72\u5b8c\uff0c\u800c\u662f\u9a6c\u4e0a\u5f00\u59cb\u5e72\u4e0b\u4e00\u4e2a\u4efb\u52a1</p>"},{"location":"System/Digital%20Logic/#binary-number-representation","title":"Binary number representation","text":"<p>\u4e8c\u8fdb\u5236\u8868\u793a</p> <p>\u6a21\u62df\u7535\u8def\uff08Analog\uff09\uff0c\u6570\u5b57\u7535\u8def\uff08Digital\uff09</p> <p>\u6570\u5b57\u7535\u8def\u4e2d\u53c8\u5206\u4e3a\u5f02\u6b65\uff08Asynchronous\uff09\u65f6\u95f4\u8fde\u7eed\u3001\u503c\u79bb\u6563\uff1b\u540c\u6b65\uff08Synchronous\uff09\u65f6\u95f4\u79bb\u6563\u3001\u503c\u79bb\u6563\uff0c\u4e00\u822c\u4f7f\u7528\u5f02\u6b65\u6570\u5b57\u7535\u8def\u548c\u4e00\u4e2a\u65f6\u95f4\u4fe1\u53f7\u505a\u4e0e/\u6216\u8fd0\u7b97\u5f97\u5230</p> <p>\u9ad8\u7535\u5e73\u4ee3\u88681\uff0c\u4f4e\u7535\u5e73\u4ee3\u88680\uff0c\u4e2d\u95f4\u6709\u4e00\u90e8\u5206\u7535\u5e73\u4ee3\u8868\u65e0\u6548\u533a\u95f4</p> <p>\u8ba1\u6570\u7cfb\u7edf Carry Counting System</p> <p>\u57fa\uff1aRadix\uff0c\u5341\u8fdb\u5236\u4e0e\u4e8c\u8fdb\u5236\u6d6e\u70b9\u6570\u7684\u6570\u5b66\u8868\u793a $$ 3A.C\\Leftrightarrow3\\times16^1+ 10\\times 16^0 + 12\\times 16^{-1} = 58.75 $$ \u77ed\u9664\u6cd5 \u6574\u6570\u90e8\u5206\uff0c\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236</p> <p>\u8fde\u4e58\u6cd5 \u5c0f\u6570\u90e8\u5206\u3002\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 $$ 0.65\\times 2 = \\mathbf{1}.3\\ 0.3\\times 2 = \\mathbf{0}.6\\ 0.6\\times 2 = \\mathbf{1}.2\\ 0.2\\times 2 = \\mathbf{0}.4\\ 0.4\\times 2 = \\mathbf{0}.8\\ 0.8\\times 2 = \\mathbf{1}.6\\ \\cdots $$ \u56db\u8fdb\u5236/\u516b\u8fdb\u5236/\u5341\u516d\u8fdb\u5236 \u76f4\u63a5\u5e76\u6392\u5199\u51fa\u5373\u53ef</p>"},{"location":"System/Digital%20Logic/#arithmetic-operation","title":"Arithmetic operation","text":"<p><code>Z</code> means the carry/borrow flag before this calc. </p> <p>Single Bit Binary Addition with Carry: List every conditions, <code>C</code> means carry flag</p> <p>Single Bit Binary Subtraction with Borrow: <code>B</code> means borrow flag</p> <p>Binary Multiplication, Division</p>"},{"location":"System/Digital%20Logic/#representation-of-numeric-data","title":"Representation of numeric data","text":"<p>\u4e09\u8981\u7d20\uff1a\u8fdb\u4f4d\u7cfb\u7edf\u3001\u6570\u5b57\u8868\u793a\uff08\u5b9a\u70b9\u6570 Fixed-point Number\u3001\u6d6e\u70b9\u6570 Float-point Number\uff09\u3001\u7f16\u7801\u65b9\u6cd5</p> <p>Fixed-Point Number Representation</p> <p>PPT \u4e2d\u7684 \u4e24\u4e2a\u6982\u5ff5\uff1f</p> <p>\u5047\u8bbe\u6709 n \u4f4d\uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6574\u578b\uff1a\u6700\u5927\u5230 2^n - 1\uff1b\u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u578b\uff1a\u53d6\u51b3\u4e8e Encoding Methods</p> <p>Encoding Methods</p> <p>\u539f\u7801 Original Code  \u8865\u7801 Complement Code  \u53cd\u7801 Inverse Code  \u8f6c\u7801 Frameshift Code</p> <p>Original Code - Sign and Magnitude Representation</p> <p>\u7b26\u53f7\u4f4d + \u6570\u503c\u4f4d\uff1a\u7edd\u5bf9\u503c\u76f8\u540c\u7684\u6570\uff0c\u540e n - 1 \u4f4d\u76f8\u540c\uff0c\u53ea\u6709\u7b2c 1 \u4f4d\u4e0d\u540c\u3002</p> <p>\u95ee\u9898\uff1a+0\\neq -0\uff0c\u6709\u4e24\u79cd\u8868\u8fbe 0 \u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u4e0d\u80fd\u4ec5\u51ed\u7b26\u53f7\u4f4d\u5224\u5b9a\u6b63\u8d1f\uff0c\u800c\u4e14\u8fd0\u7b97\u65f6\u7b26\u53f7\u4f4d\u548c\u6570\u503c\u4f4d\u8981\u5206\u5f00\u5904\u7406\u3002</p> <p>Complement Code - 2's complement</p> <p>\u4ecd\u7136\u4f7f\u7528\u7b26\u53f7\u4f4d\uff0c\u4f46\u5bf9\u4e8e\u6570\u503c\u4f4d\u4f7f\u7528\u540c\u4f59\u7684\u5173\u7cfb\uff0c\u5728\u540c\u4f59\u7cfb\uff08n-1 \u4e2a Bit \u7684\u6570\u503c\u4f4d\u7cfb\u7edf\uff0cModulo \u4e3a 2^{n-1}\uff09\u5185\u505a\u8fd0\u7b97\uff1a\u628a\u6ea2\u51fa\u90e8\u5206\u4e22\u6389\uff0c\u628a\u8d1f\u6570\u5168\u90e8\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u975e\u8d1f\u6570 $$ [X_T]_C = 2^n + X_T(-2^{n-1}\\leq X_T&lt;2^{n-1}, \\mod 2^n) $$ \u5c0f\u95ee\u9898\uff1aOverflow, \u4e14\u4e4b\u540e\u540e n \u4f4d\u624d\u80fd\u8868\u793a\u5b9e\u9645\u7684\u8ba1\u7b97\u7ed3\u679c\uff0cn+1 \u6216\u66f4\u9ad8\u4f4d\u65e0\u6cd5\u8868\u793a\u771f\u5b9e\u8ba1\u7b97\u7ed3\u679c\u3002</p> <p>\u4e3a\u4ec0\u4e48 X_T&lt;2^{n-1}\uff1a $$ \\begin{aligned}[] [2^{n-1}]_C &amp;= 2^n + 2^{n - 1} \\mod{2^n} \\ &amp;= 2^{n-1}\\ \\end{aligned} $$</p>  \\begin{aligned}[] [-2^{n-1}]_C &amp;= 2^n - 2^{n - 1} \\mod{2^n} \\\\ &amp;= 2^{n-1}\\\\ \\end{aligned}  <p>\u8fd0\u7b97 Shortcut\uff1a\u5bf9\u4e8e\u8d1f\u6570\uff0c\u53d6\u53cd\u52a0\u4e00\uff1b\u5982\u679c\u9700\u8981\u5c06\u5c11\u4f4d\u6269\u5c55\u4e3a\u591a\u4f4d\uff0c\u53ea\u9700\u8981\u628a\u539f\u6765\u7684\u7b26\u53f7\u4f4d\u590d\u5236\u5230\u65b0\u4f4d\uff0c\u5373 $$ (1001)\\rightarrow (1111 1001) $$</p> <p>Inverse Code - 1's complement</p> <p>\u4e3b\u8981\u95ee\u9898\uff1a\u65e0\u6cd5\u5feb\u901f\u89e3\u51b3\u5faa\u73af\u501f\u4f4d\uff1aEnd-around carry/borrow</p> <p>Frameshift Code</p> <p>\u7b26\u53f7\u4f4d + \u5e42\u6b21 + \u5c0f\u6570\u70b9\u540e\u7684\u4f4d</p> <p>\u6700\u7ec8\u8865\u7801\u8131\u9896\u800c\u51fa\u3002\u8865\u7801\u5728\u5b58\u50a8\u4e2d\uff0c\u6709\u65e0\u7b26\u53f7\u7684\u5b58\u50a8\u65b9\u5f0f\u662f\u4e00\u81f4\u7684\uff0c\u53ea\u662f\u5728\u89e3\u91ca (Interpret) \u65f6\u4f1a\u8d4b\u4e88\u5b83\u7279\u5b9a\u542b\u4e49\u3002</p> <p>\u5728 C \u91cc\uff0c\u4e0d\u8981\u5c06\u65e0\u7b26\u53f7\u6574\u578b\u548c\u6709\u7b26\u53f7\u6574\u578b\u76f4\u63a5\u6bd4\u8f83\uff0c\u56e0\u4e3a C90 \u6807\u51c6\u91cc\u662f\u89c6\u4f5c\u65e0\u7b26\u53f7\u6574\u578b\u6bd4\u8f83\u7684\uff0cC99 \u6807\u51c6\u4e2d\u662f\u89c6\u4f5c\u6709\u7b26\u53f7\u6574\u578b\u6bd4\u8f83\u7684\u3002</p> <p>C \u4e2d\u7684\u4f4d\u8fd0\u7b97</p> <pre><code>x = x ^ y;\ny = x ^ y;\nx = x ^ y;\n</code></pre> <p>\u53f3\u79fb\u5206\u4e3a\u903b\u8f91\u53f3\u79fb\uff08\u9488\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u88650\uff09\uff0c\u7b97\u6570\u53f3\u79fb\uff08\u9488\u5bf9\u6709\u7b26\u53f7\u6570\uff0c\u8865\u7b26\u53f7\u4f4d\uff09</p> <p>\u8865\u7801\u8fd0\u7b97\u65f6\u7684\u7edf\u4e00\u6027 $$ B2U = \\sum_{i = 0}^{w-1}x_i\\times 2^i, B2T = -x_{w-1}\\times 2<sup>{w-1}+\\sum_{i=0}</sup>{w-2}x_i\\times 2^i $$ \u6709\u7b26\u53f7\u7684\u8fd0\u7b97\uff0c\u548c\u65e0\u7b26\u53f7\u7684\u8fd0\u7b97\uff0c\u8fc7\u7a0b\u548c\u7ed3\u679c\u5728\u673a\u5668\u7801\u5c42\u9762\u662f\u4e00\u81f4\u7684\u3002</p> <p>C \u8bed\u8a00\u4e2d\u6570\u636e\u6700\u503c</p> <pre><code>// #include &lt;limits.h&gt;, All platform the SAME\n#define INT_MAX 2147483647\n#define INT_MIN (-INT_MAX-1)\n#define UINT_MAX 0xffffffff\n// Values platform specific, e.g. x64 LONG_MAX = 2^63 - 1\n#define ULONG_MAX\n#define LONG_MAX\n#define LONG_MIN (-LONG_MAX-1)\n</code></pre> <p>\u7b26\u53f7\u578b\u4e0e\u975e\u7b26\u53f7\u578b\u7684\u8f6c\u6362 $$ u_x = \\begin{cases} s_x, &amp; x\\geq 0\\ s_x + 2^n, &amp; x \\lt 0\\ \\end{cases} $$</p> <p>\u5f53 s_x\\gt 0 \u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u51cf\u6cd5\u8ba1\u7b97\u53d6\u8d1f\uff1a</p>  -s_x = 0 - s_x = 2^n - s_x  <p>C \u8bed\u8a00\u4e2d\uff0c\u5f53\u65e0\u7b26\u53f7\u7c7b\u578b\u548c\u6709\u7b26\u53f7\u7c7b\u578b\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u65f6\uff0c\u5c06\u5b83\u4eec\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\u7c7b\u578b\u518d\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>\u4fe1\u606f\u6cc4\u9732\u653b\u51fb</p> <pre><code>/* Kernel memory region holding user accessible data */\n#define KSIZE 1024\nchar kbuf[KSIZE];\n\n/* Copy at most maxlen bytes from kernel region to user buffer */\nint copy_from_kernel(void user_dest , int maxlen)\n    /* Byte count len is minimum of buffer size and maxlen*/\n    int len = KSIZE &lt; maxlen ? KSIZE : maxlen;\n    memcpy(user_dest, kbuf, len);\n    return len;\n}\n\n/* Declaration of library function memcpy */\n/* void *memcpy(void *dest, void *src, size_t n); */\n</code></pre> <p><code>memcpy</code> \u7684\u7b2c\u4e09\u53c2\u6570\u662f <code>size_t</code>\uff0c\u662f\u65e0\u7b26\u53f7\u7684\u3002\u5982\u679c\u4f20\u5165\u7684 <code>maxlen &lt; 0</code>\uff0c\u4f1a\u5bfc\u81f4\u8fdc\u8fdc\u591a\u4e8e <code>KSIZE</code> \u7684\u6570\u636e\u88ab\u6cc4\u9732\u5230 <code>user_dest</code>  \u4e2d\u3002 </p> <p>\u600e\u6837\u89e3\u51b3\uff1f</p> <p>\u7b26\u53f7\u6269\u5c55 Sign Extension</p> <p>\u5bf9\u4e8e\u7b26\u53f7\u6570\uff0c\u628a w \u4f4d\u8865\u4e3a w+k \u4f4d\uff1a\u540e w \u4f4d\u4e0d\u52a8\uff0c\u524d k \u4f4d\u8865\u7b26\u53f7\u4f4d\u3002</p> <p>Signed Truncating ???</p> <p>\u6709\u7b26\u53f7\u52a0\u6cd5\u548c\u65e0\u7b26\u53f7\u52a0\u6cd5\u90fd\u53ef\u4ee5\u6784\u6210\u963f\u8d1d\u5c14\u7fa4\uff0c\u4e14\u6709\u8f6c\u5316\uff1a</p> <p>\u4e58\u6cd5</p> <p>-128 * -1 = -128</p> <p>\u5bf9\u672a\u5206\u914d\u7684\u5185\u5b58\u5b58\u5165\u6570\u636e</p> <pre><code>void* copy_elements(void ele_src [], int ele_cnt , size_t ele_size) {\n    /*\n    * Allocate buffer for ele_cnt objects, each of ele_size bytes\n    * and copy from locations designated by ele_src\n    */\n    void *result = malloc(ele_cnt * ele_size);\n    if (result == NULL)\n        /* malloc failed */\n        return NULL;\n    void *next = result;\n    int i;\n    for (i = 0; i &lt; ele_cnt; i++) {\n        /* Copy object i to destination */\n        memcpy(next, ele_src[i], ele_size); \n        /* Move pointer to next memory region */\n        next += ele_size;\n    }\n    return result;\n}\n</code></pre> <p>\u53ea\u7528 <code>malloc</code> \u5206\u914d\u4e86 <code>ele_cnt * ele_size % 2^32</code> \u7684\u7a7a\u95f4\uff0c\u4f46\u662f\u9010\u6b21\u4f7f\u7528\u4e86 <code>ele_cnt * ele_size</code> \u7684\u7a7a\u95f4\u3002</p> <p>\u4e58\u6cd5\u4f4d\u8fd0\u7b97</p> <p><code>(u &lt;&lt; 5) - (u &lt;&lt; 3)</code> \\Leftrightarrow <code>u * 24</code></p> <p>\u9664\u6cd5 $$ x = qy + r, 0\\leq r &lt; y\\ \\frac{x+y-1}{y} = q + (r + y - 1)/y\\ \\lfloor\\frac{x+y-1}{y}\\rfloor = q + \\lfloor(r + y - 1)/y\\rfloor $$ \u518d\u770b\uff0c\u9664\u6cd5\u4f7f\u7528\u53f3\u79fb\u6765\u8ba1\u7b97\uff0c\u7531\u6b64\u4ea7\u751f\u7684\u504f\u5dee\u7528\u53d6\u6574\u6765\u5f25\u8865</p> <p>\u548c\u7b97\u672f\u8fd0\u7b97\u90fd\u662f\u73af\uff0c\u4f46\u662f\u4e0d\u6ee1\u8db3 u&gt;0\\Rightarrow u+v&gt;v\uff0cu&gt;0,v&gt;0\\Rightarrow uv&gt;0</p> <p>\u4e3a\u4ec0\u4e48\u8981\u7528\u65e0\u7b26\u53f7\uff1f</p> <p>\u9700\u8981\u7528\u4f5c\u8fb9\u754c\u6761\u4ef6\u7684\u65f6\u5019\u4e0d\u8981\u7528\u65e0\u7b26\u53f7</p> <pre><code>for (int i = cnt; i - sizeof(int) &gt;= 0; i -= sizeof(int));\n</code></pre> <p>\u4f1a\u505c\u4e0d\u4e0b\u6765\u7684\u3002</p> <p>\u591a\u7cbe\u5ea6\u95ee\u9898\u65f6/\u4f4d\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u65e0\u7b26\u53f7</p> <p>\u6d6e\u70b9\u6570</p> <p>\u4e8c\u8fdb\u5236\u7684\u6027\u8d28\u51b3\u5b9a\u5b83\u4f1a\u4f7f\u7528\u5f88\u591a\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u6765\u8868\u8fbe\u5f88\u591a\u5341\u8fdb\u5236\u4e2d\u5e38\u89c1\u7684\u6709\u7406\u6570\u3002</p> <p>\u5982\u679c\u76f4\u63a5\u56fa\u5b9a\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\uff0c\u6574\u6570\u90e8\u5206\u5c0f\u6570\u90e8\u5206\u5206\u522b\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u8fdb\u884c\u5b58\u50a8\uff0c\u4f1a\u51fa\u73b0\u6d6a\u8d39</p> <p>IEEE Standard 754 $$ (-1)^s \\times M \\times 2^E $$ 32\u4f4d\uff0c\u7b26\u53f7 s 1 \u4f4d\uff0cexp 8 \u4f4d\uff0cfrac 23 \u4f4d</p> <p>64\u4f4d\uff0c\u7b26\u53f7 s 1 \u4f4d\uff0cexp 11 \u4f4d\uff0cfrac 52 \u4f4d</p> <p>80\u4f4d\uff0c\u7b26\u53f7 s 1 \u4f4d\uff0cexp  \u4f4d\uff0cfrac  \u4f4d\uff08Intel CPU\uff09</p> <p>M \u548c E \u4e0d\u76f4\u63a5\u5bf9\u5e94\uff0c\u4f46\u662f\u662f\u6709\u5bf9\u5e94\u5173\u7cfb\u7684</p> <p>E \u4f1a\u52a0\u4e0a\u4e00\u4e2a Bias\uff0c\u4e00\u822c\u662f 2^{k-1}-1\uff0c\u5982 32 \u4f4d\u7684\u9636\u7801\u4f4d\u6570\u4e3a 8\uff0c2^7-1 = 127\u3002E = \\exp - Bias\u3002</p> <p>\u4e3a\u4ec0\u4e48IEEE\u7f16\u7801\u8981\u51cf 1\uff1f\u4e3a\u4e86\u4f7f\u7528\u9636\u7801\u4e3a 0 \u7684\u60c5\u5f62\u6765\u8868\u793a 0 \u9644\u8fd1\u7684\u6570\uff0c\u4e3a\u4e86\u4f7f\u7528\u9636\u7801\u5168\u662f 1 \u7684\u60c5\u5f62\u6765\u8868\u793a\u65e0\u7a77\u5927\u548c NaN\uff08Not A Number\uff0c\u5728\u8fd9\u79cd\u60c5\u5f62\u4e0b\u4e00\u822c\u7684\u8ba1\u7b97\u662f\u4e0d\u6210\u7acb\u7684\uff09\u3002</p> <p>M\\in [1,2) \u4f1a\u628a\u6700\u524d\u9762\u7684 \"1.\" \u53bb\u6389\u3002</p> <p>\u7531\u4e8e\u5982\u679c\u53ea\u4f7f\u7528\u4e0a\u9762\u7684\u89c4\u5219\uff0c\u6ca1\u6709\u529e\u6cd5\u5f88\u597d\u7684\u5904\u7406 0 \u7684\u95ee\u9898\uff0c\u4ee5\u81f3\u4e8e\u5728 0 \u9644\u8fd1\u51fa\u73b0\u5f88\u5927\u7684 Gap\uff1a\u6700\u5c0f\u53ea\u80fd\u662f 1\\times 2^{-126}\uff0c\u5b83\u548c 0 \u76f4\u63a5\u76f8\u5dee 2^{-126}\uff0c\u4f46\u662f\u6bd4\u4ed6\u5927\u7684\u90a3\u4e2a\u6570\u662f (1+2^{-23})\\times 3^{-126}\uff0c\u8ddd\u79bb\u53ea\u6709 2^{-149}\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e24\u8fb9\u8ddd\u79bb\u5dee\u8ddd\u592a\u5927\uff0c\u6240\u4ee5\u8981\u5f15\u5165\u7279\u6b8a\u60c5\u5f62 Denormalized Values\u3002</p> <p>0 \u9644\u8fd1\u7684\uff08exp = 0\uff09\uff1a</p> <p>\u4ecd\u7136\u4f7f\u7528 2^{1-Bias}=2^{-126} \u7684\u9636\uff0c\u4f46\u662f\u628a M \u7684 1. \u53d8\u4e3a 0.\uff0c\u6b64\u65f6\u7684 E\\neq 0-Bias\uff0c\u800c\u662f E = 1-Bias\u3002</p> <p>frac = 0\u65f6\uff0c\u90fd\u662f 0\u3002\u4f1a\u4ea7\u751f +0 \u548c -0 \u7684\u95ee\u9898\uff0c\u8981\u989d\u5916\u8003\u8651\u3002</p> <p>\u65e0\u7a77/NaN\uff08exp \u5168\u662f 1\uff09\uff1a</p> <p>\u5f53 frac = 0 \u65f6\uff0c\u8868\u793a\u65e0\u7a77\uff0c\u5f53 frac \u2260 0 \u65f6\uff0c\u8868\u793a NaN\u3002</p> <p><code>nan</code> \u5728\u903b\u8f91\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5f97\u5230\u7684\u5168\u90fd\u662f False\u3002\u5b58\u50a8\u4e2d\uff0c\u5b83\u6bd4\u4efb\u4f55\u6570\u90fd\u5927\u3002</p> <p>\u5206\u4e3a\u4e24\u79cd\uff0cQuiet NaN\uff08\u4e0d\u4f1a\u5f02\u5e38\uff09\uff0cSignaling NaN\uff08\u4f1a\u53d1\u751f\u5f02\u5e38\uff09</p> <p>\u8fd0\u7b97</p> <p>\u9996\u5148\u8ba1\u7b97\u7cbe\u786e\u503c\uff0c\u518d\u5b58\u5165\u671f\u671b\u7684\u7cbe\u5ea6\uff1afrac \u5de6\u79fb/\u53f3\u79fb\uff0c\u5bf9\u5e94 exp +1/-1</p> <p>exp \u8fc7\u957f\u65f6\uff0c\u4f1a\u4ea7\u751f\u6ea2\u51fa</p> <p>frac \u8fc7\u957f\u65f6\uff0c\u9700\u8981\u53d6\u6574\uff1a\u5982\u679c\u53d6\u8bc1\u4f4d\u540e\u9762\u662f 10000\uff0c\u90a3\u5c31\u5728\u53d6\u8bc1\u4f4d\u4e0a\u53d6**\u6700\u8fd1\u7684\u5076\u6570**\uff0c\u5177\u6709\u66f4\u597d\u7684\u7edf\u8ba1\u6548\u679c\u3002</p> <p>\u4e58\u6cd5\u65f6\uff0c\u7b26\u53f7\u4f4d\u5f02\u6216\uff0c\u4e3b\u8981\u7684\u9ebb\u70e6\u5728\u4e8e M_1\\times M_2</p> <p>\u52a0\u6cd5\u65f6\uff0c\u9996\u5148\u8ba1\u7b97\u7cbe\u786e\u503c\uff0c\u518d\u5b58\u5165\u671f\u671b\u7684\u7cbe\u5ea6</p> <p>\u8fd9\u6837\u5b9a\u4e49\u7684\u52a0\u6cd5\u4e0d\u662f\u963f\u8d1d\u5c14\u7fa4\uff1a\uff08\u4e58\u6cd5\u4e5f\u4e0d\u662f\u73af\uff0c\u7c7b\u4f3c\uff09</p> <ul> <li> <p>\u4e0d\u5c01\u95ed\uff08\u53ef\u80fd\u4ea7\u751f inf \u6216 NaN\uff09</p> </li> <li> <p>\u53ef\u4ea4\u6362</p> </li> <li> <p>\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff08(a+b)+c\\neq a+(b+c)\uff09\uff0c\u6bd4\u5982 (3.14+1^{-10})-1^{-10} \u53ef\u80fd\u4e0d\u662f 3.14\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a Round\uff1b\u4f46\u662f 3.14+(1^{-10}-1^{-10}) \u4e00\u5b9a\u662f 3.14\u3002</p> </li> <li> <p>\u6709\u96f6\u5143\uff0c\u4f46\u662f inf \u548c nan \u6ca1\u6709\u9006\u5143</p> </li> <li> <p>\u5355\u8c03\u6027 a\\geq b\\Rightarrow a+c\\geq b+c\uff0c\u4f46\u662f\u5bf9 inf \u548c nan \u4e0d\u6210\u7acb</p> </li> </ul> <p>Multiplication distributes over addition?  Possibility of overflow, inexactness of rounding</p> <p>\u6bd4\u8f83 C \u4e2d\u662f\u5426\u6709\u7cbe\u5ea6\u635f\u5931\uff1a</p> <p><code>int</code> \u7cbe\u5ea6\u6bd4 <code>float</code> \u4e2d\u7684 M \u7684\u4f4d\u6570\u8981\u591a\uff0c\u6240\u4ee5\u4f1a\u635f\u5931</p> <p>Binary Codes for Decimal Digits</p> <p>\u7528\u4e8c\u8fdb\u5236\u8868\u8fbe\u5341\u8fdb\u5236\u6570\uff0cBCD: Binary Coded Decimal</p> <p>Weight BCD Code (common used: 8421 code), No weight BCD Code (Gray code, Excess3 code \u4f593\u7801)</p> <p>Excess3 Code: \u5728 8421 \u57fa\u7840\u4e0a\u52a0 3\uff080 \u7528 0011 \u8868\u793a\uff09</p> <p>\u683c\u6797\u7801\uff1a\u76f8\u90bb\u6570\u5b57\u4e4b\u95f4\u53ea\u6709\u4e00\u4e2a bit \u4e0d\u4e00\u6837</p>"},{"location":"System/Digital%20Logic/#representation-of-non-numeric-data-data-width-and-storage","title":"Representation of non numeric data, data width and storage","text":"<p>bits / characters</p> <p>American Standard Code for Information Interchange: 7 bits</p> <p>32 \u4f4d\u7cfb\u7edf\u4e2d\uff0c<code>int</code>, <code>long</code> \u90fd\u662f 4 \u4f4d\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0c<code>long</code> \u662f 8 \u4f4d\u3002</p> <p>Least Significant Bit vs. Least Significant Byte \u6700\u4f4e\u4f4d/\u6700\u4f4e Byte</p> <p>Big Endian: Least Significant Byte has highest address; Little Endian</p>"},{"location":"System/Digital%20Logic/#foundations-of-digital-logic","title":"Foundations of Digital Logic","text":""},{"location":"System/Digital%20Logic/#introduction_1","title":"Introduction","text":"<p>\u8f93\u5165\u65f6\u6a21\u62df\u4fe1\u53f7\u5230\u6570\u5b57\u4fe1\u53f7\uff0c\u6570\u5b57\u4fe1\u53f7\u5904\u7406\uff0c\u518d\u8f6c\u6362\u4e3a\u6a21\u62df\u4fe1\u53f7\u8f93\u51fa</p> <p>\u6a21\u62df\u4fe1\u53f7\u53ea\u6709\u4e00\u4e9b\u7ecf\u9a8c\u8868\u8fbe\u5f0f\uff0c\u6ca1\u6709\u592a\u591a\u516c\u5f0f\u63a8\u5bfc</p>"},{"location":"System/Digital%20Logic/#binary-logic-and-gates","title":"Binary Logic and Gates","text":"<p>\u903b\u8f91\u8fd0\u7b97\uff1aAND(\\cdot), OR(+), NOT(\\bar{A}, A', \\sim A), XOR(\\oplus)</p> <p>\u4e00\u4e9b\u7b26\u53f7\uff0c\u5143\u4ef6\u56fe</p> <p>inversion (NOT), buffer(0 \u901a\u8fc7\u4e4b\u540e\u5c31\u662f 0\uff0c1 \u901a\u8fc7\u4e4b\u540e\u5c31\u662f 1), AND, OR, XOR, NAND, NOR, XNOR.</p>"},{"location":"System/Digital%20Logic/#digital-abstraction","title":"Digital abstraction","text":"<p>GND Ground \u63a5\u5730\uff0c\u7535\u538b\u4e3a 0\u3002</p> <p>V_{CC} \u6e90\u7535\u538b\uff08CMOS \u4e2d\u4e5f\u4f1a\u7528 V_{DD}/V_{SS}\uff0c\u4e00\u822c5V\uff09</p> <p>V_{IH}, V_{IL}, V_{OH}, V_{OL} \u903b\u8f91\u7535\u5e73\uff0c\u4ee3\u8868\u54ea\u4e9b\u7535\u538b\u8303\u56f4\u4ee3\u88681\uff0c\u54ea\u4e9b\u7535\u538b\u72b6\u6001\u4ee3\u88680</p> <p>\u7531\u4e8e\u8f93\u51fa\u540e\uff0c\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4f1a\u6709\u635f\u8017\uff0c\u6240\u4ee5 V_{IH} = V_{OH} - NM_{H}\uff0c\u8fd9\u91cc\u7684 NM_{H} \u662f\u6211\u4eec\u53ef\u4ee5\u5bb9\u5fcd\u7684\u566a\u58f0\u7684\u9650\u5ea6\uff0c\u6307\u566a\u58f0\u5bf9\u4fe1\u53f7\u4ea7\u751f\u7684\u6700\u5927\u5f71\u54cd</p> <p></p> <p>\u9009\u53d6\u65f6\uff0c\u53d6\u659c\u7387\u4e3a1\u7684\u70b9\u8fdb\u884c\u6d4b\u91cf\uff1f</p>"},{"location":"System/Digital%20Logic/#transistors","title":"Transistors \u6676\u4f53\u7ba1","text":"<p>\u65e9\u671f TTL \u529f\u8017\u5927</p> <p>CMOS \u6574\u4f53\u67b6\u6784\uff1agate \u6805\u6781 source \u6e90\u6781 drain \u6f0f\u6781\uff0c\u5177\u4f53\u53ef\u4ee5\u5206\u4e3a 2 \u7c7b - nMOS, pMOS</p> <p>nMOS \u53ef\u4ee5\u4fdd\u8bc1 gate \u8f93\u5165\u662f 0 \u7684\u65f6\u5019\uff0c\u65e0\u8bba source \u662f\u4ec0\u4e48\uff0cdrain \u8f93\u51fa\u90fd\u662f 0\uff08\u4e0d\u901a\uff09\uff1b\u4f46\u662f gate \u8f93\u5165\u662f 1 \u7684\u65f6\u5019\uff0c\u5f97\u5230\u7684 drain \u662f\u88ab\u524a\u5f31\u7684\u4e86 source\u3002</p> <p>pMOS \u53ef\u4ee5\u4fdd\u8bc1 gate \u8f93\u5165\u662f 1 \u7684\u65f6\u5019\uff0c\u4e0d\u901a\uff1b\u4f46\u662f gate \u8f93\u5165\u662f 0 \u65f6\uff0c\u901a\u3002\uff08\u4f20 1 \u4e0d\u4f1a\u524a\u5f31\uff0c\u4f20 0 \u4f1a\u524a\u5f31\uff09</p> <p>\u6240\u4ee5\uff0cnMOS \u63a5\u5730\uff0cpMOS \u63a5\u7535\u6e90\u3002</p> <p>\u975e\u95e8\uff1a</p> <p></p> <p>\u4e00\u822c\u7684\u591a\u8f93\u5165\u7684\u95e8\uff1a\u4e00\u4e2a MOS \u4e32\u8054\uff0c\u4e00\u4e2a MOS \u5e76\u8054</p> <p></p> <p>Buffer \u76f8\u5f53\u4e8e\u4e24\u4e2a\u975e\u95e8\u76f8\u8fde\uff0c\u53ef\u4ee5\u521b\u9020\u5ef6\u8fdf</p> <p></p> <p>Transmission Gate</p> <p>A \u662f\u9ad8\u7535\u5e73\uff0c\u6240\u4ee5\u4e24\u4e2a\u6676\u4f53\u7ba1\u90fd\u5bfc\u901a\uff1bIN \u4e3a 1 \u65f6\uff0c\u4e3b\u8981\u7531 pMOS \u8d77\u4f5c\u7528\uff0cIN \u4e3a 0 \u65f6 \u4e3b\u8981\u7531 nMOS \u8d77\u4f5c\u7528\u3002\u9ad8\u963b\u503c\u72b6\u6001\uff1aZ\u3002</p> <p></p> <p>Propagation delay (tpd)</p> <p>\u5728\u7535\u8def\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u51fa\u73b0\u4e00\u4e9b\u5ef6\u8fdf\u3002</p> <p>\u5f53\u4ece input \u7535\u5e73\u53d8\u5316\u65f6\u5f00\u59cb\u8ba1\u8d77\uff0coutput \u663e\u73b0\u4ece output \u7684\u9ad8\u7535\u5e73\u5230\u4f4e\u7535\u5e73\u7684\u53d8\u5316\u6240\u9700\u7684\u65f6\u95f4\u4e3a t_{\\text{PHL}}\uff1b\u5f53\u4ece input \u7535\u5e73\u53d8\u5316\u65f6\u8ba1\u8d77\uff0coutput \u663e\u73b0\u8fd9\u4e2a\u4ece output \u7684\u4f4e\u7535\u5e73\u5230\u9ad8\u7535\u5e73\u7684\u53d8\u5316\u6240\u9700\u7684\u65f6\u95f4\u4e3a t_\\text{PLH}\u3002</p> <p>\u4e00\u822c\u6765\u8bb2\u4f20\u8f93\u7684\u7535\u538b\u548c\u5ef6\u65f6\u662f\u8d1f\u76f8\u5173\u7684\uff0c\u4f46\u662f\u5982\u679c\u7535\u538b\u9ad8\u4e86\u529f\u8017\u53c8\u9ad8\u4e86\u3002</p> <p>Rise and Fall Time (T_r , T_f)</p> <p>\u5bf9\u4e8e\u4fe1\u53f7\u800c\u8a00\uff0c\u4e5f\u9700\u8981\u65f6\u95f4\u53bb\u8fbe\u5230\u8f93\u51fa\u7684\u7535\u5e73\uff0c\u5206\u522b\u8bb0\u4ece\u4f4e\u5230\u9ad8\u4e3a t_r\uff0c\u4ece\u9ad8\u5230\u4f4e\u4e3a t_f</p> <p></p> <p>Power dissipation</p> <p>\u529f\u7387\u635f\u8017</p> <p>\u9759\u6001\u529f\u7387\u635f\u8017\uff1a\u7531\u4e8e\u6cc4\u9732\u7684\u7535\u6d41\u800c\u4ea7\u751f\u7684\u529f\u7387\u635f\u8017 P_s = I_{DD}V_{CC}\uff0c\u5bf9\u4e8e CMOS \u800c\u8a00\u5f88\u5c0f\u3002</p> <p>\u52a8\u6001\u529f\u7387\u635f\u8017\uff1a\u7531\u4e8e\u72b6\u6001\u6539\u53d8\uff0c\u4f1a\u5145\u653e\u7535\uff0c\u4e0d\u53ef\u907f\u514d\u7684\u6709\u529f\u8017\u635f\u8017</p> <p>C_{PD} \u4fe1\u53f7\u53d8\u5316\u65f6\u7535\u80fd\u7684\u529f\u7387\u635f\u8017</p> <p>C_L \u7528\u6765\u9a71\u52a8\u5176\u4ed6\u8bbe\u5907\u7684\u8d1f\u8f7d\u7535\u5bb9</p> <p>f 0.5\u500d\u7684\u6bcf\u79d2\u8f93\u51fa\u53d8\u5316\u9891\u6b21</p> <p>P_D = (C_{PD} + C_L)\\times V_{CC}^2\\times f</p> <p>Fan in and Fan out</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u51e0\u4e2a\u8f93\u5165\u80fd\u9a71\u52a8\u51e0\u4e2a\u8f93\u51fa\u662f\u6709\u4e0a\u754c\u7684\u3002</p>"},{"location":"System/Digital%20Logic/#boolean-algebra","title":"Boolean Algebra","text":"<p>\u5e03\u5c14\u4ee3\u6570\u4e0d\u53ea\u662f Switching Algebra\uff08\u4e8c\u503c\u903b\u8f91\uff09\uff0c\u53ef\u4ee5\u662f\u591a\u503c\u7684</p> <p>\u6211\u4eec\u53ea\u7814\u7a76 Switching Algebra \u4e2d\u7684\u4e24\u9636\u6bb5\u903b\u8f91\uff1aTwo Level Logic</p> <p>\u516c\u7406\u53ca\u5b9a\u7406\uff1a</p> <p>5\u6761\u516c\u7406\u53ca\u51765\u6761\u5bf9\u5076\uff08and \u6362\u6210 or\uff0c01\u4e92\u6362\uff09</p> <p>5\u6761\u5355\u53d8\u91cf\u5b9a\u7406\u53ca\u51764\u6761\u5bf9\u5076</p> <p>6\u6761\u591a\u53d8\u91cf\u5b9a\u7406\u53ca\u51766\u6761\u5bf9\u5076</p> <p>T8D: X + YZ = (X + Y)(X + Z)\uff0c\u6216\u7684\u4e24\u8fb9\u51fa\u73b0\u4e92\u4e3a\u53d6\u53cd\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u53ef\u4ee5\u6d88\u6389\u4e00\u4e2a</p> <p>T9/T9D: X + XY = X, X(X + Y) = X\uff0c\u53ef\u4ee5\u53bb\u6389\u67d0\u4e2a\u53d8\u91cf\uff0c\u6d88\u9664\u5197\u4f59\u9879</p> <p>T11: XY + \\overline{X}Z+ YZ= XY + \\overline{X}Z\uff0c\u6d88\u9664\u5197\u4f59\u9879</p> <p>T11D: (X + Y)(\\overline{X} + Z)(Y + Z) = (X + Y)(\\overline{X} + Z)\uff0c\u6d88\u9664\u5197\u4f59\u9879</p> <p>4\u6761n\u53d8\u91cf\u5b9a\u7406\u53ca\u51763\u6761\u5bf9\u5076</p> <p>T13, T13D \u662f\u5fb7\u6469\u6839\u5f8b\u4e00\u822c\u5f62\u6001\uff0cT14 \u662f\u5176\u63a8\u5e7f\u5e76\u62bd\u8c61\u5316\uff0c\u8bc1\u660e\uff1a $$ X+Y + \\overline{X}\\cdot\\overline{Y} = (X+Y+\\overline{X})(X+Y+\\overline{Y}) = (1+X)(1+Y) = 1\\ (X+Y)(\\overline{X}\\cdot\\overline{Y}) = 0\\cdot \\overline{Y} + 0\\cdot\\overline{X} = 0 $$</p> <p>T15, T15D \u9999\u519c\u5b9a\u7406\uff1a\u53ef\u4ee5\u51cf\u5c11\u8f93\u5165\uff0c\u7c7b\u4f3c\u6761\u4ef6\u6982\u7387</p> <p>T15D \u4e3a\u4ec0\u4e48\u5bf9\uff1f $$ F(X_1, \\cdots, X_n) = X_1F(1,\\cdots, X_n)+\\overline{X}_1F(0,\\cdots, X_n) $$</p>  F(X_1, \\cdots, X_n) = [X_1+F(1,\\cdots, X_n)][\\overline{X}_1+F(0,\\cdots, X_n)]  <p>\u4f18\u5148\u7ea7\uff1a\u62ec\u53f7\u3001NOT\u3001AND\u3001OR</p> <p>\u5bf9\u5076\uff1a</p> <p>and \u6362\u6210 or\uff0c01\u4e92\u6362\uff0c\u4e0d\u4f1a\u4e92\u6362\u53d6\u53cd\uff1b\u5373\u4f7f\u662f\u6709 and or \u5728\u53d6\u53cd\u53f7\u91cc\uff0c\u4e5f\u662f\u7b80\u5355\u7684\u4e92\u6362</p> <p>\u81ea\u5bf9\u5076\uff1a\u81ea\u5df1\u7684\u5bf9\u5076\u8fd8\u662f\u81ea\u5df1</p> <p>\u4e00\u4e2a\u7b49\u5f0f\uff0c\u53ef\u4ee5\u5de6\u53f3\u540c\u65f6\u53d6\u5bf9\u5076\uff0c\u7b49\u5f0f\u4f9d\u7136\u6210\u7acb $$ \\overline{X}\\overline{Y}Z+X\\overline{Y} = \\overline{Y}(X+\\overline{X}Z)\\xlongequal{\\text{T8D}}\\overline{Y}(X+\\overline{X})(X+Z) = \\overline{Y}(X + Z) $$</p>"},{"location":"System/Digital%20Logic/#logic-functions","title":"Logic functions","text":"<p>\u771f\u503c\u8868\uff1a\u5047\u5b9a\u54ea\u4e2a\u662f 1 \u54ea\u4e2a\u662f 0\uff08if, if, if, ...\uff09\uff0c\u5b9e\u5728\u4e0d\u884c\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528\u771f\u503c\u8868\u8bc1\u660e\u76f8\u7b49</p> <p>\u5e03\u5c14\u8868\u8fbe\u5f0f\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u4f46\u662f\u771f\u503c\u8868\u662f\u552f\u4e00\u7684</p> <p>\u51fd\u6570\u7684\u53d6\u53cd\uff1a\u5bf9\u5076 + \u53d8\u91cf\u4e5f\u53d6\u53cd</p> <p>\u5e03\u5c14\u8868\u8fbe\u5f0f\u7684**\u89c4\u8303\u578b** Canonical Forms</p> <p>minterm: \u6bcf\u4e2a\u53d8\u91cf\u4e25\u683c\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e58\u9879</p> <p>maxterm: \u6bcf\u4e2a\u53d8\u91cf\u4e25\u683c\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u52a0\u9879</p> <p>\u6bcf\u4e00\u4e2a\u6700\u5c0f\u9879\u90fd\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\\overline{X}YZ=011\uff0c\u8fd9\u76f8\u5f53\u4f9d\u6b21\u5728\u771f\u503c\u8868\u4e2d\u8bfb\u53d6\u4e00\u79cd\u53d8\u91cf 01 \u6392\u5217\uff1b</p> <p>\u6bcf\u4e00\u4e2a\u6700\u5927\u9879\u4e5f\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0cX+\\overline{Y}+\\overline{Z}=011\u3002</p> <p>\u89c4\u8303\u578b\uff1a\u552f\u4e00\u7684\u6700\u5c0f\u9879\u4e4b\u548c\uff08\u6700\u5c0f\u9879\u5168\u90e8\u52a0\u8d77\u6765\u5f97\u5230\u7684\u662f1\uff09\uff0c\u6216\u662f\u552f\u4e00\u7684\u6700\u5927\u9879\u4e4b\u79ef\uff08\u6700\u5927\u9879\u5168\u90e8\u4e58\u8d77\u6765\u662f0\uff09</p> <p>\u53ef\u4ee5\u7531\u771f\u503c\u8868\uff0c\u76f4\u63a5\u786e\u5b9a\u89c4\u8303\u578b</p> <p>\u5e03\u5c14\u8868\u8fbe\u5f0f\u7684**\u6807\u51c6\u578b**  Standard Forms</p> <p>\u89c4\u8303\u578b\u4e2d\u8981\u6c42\u6bcf\u4e00\u4e2a\u6700\u5c0f\u9879/\u6700\u5927\u9879\u4e2d\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u51fa\u73b0\uff0c\u6240\u4ee5\u53ef\u80fd\u6709\u5197\u4f59\uff0c\u6807\u51c6\u578b\u4e2d\u53bb\u6389\u4e86\u8fd9\u79cd\u5197\u4f59\u3002\u6807\u51c6\u578b\u4e5f\u662f\u4e0d\u552f\u4e00\u7684\u3002</p> <p>\u628a\u6807\u51c6\u578b\u5316\u4e3a\u89c4\u8303\u578b\uff1a\u8865 1 \u6216\u8865 0\u3002 $$ \\begin{aligned} f(x,y,z) &amp;= \\overline{x}\\overline{y}z + y\\overline{z} + x\\overline{z}\\ &amp;= \\overline{x}\\overline{y}z + (x+\\overline{x})y\\overline{z} + x\\overline{z}\\ \\end{aligned} $$ $$ \\begin{aligned} F(X,Y,Z) &amp;= \\sum m(1,2,4,6)\\ &amp;= \\sum m(001, 010, 100, 110)\\ &amp;= \\overline{X}\\overline{Y}Z + \\overline{X}Y\\overline{Z} + X\\overline{Y}\\overline{Z} + XY\\overline{Z} \\end{aligned} $$</p> <p>\u4f7f\u7528 maxterm \u65f6\uff0cF = \\prod M(0,3,5,7)</p> <p>Circuit Optimization</p> <p>Literal cost (L)</p> <p>\u6570\u6570\u53d8\u91cf\u51fa\u73b0\u591a\u5c11\u4e2a\uff0c\u4e0b\u4f8b\u4e2d L=8 $$ BD+A\\overline{B}C+A\\overline{C}\\overline{D} $$ Gate input cost (G)</p> <p>\u4e0d\u7ba1\u6700\u5916\u5c42\u7684\u4e0e\u95e8/\u6216\u95e8\uff0c\u53ea\u662f\u5728 Literal Cost \u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u9879\u6570\uff0c\u4e0b\u4f8b\u4e2d L=9, G=12 $$ BD+A\\overline{B}C+A\\overline{C}\\overline{D}+C $$ Gate input cost with NOTs (GN)</p> <p>\u518d\u52a0\u4e0a Not\uff0c\u4e0b\u4f8b\u4e2d L = 10, G = 14, GN = 17 $$ (A+B)(A+D)(B+C+\\overline{D})(\\overline{B}+\\overline{C}+D) $$</p>"},{"location":"System/Digital%20Logic/#simplification-of-logic-functions","title":"Simplification of logic functions","text":"<p>Algebra Method, Use the theorems; </p> <p>Karnaugh Map, Graphical representations</p> <p>\u4f7f\u7528\u7c7b\u4f3c\u683c\u96f7\u7801\u7684\u7f16\u7801\uff0c\u76f8\u90bb\u683c\u5b50\u4e4b\u95f4\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c\uff0c\u539f\u7406\uff1aAB+A\\overline{B} = A</p> <p></p> <p>\u4e00\u822c\u8d85\u8fc7 4 \u4e2a\u5c31\u4e0d\u518d\u4f7f\u7528\uff0c\u7528\u6cd5\u5c31\u662f\u753b\u6700\u5927\u7684\u5708\u5708\uff0c\u6700\u5c0f\u503c\u7684\u8bdd\u5c31\u662f\u628a\u5708\u91cc\u7684\u52a0\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5316\u7b80\u5f88\u591a\u3002\u753b\u5708\u5708\u4e00\u822c\u753b 2 \u7684\u500d\u6570\uff08\u56e0\u4e3a\u662f prime \u7684\uff09\uff0c\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651\u8fb9\u754c\u548c\u56db\u4e2a\u89d2\u4e5f\u662f\u53ef\u4ee5\u62fc\u8d77\u6765\u7684\u3002</p> <p>\u8574\u542b\u9879 Implicant: Product of literals ABC, AC, BC, \u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u5708\uff0c\u5708\u7684\u5927\u5c0f\u662f 2^n\u3002</p> <p>Prime Implicant: implicant corresponding to the largest circle in a K map, i.e., is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2. \u6ca1\u6709\u5176\u4ed6\u66f4\u5927\u7684\u8574\u542b\u9879\u53ef\u4ee5 Cover \u5b83\u7684\u8574\u542b\u9879\u3002</p> <p>Essential Prime Implicant: A prime implicant is called an Essential Prime Implicant if it is the only prime implicant that covers (includes) one or more minterms. \u5fc5\u987b\u542b\u6709\u81f3\u5c11\u4e00\u4e2a\u6ca1\u88ab\u5305\u542b\u5728\u5176\u5b83\u8574\u542b\u9879\u4e2d\u7684\u9879\uff0c\u800c\u4e14\u5b83\u4e00\u5b9a\u5f97\u4e5f\u662f PI\u3002</p> <p>\u627e\u8d28\u8574\u542b\u9879\uff08PI\uff09\uff1a</p> <p> $$ F(A,B,C,D) = A+\\overline{B}\\overline{D}+\\overline{B}C $$ \u627e\u5b9e\u8d28\u8574\u542b\u9879\uff08EPI\uff09\uff0c\u7136\u540e\u518d\u627e\u4e00\u4e9b Selected PI \u8986\u76d6\u6240\u6709\u7684\u9879\uff1a</p> <p></p> <p>\u5148\u628a\u90a3\u4e9b\u6240\u6709\u9879\u90fd\u88ab\u5176\u4ed6\u8d28\u8574\u542b\u9879 Cover \u7684\u53bb\u6389\uff0c\u5f97\u5230\u56fe2\uff0c\u7136\u540e\u518d\u628a\u90a3\u4e9b\u6ca1\u88ab Cover \u7684\u8d28\u8574\u542b\u9879\u52a0\u56de\u53bb\u4f5c\u4e3a Selected PI\u3002</p> <p>\u5982\u679c\u6709 don't case \u7684\u9879 <code>x</code>\uff0c\u53ef\u4ee5\u628a\u5b83\u5f53\u6210 1 \u6765\u770b\uff0c\u4f46\u662f\u4e0d\u989d\u5916\u52a0 Selected PI\u3002\u5373\uff0c\u5982\u679c\u52a0\u4e0a\u4ed6\u53ef\u4ee5\u8ba9 4 \u4e2a\u53d8 8 \u4e2a\uff0c\u5c31\u52a0\uff0c\u8981\u4e0d\u7136\u4e22\u5728\u5916\u9762\u4e5f\u53ef\u4ee5\u3002</p> <p>De Morgan's Theorem in Circuit</p> <p></p>"},{"location":"System/Digital%20Logic/#combinational-logic-design","title":"Combinational Logic Design","text":""},{"location":"System/Digital%20Logic/#introduction-to-verilog-hdl","title":"Introduction to Verilog HDL","text":"<p>FPGA, ASIC(\u4e13\u7528\u96c6\u6210\u7535\u8def) \u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\uff0c\u5e76\u975e\u7c7b\u4f3c CPU, GPU \u7684\u8f6f\u786c\u4ef6\u5206\u5f00</p> <p>CPU \u7b49\u901a\u8fc7\u6307\u4ee4\u64cd\u4f5c\u786c\u4ef6\uff0c\u589e\u52a0\u4e86\u901a\u7528\u6027\u4f46\u662f\u727a\u7272\u4e86\u6548\u7387\u3002</p> <p>HDL: Hardware description language</p> <p>\u8bbe\u8ba1\u6d41\u7a0b\uff1aLogic design with HDL, Simulation, Synthesis \u5f62\u6210\u903b\u8f91\u7535\u8def\u4e0a\u7684\u6574\u5408, Physical Design \u7269\u7406\u8bbe\u8ba1\uff08\u5e03\u5c40\u3001\u5e03\u7ebf\u3001\u9759\u6001\u65f6\u5e8f\u5206\u6790 Delay\uff09, Final step \u6d41\u7247</p> <p>Modeling methods</p> <p>Structured Modeling: Module level, Gate level, Switch level</p> <p>Dataflow Modeling: \u6570\u636e\u5728\u7535\u8def\u4e2d\u6d41\u52a8\u7684\u65b9\u5411\uff0c\u7ec4\u5408\u903b\u8f91\u7535\u8def</p> <p>\u4e00\u822c\u8bbe\u8ba1 Gate Level \u7f16\u7a0b\u7684\u65b9\u6cd5\uff1a\u753b\u771f\u503c\u8868\uff0c\u7136\u540e\u7b80\u5316\u8868\u8fbe\uff0c\u7136\u540e\u753b\u56fe</p> <p></p> <p>\u95e8\u7ea7\uff1a</p> <p></p> <p>\u6570\u636e\u6d41\uff1a</p> <p></p> <p>\u6761\u4ef6\uff1a</p> <p></p> <p></p> <p>\u884c\u4e3a\u7ea7\uff08\u53ef\u80fd\u51fa\u73b0\u4e0d\u4e86\u89e3\u7684\u9519\u8bef\uff09\uff1a</p> <p></p>"},{"location":"System/Digital%20Logic/#about-combinational-logic-circuits","title":"About combinational logic circuits","text":"<p>\u6570\u5b57\u903b\u8f91\u7535\u8def\uff0c\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e9b\u8f93\u5165 -&gt; \u4e00\u4e9b\u8f93\u51fa</p> <p>\u7ec4\u5408 Combinational \u903b\u8f91\u7535\u8def\uff1a\u5f53\u524d\u8f93\u51fa\u53ea\u53d6\u51b3\u4e8e\u5f53\u524d\u8f93\u5165</p> <p>\u65f6\u5e8f Sequential \u903b\u8f91\u7535\u8def\uff1a\u7ed3\u679c\u7531\u5f53\u524d\u8f93\u5165\u548c\u4ee5\u524d\u7684\u72b6\u6001\u5171\u540c\u51b3\u5b9a</p> <p>\u6027\u8d28\uff1a</p> <ul> <li> <p>\u6bcf\u4e2a Element \u90fd\u53ef\u4ee5\u8868\u8fbe\u6210\u4e00\u4e2a\u7ec4\u5408\u903b\u8f91\u7535\u8def</p> </li> <li> <p>Node \u8282\u70b9\uff1a\u6307\u7684\u662f\u7ebf\u76f8\u4ea4\u7684\u5730\u65b9\uff0c\u5b83\u53ea\u80fd\u4f5c\u4e3a\u4e00\u4e2a Element \u7684\u8f93\u51fa</p> </li> <li> <p>\u7ec4\u5408\u903b\u8f91\u7535\u8def\u4e2d\u4e0d\u80fd\u6709\u56de\u8def Loop</p> </li> </ul> <p>Design Choice\uff1a</p> <p>\u7406\u8bba\u4e0a\u6765\u8bb2\uff0c\u6240\u6709\u903b\u8f91\u7535\u8def\u90fd\u53ef\u4ee5\u901a\u8fc7\u89c4\u8303\u578b\uff0c\u6765\u5f62\u6210\u4e00\u4e2a\u53ea\u6709 2 \u5c42\u7684\u7535\u8def\uff0c\u4f8b\u5982\uff0c\u82e5\u4f7f\u7528 minterm\uff0c\u7b2c\u4e00\u5c42\u5168\u662f AND\uff0c\u7b2c\u4e8c\u5c42\u662f\u4e00\u4e2a\u5927 OR\u3002\u6709\u65f6\u5019\u67d0\u4e2a\u95e8\u7684\u8f93\u5165\u592a\u591a\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd8\u662f\u9700\u8981\u4f7f\u7528\u591a\u7ea7\u7535\u8def Multi-Level\u3002</p>"},{"location":"System/Digital%20Logic/#some-classicbasic-designs","title":"Some classic/basic designs","text":"<p>Encoder and decoder</p> <p>\u591a\u8def\u9009\u62e9\u5668 Multiplexer</p> <p></p> <p>\u5bf9\u5e94\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\uff1a $$ F = \\overline{S_0}\\overline{S_0}A + \\overline{S_0}S_1B + S_0\\overline{S_1}C + S_0S_1D $$ \u5982\u679c\u62c6\u5206\u6210 Decoder \u548c AND-OR\uff0c\u76f8\u5f53\u4e8e\u4e0a\u5f0f\u52a0\u62ec\u53f7\uff0c\u53ef\u4ee5\u51cf\u5c0f\u590d\u6742\u5ea6\uff0c\u800c\u4e14\u66f4\u6e05\u6670\u3002</p> <p>\u591a\u8def\u5206\u914d\u5668 Demultiplexer</p> <p></p> <p>D \u53ea\u80fd\u51fa\u73b0\u5728 D1, D2, D3, D4 \u4e2d\u7684\u4e00\u4e2a</p> <p>\u628a\u591a\u4e2a\u8f93\u5165\u7aef\u8f93\u5165\u5230\u603b\u7ebf\u4e0a\uff0c\u518d\u5728\u8f93\u51fa\u65f6\u4ece\u4e3b\u7ebf\u901a\u8fc7\u5206\u914d\u5668\u5206\u914d\u4fe1\u53f7</p> <p>\u534a\u52a0\u5668 Half Adder</p> <p>\u4e0d\u8003\u8651\u8fdb\u4f4d\u8f93\u5165</p> <p></p> <p>$$ F = A\\oplus B, C_{out} = AB $$ \u5168\u52a0\u5668 Full Adder</p> <p></p> <p>\u53ea\u9700\u8981\u6309\u7167\u771f\u503c\u8868\uff0c\u628a\u6307\u4e3a 1 \u7684\u52a0\u8d77\u6765\uff1a $$ \\begin{aligned} F &amp;= \\overline{A}\\overline{B}C_{in}+ \\overline{A}B\\overline{C_{in}}+ A\\overline{B}\\overline{C_{in}} + ABC_{in}\\ &amp;\\xlongequal{\\triangle}A\\oplus B\\oplus C_{in}\\ \\end{aligned} $$ \u5f02\u6216\u8fd0\u7b97\u4e2d\uff0c\u53d6 1 \u7684\u53d8\u91cf\u503c\u4e2a\u6570\u662f\u5947\u6570\u3002 $$ \\begin{aligned} C_{out} &amp;= \\overline{A}BC_{in} + A\\overline{B}C_{in} + AB\\overline{C_{in}} + ABC_{in}\\ &amp;= BC_{in} + A\\overline{B}C_{in} + AB\\overline{C_{in}}\\ &amp;= (B + A\\overline{B})C_{in} + AB\\overline{C_{in}}\\ &amp;= (B + A)(B + \\overline{B})C_{in} + AB\\overline{C_{in}}\\ &amp;= AC_{in} + BC_{in} + AB\\overline{C_{in}}\\ &amp;= A(C_{in} + B\\overline{C_{in}}) + BC_{in}\\ &amp;= A(B + C_{in}) + BC_{in}\\ &amp;= AB + (A + B)C_{in}\\ \\end{aligned} $$ \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u548c\u5b83\u7684\u53d6\u53cd\u540c\u65f6\u51fa\u73b0\u5728\u52a0\u53f7\u4e24\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u7528 T8D\u3002</p> <p>\u5229\u7528\u534a\u52a0\u5668\u5b9e\u73b0\u5168\u52a0\u5668\uff1a\u4e00\u79cd\u753b\u6cd5\u6e05\u6670\u7684\u65b9\u6cd5 - \u5bf9\u4e8e\u8fdb\u4f4d\u4f7f\u7528\u5168\u52a0\u5668\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u4f4d\u7684\u8f93\u51fa\u4f7f\u7528\u534a\u52a0\u5668\u3002</p> <p></p> <p>\u76f4\u63a5\u590d\u7528\uff1a</p> <p>\u9996\u5148\u770b\u903b\u8f91\u8868\u8fbe\u5f0f\uff0cAB + (A + B)C_{in} = AB + (A \\oplus B)C_{in}\uff0c\u4e0b\u8bc1 $$ \\begin{aligned} AB + (A + B)C_{in} &amp;= AB + ((AB + A\\overline{B}) + (BA + B\\overline{A}))C_{in}\\ &amp;= AB(1 + C_{in}) + (A\\overline{B} + \\overline{A}B)C_{in}\\ &amp;= AB + (A \\oplus B)C_{in}\\ \\end{aligned} $$ \u6240\u4ee5\u4e5f\u662f\u7c7b\u4f3c\u534a\u52a0\u5668\u7684\uff0c\u4e0e\u95e8 + \u590d\u7528\u5f02\u6216\uff0c\u6700\u540e\u52a0\u4e00\u4e2a\u6216\u3002\u5168\u52a0\u5668\u662f 2 \u7ea7\u7535\u8def\uff08\u5316\u4e3a\u6700\u5c0f\u9879\u5c31\u662f 2\uff0c\u53ef\u4ee5\u7528\u591a\u8f93\u5165\u7684\u95e8\uff09\u3002</p>"},{"location":"System/Digital%20Logic/#timing-analysis","title":"Timing analysis","text":"<p>Propagation delay T_{pd} = max delay from input to output\uff0c\u6240\u6709\u7684\u8f93\u51fa\u90fd\u7a33\u5b9a\u4e0b\u6765</p> <p>Contamination delay T_{cd} = min delay from input to output\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u8f93\u51fa\u53d1\u751f\u6539\u53d8\u4e86</p> <p></p> <p>Race Hazard \u53ef\u80fd\u51fa\u73b0\u7684\u73b0\u8c61\uff1a</p> <p>\u5982\u679c A \u7684\u8f93\u5165\u4ece 0 \u5230 1\uff0c\u4e0d\u4f1a\u6709\u53d8\u5316\uff1b\u4f46\u662f \uff21 \u7684\u8f93\u5165\u4ece 1 \u5230 0\uff0c\u5c31\u4f1a\u6709\u53d8\u5316\u3002</p> <p></p>"},{"location":"System/Digital%20Logic/#computational-operations-units","title":"Computational Operations &amp; Units","text":""},{"location":"System/Digital%20Logic/#basic-computational-units","title":"Basic computational units","text":"<p>Multibit Carry Propagate Adders (CPA)</p> <p>\u52a0\u6cd5\u5668\u7684\u4f18\u5316</p> <ul> <li>Ripple-carry - Slow \u4e32\u884c</li> <li>Carry-lookahead - Fast</li> <li>Prefix - Faster</li> </ul> <p>Ripple Carry Adder (RCA)</p> <p>\u884cxing\u6ce2\uff0c\u628a\u5404\u4e2a\u4e00\u4f4d\u5168\u52a0\u5668\u4e32\u8d77\u6765\uff0c\u524d\u4e00\u4f4d\u7684 C_{out} \u4f5c\u4e3a\u4e0b\u4e00\u4f4d\u7684 C_{in}\u3002</p> <pre><code>module FA (\n    input x, y, cin, \n    output s, cout\n);\n    assign s = x ^ y ^ cin;\n    assign cout = (x &amp; y) | (x &amp; cin) | (y &amp; cin);\nendmodule\n\nmodule RCA (\n    input [3:0] x, y,\n    input cin,\n    output [3:0] s,\n    output cout,\n);\n    wire [4:0] c;\n    assign c[0] = cin;\n    FA fa0(x[0], y[0], c[0], s[0], c[1]);\n    FA fa1(x[1], y[1], c[1], s[1], c[2]);\n    FA fa2(x[2], y[2], c[2], s[2], c[3]);\n    FA fa3(x[3], y[3], c[3], s[3], c[4]);\n    assign cout = c[4];\nendmodule\n</code></pre> <p>Carry Lookahead Adder (CLA)</p> <p>\u5982\u679c\u628a\u4e0a\u9762\u7684\u4f9d\u8d56\u8c03\u7528\u5c55\u5f00\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u4f9d\u8d56</p> <p></p> <p>\u8fdb\u4e00\u6b65\u5730\uff0c\u5982\u679c\u4f7f\u7528\u4e0b\u9762\u7684\u53d8\u91cf\u66ff\u6362\uff1a</p> <p>G_i = A_iB_i \u4f5c\u4e3a\u751f\u6210\u8fdb\u4f4d\u7684\u529f\u80fd</p> <p>P_i = A_i \\oplus B_i \u4f5c\u4e3a\u4f20\u64ad\u8fdb\u4f4d\u7684\u529f\u80fd</p> <p>C_{i + 1} = A_iB_i + (A_i + B_i)C_i = G_i + P_i C_i\u3002S_i = P_i\\oplus C_i</p> <p>\u8fd9\u6837\u53ef\u4ee5\u6709 $$ \\begin{aligned} C_4 &amp;= G_3 + P_3 G_2 + P_3 P_2 G_1 + P_3 P_2 P_1 G_0 + P_3 P_2 P_1 P_0 C_0\\ &amp;= G_3+P_3(G_2+P_2(G_1+P_1G_0)) + P_3 P_2 P_1 P_0 C_0\\ &amp;= G_{3:0}+P_{3:0}C_0 \\end{aligned} $$ \u6240\u4ee5\u6bcf\u4e2a FA\uff08\u5168\u52a0\u5668\uff09\u90fd\u53ef\u4ee5\u72ec\u7acb\u5e76\u884c\u4ea7\u751f G_i, P_i\uff0c\u7136\u540e\u5168\u90e8\u63d0\u4f9b\u7ed9 CLU \u6765\u8ba1\u7b97 C_{i}\u3002\u4e4b\u540e\u518d\u8ba1\u7b97 S_i \u65f6\u9700\u8981 C_{in_i}\uff0c\u53ef\u4ee5\u7531 CLU \u63d0\u4f9b\uff0c\u662f\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\u7684\u3002</p> <p></p> <p>CLU \u662f 3 \u7ea7\u95e8\u7535\u8def\uff0c\u6700\u5c0f\u9879\u76842 + G,P\u8ba1\u7b97\u65f6\u76841 = 3</p> <p>S_i \u662f\u5728 C_{i} \u57fa\u7840\u4e0a\u7b97\u7684\uff0c\u6240\u4ee5\u662f 3+1 = 4</p> <p>\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u4e0d\u80fd\u8ba9\u6d41\u5165\u95e8\u7684\u7535\u8def\u8fc7\u591a\uff0c\u6240\u4ee5\u8981\u5206\u6210\u4e00\u4e2a\u4e2a Block\uff1a\u4f8b\u5982\uff0c\u6bcf4\u4f4d\u7b97\u4e00\u6b21</p> <p>\u5982\uff0c\u5b9a\u4e49 $$ G_{i:j} = G_i+P_i(G_{i-1}+P_{i-1}(G_{i-2}+P_{i-2}G_j))\\ P_{i:j} = P_{i}P_{i-1}P_{i-2}P_{j}\\ C_{i+1} = G_{i:j} + P_{i:j}C_j $$ \u5219\u6709 $$ C_4 = G_{3:0} + P_{3:0}C_0\\ C_8 = G_{7:4} + P_{7:4}C_4\\ C_{12} = G_{11:8} + P_{11:8}C_8\\ C_{16} = G_{15:12} + P_{15:12}C_{12}\\ $$ \u76f8\u5f53\u4e8e\u6bcf\u4e2a Block \u5185\u90e8\u662f\u5e76\u884c\u7684\uff0c\u4f46\u662f\u7528\u4e32\u884c\u7684\u65b9\u5f0f\u518d\u7ec4\u5408\u8d77\u6765\u3002</p> <p>Prefix Adder</p> <p>\u7531\u4e8e C_i \u53ef\u4ee5\u770b\u4f5c\u4ece\u6700\u4f4e\u4f4d\u4e00\u76f4\u5230 i \u4f4d\u7684\u8fdb\u4f4d Generate\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49 C_{i} = G_{i:-1}\uff0c\u7136\u540e\u6709 $$ G_{i:j}=G_{i:k}+P_{i:k}G_{k-1:j}\\ P_{i:j} = P_{i:k}P_{k-1:j} $$ \u7136\u540e\u5229\u7528\u6811\u5f62\u7ed3\u6784\uff08\u590d\u6742\u5ea6\u662f \\log \u7684\uff09\uff0c\u7528\u7c7b\u4f3c\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u8ba1\u7b97\uff1f</p> <p>Half Subtractor $$ D = X\\oplus Y, B_{out} = \\overline{X}Y $$ Full Subtractor $$ D = X\\oplus Y\\oplus B_{in}, B_{out} = \\overline{X}Y + (\\overline{X} + Y)B_{in} $$ \u53e6\u4e00\u79cd\u5168\u51cf\u5668\uff0c\u5229\u7528\u8865\u7801\u6027\u8d28\uff1aX-Y = X + \\overline{Y} + 1\uff0c\u8fd9\u4e2a 1 \u653e\u5728 C_{in} \u6765\u8bfb\u5165\u8fdb\u53bb</p>"},{"location":"System/Digital%20Logic/#fixed-number-operations","title":"Fixed number operations","text":"<p>Adder-Subtractors \u52a0\u51cf\u5668</p> <p>S \u672c\u8eab\u4e5f\u88ab\u4f5c\u4e3a C_0 \u8f93\u5165</p> <p>Flags: Overflow Flag, Carry Flag, Zero Flag, Sign Flag</p> <p>\u6ea2\u51fa Overflow\uff0c\u53ea\u9488\u5bf9\u6709\u7b26\u53f7\u7684\u8fd0\u7b97\u800c\u8a00\u7684</p> <p>\u6709\u7b26\u53f7\u7684\u6ea2\u51fa\u7684\u5b9a\u4e49\uff1a\u5bf9\u5e94\u4e86\u6b63+\u6b63=\u8d1f\uff0c\u4ee5\u53ca\u8d1f+\u8d1f=\u6b63\u4e24\u79cd\u60c5\u51b5\uff0c\u53ea\u8981\u6709\u4e86\u6ea2\u51fa\uff0c\u90a3\u7ed3\u679c\u4e00\u5b9a\u4e0d\u5bf9\uff1b\u6b63\u6570\u52a0\u8d1f\u6570\u4e00\u5b9a\u662f\u6ca1\u6709\u6ea2\u51fa\u7684\u3002</p> <p>\u8fdb\u4f4d Carry Flag \u7684\u5b9a\u4e49\uff1a\u662f\u5426\u591a\u4e86\u4e00\u4f4d\uff0c\u4ee3\u8868\u7684\u662f\u6bd4\u9ad8\u4f4d\u66f4\u9ad8\u4e00\u4f4d\u7684\u6570</p> <p>\u4e0d\u80fd\u4f9d\u9760\u662f\u5426\u8fdb\u4f4d\u6765\u5224\u65ad\u662f\u5426\u6ea2\u51fa\uff0c\u6bd4\u5982 (-1) + 7 = 6\uff0c\u5373 1111 + 0111 = 10110\uff0c\u867d\u7136\u6709\u8fdb\u4f4d\uff0c\u4f46\u662f\u540e 4 \u4f4d\u7ed3\u679c\u662f\u5bf9\u7684\uff0c\u5e76\u6ca1\u6709\u6ea2\u51fa\u3002</p> <p>ZF\uff1a<code>~(|S)</code>\uff0c\u6240\u6709 bits \u90fd\u662f 0 \u7684\u65f6\u5019\uff0c\u53d6\u53cd\u624d\u662f 1\u3002</p> <p>SF\uff1a\u6700\u9ad8\u4f4d</p> <p>OF\uff1a1. \u7b26\u53f7\u4f4d\u53d1\u751f\u6b63\u6b63\u5f97\u8d1f\u6216\u8d1f\u8d1f\u5f97\u6b63\uff1b2. OF = C_{n - 1} \\oplus C_{n} $$ \\begin{aligned} OF &amp;= A_{n-1}B_{n-1}\\overline{F}{n-1}+\\overline{A}{n-1}\\overline{B}{n-1}{F}{n-1}\\ &amp;= C_{n - 1} \\oplus C_{n} \\end{aligned} $$ \u53ef\u4ee5\u901a\u8fc7\u771f\u503c\u8868\u8bc1\u660e\u3002\u5982\u679c C_{n-1}=1\uff0cC_n=0\uff0c\u610f\u5473\u7740\u6b63\u6b63\u5f97\u8d1f\u6ea2\u51fa\uff08\u4ece n-2  \u4f4d\u8fdb\u4e0a\u6765\u4e00\u4e2a 1\uff0c\u7136\u540e\u53cd\u800c\u4e0d\u518d\u8fdb\u4f4d\u4e86\uff0c\u5c31\u76f8\u5f53\u4e8e n-1 \u4f4d\uff08\u7b26\u53f7\u4f4d\uff09\u90fd\u662f 0\uff0c\u4f46\u7ed3\u679c\u662f 1\uff09</p> <p>CF\uff1a\u5bf9\u4e8e\u52a0\u6cd5\u6216\u8005\u76f4\u63a5\u505a\u51cf\u6cd5\uff0cCF=1\u5c31\u610f\u5473\u7740\u6709\u8fdb\u4f4d/\u501f\u4f4d\uff0cCF=0\u610f\u5473\u7740\u6ca1\u6709\u8fdb\u4f4d/\u501f\u4f4d\uff1b\u5bf9\u4e8e\u628a\u51cf\u6570\u53d6\u53cd\u52a0\u4e00\u518d\u7528\u52a0\u6cd5\u7684\u65b9\u5f0f\u7684\u51cf\u6cd5\u800c\u8a00\uff0cCF=1\u610f\u5473\u7740\u6ca1\u6709\u8fdb\u4f4d\uff0cCF=0\u610f\u5473\u7740\u6709\u8fdb\u4f4d\u3002</p> <p>\u6240\u4ee5\uff0c\u5bf9\u4e8e\u53d6\u53cd\u52a0\u4e00\u7684\u8fd9\u79cd\u51cf\u6cd5\uff0c\u5bf9 Carry \u540e\u9762\u7684\u7ed3\u679c\u800c\u8a00\u662f\u76f8\u540c\u7684\uff0c\u4f46\u662f\u4f1a\u628a Carry \u7ed9\u53d6\u53cd\u3002</p> <p>\u5b9e\u9645\u5e94\u7528\u65f6\uff0c\u7528 C_0=1 \u6765\u8868\u793a\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff08\u4f20\u5165\u7684\u662f A \u548c \\sim B \uff09\uff0c\u7528 C_0=0 \u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u90a3\u4e48\u5c31\u6709 CF = C_{n}\\oplus C_0\u3002</p>"},{"location":"System/Digital%20Logic/#arithmetic-logic-unit-alu","title":"Arithmetic logic unit (ALU)","text":"<p>\u53ef\u4ee5\u5b9e\u73b0 AND, OR, ADD \u7b49</p> <p>ALU \u8fdb\u884c\u4e86\u5f88\u591a\u8fd0\u7b97\u540e\uff0c\u6709\u8bb8\u591a\u53ef\u4ee5\u6709\u7684\u8f93\u51fa\uff0cALU \u4e2d\u662f\u903b\u8f91\u95e8\u3001\u5168\u52a0\u5668\u548c\u591a\u8def\u9009\u62e9\u5668\u7684\u7ed3\u5408\uff0c\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u9009\u62e9\u5230\u5e95\u8f93\u51fa\u54ea\u4e00\u4e2a Result\u3002</p> <p>\u5b9a\u4e49\u8fd0\u7b97\u7b26 SLT (Set Less Than)\uff1a\u5982\u679c A&lt;B\uff0c\u8f93\u51fa 1\uff1b\u5982\u679c A\\ge B\uff0c\u8f93\u51fa 0\u3002\u53ea\u9700\u8981\u5728\u51cf\u4e4b\u540e\u7684\u7ed3\u679c\u4e0a\uff0c\u5bf9\u6700\u9ad8\u4f4d\u8fdb\u884c 0 \u6269\u5c55\uff08Zero Extend\uff09\u5373\u53ef\u8f93\u51fa\uff08\u6700\u7ec8\u8f93\u51fa\u4e3a <code>0x00000001</code> \u6216 <code>0x00000000</code>\uff09\u3002</p> <p>Shift\uff1a\u903b\u8f91\u5de6\u79fb\u53f3\u79fb\u3001\u7b97\u6570\u5de6\u79fb\u53f3\u79fb\u3001\u5faa\u73af\u5de6\u79fb\u53f3\u79fb</p> <p><code>shamt</code>: Shift Amount\uff0c\u79fb\u52a8\u51e0\u4f4d\uff1b\u5b9e\u73b0\u65b9\u5f0f\uff1a\u591a\u8def\u9009\u62e9\u5668 + \u8fde\u5bfc\u7ebf</p> <p>Multiplication</p> <p>\u88ab\u4e58\u6570\uff1aMultiplicand\uff1b\u4e58\u6570\uff1aMultiplier\uff1b\u90e8\u5206\u79ef\uff08\u7ad6\u5f0f\u7684\u4e2d\u95f4\u7ed3\u679c\uff09\uff1aPartial Products</p> <p>\u7531\u4e8e\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u53ea\u6709 0 \u548c 1\uff0c\u90a3\u5176\u5b9e\u76f8\u5f53\u4e8e\u88ab\u4e58\u6570\u5de6\u79fb\u67d0\u4e9b\u4f4d\u6570\u4e4b\u540e\uff0c\u518d\u52a0\u8d77\u6765\uff1b\u4e58\u6570\u7684\u4f5c\u7528\u662f\u4e3a\u4e86\u786e\u5b9a\u8fd9\u4e2a\u201c\u67d0\u4e9b\u4f4d\u6570\u201d\u3002\u5982\u679c\u4e58\u6570\u4e2d\u6bcf\u4e00\u4f4d\u662f 0\uff0c\u90a3\u5bf9\u5e94\u7684\u90e8\u5206\u79ef\u4e2d\u7684\u90a3\u4e00\u884c\u4e00\u5b9a\u90fd\u662f 0\uff0c\u5bf9\u7ed3\u679c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002</p> <p>\u6cd51\uff1a\u7531\u4e8e\u628a\u6240\u6709\u7684 Partial Product \u662f\u8981\u5168\u52a0\u8d77\u6765\u7684\uff0c\u5982\u679c\u5355\u72ec\u4fdd\u5b58\u4f1a\u5360\u7528\u5927\u91cf\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u91c7\u7528 Partial Sum \u7684\u65b9\u5f0f\uff0c\u6bcf\u4e00\u6b65\u90fd\u5c06\u88ab\u4e58\u6570\u5de6\u79fb\u4e00\u6b21\u3001\u628a\u4e58\u6570\u53f3\u79fb\u4e00\u6b21\uff0c\u7136\u540e\u770b\u4e58\u6570\u6700\u4f4e\u4f4d\u5982\u679c\u662f 1\uff0c\u5219\u628a\u5bf9\u5e94\u7684\u88ab\u4e58\u6570\u52a0\u5230 Partial Sum \u91cc\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5047\u8bbe\u539f\u6570\u7684\u4f4d\u6570\u662f x bit\uff0c\u90a3\u90e8\u5206\u548c\u3001\u88ab\u4e58\u6570\u4ee5\u53ca\u79ef\u90fd\u9700\u8981 2x bit\uff08\u8fd8\u9700\u8981\u5de6\u79fb\uff09\uff0c\u4e58\u6570\u9700\u8981 x bit\uff08\u56e0\u4e3a\u53ea\u9700\u8981\u53f3\u79fb\uff09\u3002</p> <p>\u7f3a\u9677\uff1aALU\u548c\u88ab\u4e58\u6570\u9700\u8981\u7684\u4f4d\u6570\u8fc7\u5927\uff0c\u9700\u8981 2x\uff1b\u4e58\u79ef\u5728\u6700\u540e\u4e00\u6b65\u4e4b\u524d\u90fd\u4e0d\u9700\u8981 2x\uff1b\u6700\u540e\u901a\u8fc7\u53f3\u79fb\u628a\u4e58\u6570\u5bc4\u5b58\u5668\u6392\u7a7a\u4e86\uff0c\u5f88\u591a\u7a7a\u95f4\u88ab\u6d6a\u8d39\u6389\u4e86</p> <p>\u4f18\u5316\uff1f</p> <p>\u6cd52\uff1a\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\uff0c\u4e58\u6570\u548c\u4e58\u79ef\u7684\u5bf9\u5e94\u6700\u4f4e\u4f4d\u90fd\u76f8\u540c\u5373\u53ef\uff1b\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4e58\u6570\u7684\u6700\u540e\u4e00\u4f4d\u548c\u88ab\u4e58\u6570\u4e58\u8d77\u6765\uff0c\u7136\u540e\u628a\u7ed3\u679c\u5b58\u5728 product \u7684\u524d x \u4f4d\u91cc\uff0c\u4e4b\u540e\u628a\u4e58\u6570\u53f3\u79fb\u3001product \u53f3\u79fb\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u8282\u7701\u4e86\u7a7a\u95f4\u3002</p> <p>\u4f46\u662f\u8fd9\u91cc\uff0cproduct \u8fd8\u662f\u989d\u5916\u5360\u7528\u7a7a\u95f4\u4e86\u7684\u3002</p> <p>\u6cd53\uff1a\u6211\u4eec\u53d1\u73b0\uff0c\u4e58\u79ef\u7684\u540e p \u4f4d\u662f\u65e0\u6548\u7684\uff0c\u800c\u4e58\u6570\u7684\u524d p \u4f4d\u662f\u6709\u6548\u7684\u3002\u6240\u4ee5\u521a\u597d\u53ef\u4ee5\u7528\u4e58\u79ef\u7684\u5bc4\u5b58\u5668\u7684\u540e\u51e0\u4f4d\u6765\u5b58\u4e58\u6570\uff0c\u53ef\u4ee5\u907f\u514d\u4e58\u79ef\u5bc4\u5b58\u5668\u7684\u6d6a\u8d39\u3002</p> <p>Signed Multiplication</p> <ol> <li>\u8003\u8651\u7b26\u53f7\u6269\u5c55\uff08\u7b97\u672f\u53f3\u79fb\uff09</li> <li>\u6700\u540e\u4e00\u6b21\u7684\u65f6\u5019\uff0c\u4e58\u6570\u6700\u9ad8\u4f4d\u5982\u679c\u662f 1\uff0c\u90a3\u6700\u540e\u4e00\u6b21\u8981\u5728\u524dx\u4f4d\u51cf\u88ab\u4e58\u6570</li> </ol> <p>Booth's Encoding</p> <p>\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u5982\u679c\u9047\u5230\u8fde\u7eed\u7684 1\uff0c\u5b9e\u9645\u4e0a\u7b49\u4ef7\u4e8e\u628a 1 \u7684\u6700\u4f4e\u4f4d\u5bf9\u5e94\u7684\u6b21\u65b9\u7ed9\u51cf\u6389\uff0c\u518d\u52a0\u4e0a 1 \u7684\u6700\u9ad8\u4f4d\u7684\u9ad8\u4e00\u4f4d\u5bf9\u5e94\u7684\u6b21\u65b9</p> <p>\u6bd4\u5982\uff0c6 = (0110)_2 = 2^3-2^1</p> <p>\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6765\u4f18\u5316\u4e58\u6cd5\uff1a\u9047\u5230\u51cf\u7684\u5c31\u52a0\u53d6\u53cd\u52a0\u4e00</p> <p>\u539f\u7406\uff1a $$ \\begin{aligned} b\\times \\overline{a_{31}a_{30}\\dots a_0} =&amp; a_0\\times b\\times 2^0 + a_1\\times b\\times 2^1+\\cdots +a_{31}\\times b\\times 2^{31}\\ =&amp; (0-a_0)\\times b\\times 2^{0} + (a_0 - a_1)\\times b\\times 2^1 + \\cdots + (a_{30} - a_{31})\\times b\\times 2^{31}\\&amp;+a_{31}\\times b\\times 2^{32}\\ \\mod2^{32}\\equiv&amp; (0-a_0)\\times b\\times 2^{0} + (a_0 - a_1)\\times b\\times 2^1 + \\cdots + (a_{30} - a_{31})\\times b\\times 2^{31} \\end{aligned} $$ \u7528\u6cd5\uff1a\u5728\u6700\u4f4e\u4f4d\u7684\u6700\u540e\u518d\u8865\u4e00\u4e2a 0\uff0c\u8fd9\u6837\u80fd\u589e\u52a0\u7b97\u6cd5\u901a\u7528\u6027</p> <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e24\u4f4d\u4e00\u7ec4\uff0c\u540c\u65f6\u5224\u65ad 2 \u4f4d\uff0c\u6bcf\u6b21\u53f3\u79fb 2 \u4f4d</p> <p></p> <p>If Booth\u2019s encoding is '2': Shift multiplicand left by 1, then subtract If Booth\u2019s encoding is '1': Subtract If Booth\u2019s encoding is '0': Do nothing If Booth\u2019s encoding is '1': Add If Booth\u2019s encoding is '2': Shift multiplicand left by 1, then add</p> <p>\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4ece\u7ad6\u5f0f\u57fa\u7840\u4e0a\u76f4\u63a5\u8f6c\u6362\u4e3a\u52a0\u6cd5\u5668\uff0c\u7136\u540e\u4f7f\u7528\u5bf9\u52a0\u6cd5\u5668\u7684\u4f18\u5316\u6765\u4f18\u5316\u3002</p> <p>\u5177\u4f53\u7b97\u6cd5\uff1a</p> <p>\u50cf\u521a\u521a\u4e00\u6837\uff0c\u6700\u5f00\u59cb\u524d 4 \u4f4d\u8868\u793a Product\uff0c\u540e 4 \u4f4d\u8868\u793a Multiplier\uff0c\u7136\u540e\u4e0d\u65ad\u53f3\u79fb\uff0c\u628a\u65b0\u7684\u8981\u51cf/\u52a0\u7684\u52a0\u5230\u524d 4 \u4f4d\u3002</p> <p>Booth \u7b97\u6cd5\u53f3\u79fb\u7684\u65f6\u5019\uff0c\u65e0\u8bba\u662f\u8ba1\u7b97\u65e0\u7b26\u53f7\u8fd8\u662f\u6709\u7b26\u53f7\uff0c\u90fd\u4f7f\u7528\u7b97\u672f\u53f3\u79fb\u3002</p> <p>\u5982\uff0c(1000)_2\\times (0100)_2</p> <p></p> <p>Division</p> <p>\u5f53\u4f59\u6570&gt;\u9664\u6570\u65f6\uff0c\u5546\u5f971</p> <p>restoring division \u201c\u6062\u590d\u4f59\u6570\u9664\u6cd5\u201d\uff0c\u5148\u51cf\uff0c\u5982\u679c\u53d1\u73b0\u51cf\u6210\u8d1f\u4e86\uff0c\u518d\u6062\u590d</p> <p>\u9700\u8981\u6ce8\u610f\uff1a\u5982\u679c\u8ba1\u7b97 32 \u4f4d\u9664\u6cd5 \uff0c\u9700\u8981\u591a\u505a\u4e00\u6b21\uff0c\u5171 33 \u6b21\u5faa\u73af</p> <p>\u6cd51\uff1a\u9664\u6570\u6269\u5c55\u52302\u500d\u3002\u6bcf\u6b21\u5faa\u73af\u91cc\uff0c\u9996\u5148\u628a\u5546\u5de6\u79fb\u4e00\u4f4d\uff0c\u7136\u540e\u9664\u6570\u53f3\u79fb\uff0c\u7136\u540e\u62ff\u88ab\u9664\u6570\u548c\u5b83\u76f8\u51cf\uff0c\u5982\u679c\u662f\u8d1f\u5219\u628a\u88ab\u9664\u6570\u52a0\u56de\u53bb\u7136\u540e\u8df3\u8fc7\uff0c\u5982\u679c\u662f\u6b63\u5219\u628a\u5546\u6700\u4f4e\u4f4d\u8bbe\u4e3a1\uff0c\uff08\u88ab\u9664\u6570\u5df2\u7ecf\u51cf\u8fc7\u9664\u6570\uff09\u3002</p> <p>\u6cd52\uff1a\u53ea\u9700\u898132\u6b21\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6b21\u5b9e\u9645\u662f\u6ca1\u7528\u7684\uff1f\u7a7a\u95f4\u4e0a\u7684\u5f00\u9500\u53ef\u4ee5\u6539\u8fdb\uff0c\u53ea\u9700\u8981\u628a\u5546\u5b58\u5728\u88ab\u9664\u6570\u91cc\uff0c\u9664\u6570\u4e0d\u53d8\uff0c\u8ba9\u88ab\u9664\u6570\u5de6\u79fb</p> <p>\u6cd53\uff1a\u4e0d\u6062\u590d\u4f59\u6570\u7684\u9664\u6cd5\uff0c\u9488\u5bf9\u6cd52\u7684\u6539\u8fdb\u3002????????? \u52a0\u3001Shift\u3001\u51cf == Shift\u3001\u52a0</p> <p></p> <p>\u9664\u6cd5\u53ea\u80fd\u5904\u7406\u975e\u7b26\u53f7\u6570\uff0c\u5bf9\u4e8e\u7b26\u53f7\u6570\u8fd8\u662f\u53ea\u80fd\u5148\u628a\u5b83\u53d6\u7edd\u5bf9\u503c\u7136\u540e\u518d\u52a0\u7b26\u53f7\u3002</p>"},{"location":"System/Digital%20Logic/#sequential-logic-design","title":"Sequential Logic Design","text":""},{"location":"System/Digital%20Logic/#introduction-to-sequential-circuits","title":"Introduction to sequential circuits","text":"<p>\u7ec4\u5408\u903b\u8f91\u91cc\uff0c\u7ebf\u4e0d\u80fd\u6765\u81ea\u4e24\u4e2a\u8f93\u5165\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5b58\u50a8\u72b6\u6001\u3002</p> <p>\u65f6\u5e8f\u903b\u8f91\u91cc\uff0c\u53ef\u4ee5\u5b58\u50a8\u72b6\u6001\uff0c\u72b6\u6001\uff1a\u901a\u8fc7\u5f53\u524d\u7684\u4fe1\u606f\u552f\u4e00\u786e\u5b9a\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u7684\u52a8\u4f5c</p> <p>\u53cc\u7a33\u6001\u7535\u8def Bistable circuits: Latches \u9501\u5b58\u5668, Flip-flops \u89e6\u53d1\u5668</p> <p>\u7535\u5e73\uff08\u4f4e\u7535\u5e73 Low \u9ad8\u7535\u5e73 High\uff09\uff0c\u4ece\u4f4e\u5230\u9ad8\u7684\u90a3\u90e8\u5206\u53eb\u505a Rising Edge\uff0c\u4ece\u9ad8\u5230\u4f4e\u7684\u662f Falling Edge</p> <p>\u65f6\u949f\u5468\u671f Clock Level\uff1a\u4fe1\u53f7\u5728\u9ad8\u548c\u4f4e\u4e4b\u95f4\u7684\u53d8\u5316</p> <p>Level-triggered/sensitive \u7535\u5e73\u89e6\u53d1/\u7535\u5e73\u654f\u611f\uff0c\u548c\u7535\u5e73\u76f8\u5173\u7684</p> <p>Edge-triggered/sensitive \u8fb9\u7f18\u89e6\u53d1/\u8fb9\u7f18\u654f\u611f\uff0c\u53d1\u751f\u6539\u53d8\u7684\u65f6\u5019\u624d\u4f1a\u89e6\u53d1</p> <p>\u8109\u51b2\u89e6\u53d1\uff1aPulse triggered</p> <p>\u4e00\u822c\u4f7f\u7528 Edge-triggered\uff0c\u56e0\u4e3a\u7535\u5e73\u7ef4\u6301\u65f6\u95f4\u4e00\u822c\u662f\u5f88\u957f\u7684\uff0c\u65f6\u65f6\u523b\u523b\u90fd\u5728\u89e6\u53d1\uff0c\u89e6\u53d1\u5668\u53ef\u4ee5\u66f4\u597d\u7684\u63a7\u5236\u89e6\u53d1\u7684\u65f6\u95f4</p> <p>Mealy Model: outputs = g(inputs, state)</p> <p>Moore Model: outputs = h(state)\uff0c\u6ca1\u6709\u8f93\u5165\uff0c\u540e\u9762\u7684\u4e00\u4e9b\u8f93\u5165\u53d6\u51b3\u4e8e\u4e4b\u524d\u7684\u72b6\u6001</p> <p>\u5f53\u524d\u72b6\u6001\u79f0\u4e3a state\uff0c\u4e0b\u4e00\u72b6\u6001\u662f next state\uff0c\u5219 next state = f(inputs, state)</p> <p>\u5b58\u50a8\u5355\u5143\uff1a\u8ba9\u72b6\u6001\u53ef\u4ee5\u4fdd\u5b58\u5728\u7535\u8def\u91cc\uff0c\u5982\u901a\u8fc7\u7f13\u51b2\u5668\uff08\u5982\uff0c\u4e24\u4e2a\u53cd\u76f8\u5668\uff09\u8fd9\u6837\u8fde\u8d77\u6765</p> <p></p> <p>\u540c\u6b65\u65f6\u5e8f\u7535\u8def Synchronous\uff1a\u8f93\u51fa\u53ea\u5728\u79bb\u6563\u7684\u65f6\u95f4\u53d1\u751f\u6539\u53d8\uff0c\u501f\u52a9\u65f6\u949f\u4fe1\u53f7\u5b9e\u73b0\uff1b\u6240\u6709\u89e6\u53d1\u5668\u7684\u65f6\u5e8f\u7535\u8def\u90fd\u4f7f\u7528\u540c\u6837\u4e00\u4e2a\u65f6\u949f</p> <p>\u5f02\u6b65\u65f6\u5e8f\u7535\u8def Asynchronous\uff1a\u662f clock less \u7684\uff0c\u4fe1\u53f7\u662f\u8fde\u7eed\u53d8\u5316\u7684\uff1b\u89e6\u53d1\u5668\u4f7f\u7528\u4e0d\u540c\u7684\u65f6\u949f</p> <p>\u6709\u9650\u72b6\u6001\u673a Finite state machine FSM</p> <p>\u72b6\u6001\u8868 State Table\uff1a\u8f93\u5165\uff1ainput. current state\uff1b\u8f93\u51fa\uff1aoutput, next state</p> <p>\u72b6\u6001\u56fe State Diagram</p> <p>\u6ce8\u610f\uff1a\u53d8\u5316\u662f\u6709\u65f6\u949f\u5468\u671f\u7684\uff0c\u4e0d\u662f\u8fde\u7eed\u7684</p>"},{"location":"System/Digital%20Logic/#basic-sequential-logic-elements","title":"Basic sequential logic elements","text":"<p>\u53cc\u7a33\u6001\u7535\u8def Bistable circuit\uff1a\u4e24\u4e2a output Q,\\overline Q\uff0c\u6ca1\u6709\u8f93\u51fa</p> <p>\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a Q\uff0c\u5b83\u4f1a\u4e00\u76f4\u7a33\u5b9a\u3002</p> <p>SR Latch SR (Set/Reset) \u9501\u5b58\u5668</p> <p></p> <p>\u8fd9\u91cc\u7684\u53d8\u5316\u89c6\u4f5c\u8fde\u7eed\u7684\uff0c\u76f4\u5230\u7a33\u5b9a\u4e3a\u6b62\uff1b\u6709\u4e24\u4e2a\u8f93\u51fa\uff1aQ,\\overline{Q}\\xlongequal{\\triangle}P $$ q = \\overline{r+p}, p = \\overline{s+q} $$ S = 0, R = 0\uff0c\u7a33\u5b9a\u7684\u4fdd\u5b58\u4e4b\u524d\u7684\u72b6\u6001\uff0c\u6709\u4e24\u79cd\u7a33\u6001</p> <p>S = 1, R = 0\uff0c\u6709\u4e00\u79cd\u7a33\u6001 Q = 1, P = 0</p> <p>S = 0, R = 1\uff0c\u6709\u4e00\u79cd\u7a33\u6001 Q = 0, P = 1</p> <p>S = 1, R = 1\uff0c\u6709\u4e00\u79cd\u7a33\u6001 Q = 0, P = 0\uff0cInvalid State\uff0c\u5982\u679c\u7a81\u7136\u518d\u628a S,R \u540c\u65f6\u7f6e 0\uff0c\u4f1a\u4ea7\u751f\u632f\u8361\u3002</p> <p>\u53ea\u6709\u4e00\u79cd\u7a33\u6001\u7684\u5408\u6cd5\u72b6\u6001\u65f6\uff0cS \u548c Q \u603b\u662f\u5339\u914d\u7684\u3002</p> <p>SR Latch with NAND Gates</p> <p>\u8f93\u5165\u662f \\overline{S},\\overline{R}\u3002</p> <p></p> <p>\u53ef\u4ee5\u5229\u7528\u5b83\u6539\u9020\u6210\u63a7\u5236\u8f93\u5165\u7684\u9501\u5b58\u5668</p> <p>SR Latch with Control input (Clocked SR Latch)</p> <p>\u5f53\u65f6\u949f\u662f 0 \u7684\u65f6\u5019\uff0c\u65e0\u8bba S,R \u600e\u4e48\u53d8\u5316\uff0cQ \u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff1b\u5f53\u65f6\u949f\u662f 1 \u7684\u65f6\u5019\uff0c\u624d\u76f8\u5f53\u4e8e\u666e\u901a\u9501\u5b58\u5668\u3002</p> <p></p> <p>D Latch (Data \u9501\u5b58\u5668)</p> <p></p> <p>\u8f93\u5165\u4e3a C, D\uff0c\u8f93\u51fa Q=D\u3002C \u662f\u65f6\u949f\u4fe1\u53f7\uff0c\u4e3a 1 \u624d\u4f1a\u4f7f\u5f97\u8f93\u5165\u6839\u636e D \u53d8\u5316\u3002</p> <p>\u60f3\u529e\u6cd5\u907f\u514d\u6389 SR Latch \u4e2d\u7684\u975e\u6cd5\u72b6\u6001\uff0c\u901a\u8fc7\u5728 Clocked SR Latch \u57fa\u7840\u4e0a\u5bf9\u8f93\u5165 D \u52a0\u53cd\u76f8\u5668\u76f4\u63a5\u6784\u9020 S,R\uff0c\u4fdd\u8bc1\u4e00\u5b9a\u662f 01 \u6216 10\u3002</p> <p>\u4e8b\u5b9e\u4e0a\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u800c\u4e14\u662f\u8868\u793a\u4e0d\u51fa S=0,R=0 \u7684\u72b6\u6001\u7684\uff0cS,R \u4e00\u5b9a\u76f8\u53cd\u3002</p> <p>\u9501\u5b58\u5668\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\uff1a\u5982\u679c\u628a \\overline{Q} \u8fde\u63a5\u5230 D \u4e0a\uff0c\u90a3 Q \u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u91cc\u4f1a\u75af\u72c2\u53d8\u5316\uff08\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u8fde\u554a\uff1f\uff1f\uff1f\uff1f\uff09\u3002\u600e\u6837\u8ba9\u5b83\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u53d8\u5316\u4e00\u6b21\uff1f</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1aMaster-Slave flip-flop - Edge-triggered flip-flop, Pulse-triggered flip-flop</p> <p>Pulse-Triggered SR Flip-flop</p> <p></p> <p>\u4e24\u4e2a SR \u9501\u5b58\u5668\u4e32\u5728\u4e00\u8d77\uff0c\u5728\u4e00\u6574\u4e2a\u65f6\u949f\u5468\u671f\u91cc\u5b8c\u6210\u4e00\u6b21\u3002</p> <p>\u7f3a\u9677\uff1a1's catching, 0's catching\uff0c\u5982\u679c\u53d1\u751f\u8df3\u53d8\uff0c\u4f1a\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u4ed6\u4f1a\u6355\u6349\u5230\u8df3\u53d8\u7684\u90a3\u4e00\u70b9\u4fe1\u53f7\u5c31\u5bf9\u6574\u4e2a\u8f93\u51fa\u4ea7\u751f\u4e86\u53d8\u5316</p> <p></p> <p>Edge-Triggered D Flip-flop</p> <p>\u53ef\u4ee5\u6d88\u9664\u7f3a\u9677\u3002\u4e3b\u8981\u5c31\u662f\u628a\u524d\u9762\u7684\u9501\u5b58\u5668\u53d8\u6210 D \u9501\u5b58\u5668\uff0c\u540e\u9762\u90a3\u4e2a\u53ef\u4ee5\u4e0d\u7ba1\u3002</p> <p>negative-edge triggered flip-flop:</p> <p></p> <p>positive-edge triggered flip-flop (standard flip-flop):</p> <p></p> <p>\u53ea\u6355\u6349\u65f6\u949f\u4e0a\u5347/\u4e0b\u964d\u65f6\u90a3\u4e00\u77ac\u7684 D \u7684\u72b6\u6001\uff0c\u5e76\u5bf9 Q \u65bd\u4ee5\u5f71\u54cd\uff0c\u56e0\u4e3a\u53ea\u6709 Edge \u65f6\u8fd9\u6574\u4e2a\u89e6\u53d1\u5668\u624d\u662f\u901a\u7684\u3002</p> <p>\u7b26\u53f7\uff1a</p> <p></p> <p>Enabled D Flip-Flop: \u6dfb\u52a0\u4e8c\u8def\u9009\u62e9\u5668\uff0c\u53ef\u4ee5\u786e\u5b9a\u8fdb\u5165\u89e6\u53d1\u5668\u7684 D \u662f\u5426\u4ece\u5f53\u524d D \u66f4\u65b0</p> <p></p> <p>Resettable D Flip-Flop: \u6dfb\u52a0 Reset</p> <p></p> <p>\u5de6\uff1a\u5f02\u6b65\uff1b\u53f3\uff1a\u540c\u6b65</p> <p></p> <p>JK Flip-Flop</p> <p>\u7c7b\u4f3c SR \u89e6\u53d1\u5668\uff0c\u4e0d\u8fc7\u589e\u52a0\u4e86 J=1,K=1 \u7684\u72b6\u6001\u5b9a\u4e49\uff0c\u662f\u628a\u5f53\u524d\u72b6\u6001\u7f6e\u4e3a\u76f8\u53cd\u3002</p> <p>\u540c\u6837\u4f1a\u6709 1's catching \u7684\u95ee\u9898\uff0c\u6240\u4ee5\u53ef\u4ee5\u6539\u7528 D \u89e6\u53d1\u5668\u3002\u771f\u503c\u8868\u7c7b\u4f3c SR \u89e6\u53d1\u5668\uff0c\u53ea\u662f\u589e\u52a0\u4e86 J=1,K=1 \u7684\u60c5\u5f62\u3002</p> <p></p> <p>T Flip-Flop</p> <p>\u5728 JK \u89e6\u53d1\u5668\u4e2d\uff0c\u53ea\u628a\u4e0d\u6539\u53d8\u8f93\u51fa\uff08J=0,K=0\uff09\u548c\u5c06\u8f93\u51fa\u53d6\u53cd\uff08J=1,K=1\uff09\u4e24\u79cd\u60c5\u51b5\u62ff\u51fa\u6765\uff0cT=0 \u65f6\u4e0d\u6539\u53d8\u72b6\u6001\uff0cT=1 \u65f6\u6539\u53d8\u72b6\u6001\u3002</p> <p></p>"},{"location":"System/Digital%20Logic/#sequential-logic-design_1","title":"Sequential logic design","text":"<p>\u72b6\u6001\u8868\u3001\u72b6\u6001\u56fe</p> <p>\u7b49\u4ef7 Equivalent \u72b6\u6001</p> <p>\u201c\u72b6\u6001\u201d State \u53ef\u4ee5\u63a5\u6536\u8f93\u5165\u3001\u8f93\u51fa\u3002\u5982\u679c\u5bf9\u4e8e\u4efb\u4f55\u76f8\u540c\u7684\u8f93\u5165\uff0c\u4e24\u4e2a\u72b6\u6001\u7684\u8f93\u51fa\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90a3\u8fd9\u4e24\u4e2a\u72b6\u6001\u79f0\u4e3a\u7b49\u4ef7\u7684\u3002</p> <p>\u4f7f\u7528\u72b6\u6001\u56fe\u3001\u6709\u9650\u72b6\u6001\u673a\uff1a\u6bcf\u6761\u72b6\u6001\u4e0e\u72b6\u6001\u4e4b\u95f4\u7684\u6709\u5411\u8fb9\u4e0a\u9762\u7684\u6807\u6ce8\u8868\u793a\u7740\u4e2a\u8f6c\u79fb\u6240\u5bf9\u5e94\u7684\u8f93\u5165\u3001\u8f93\u51fa\u3002</p> <p>\u72b6\u6001\u56fe\u4e2d\uff0c\u6709 3 \u79cd\u5f62\u6001\u53ef\u4ee5\u5316\u7b80\uff1a\u6b21\u6001\u76f8\u540c\u3001\u6b21\u6001\u4ea4\u9519\u3001\u6b21\u6001\u5faa\u73af</p> <p></p> <p></p> <p>Mealy Model: outputs = g(inputs, state)</p> <p>Moore Model: outputs = h(state)\uff0c\u6ca1\u6709\u8f93\u5165\uff0c\u540e\u9762\u7684\u4e00\u4e9b\u8f93\u5165\u53d6\u51b3\u4e8e\u4e4b\u524d\u7684\u72b6\u6001</p> <p>\u8fd9\u4e24\u79cd\u6a21\u578b\u7684\u72b6\u6001\u56fe/\u8868\u662f\u6709\u4e0d\u540c\u7684\u3002</p> <p>Moore State \u4e2d\uff0c\u4e0d\u9700\u8981\u5728\u5355\u5411\u8fb9\u4e0a\u9762\u5199 output \u6807\u7b7e\uff0c\u56e0\u4e3a output \u53ea\u4e0e\u5f53\u524d\u7684\u72b6\u6001\u6709\u5173\uff0c\u4e0e input \u65e0\u5173\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a output \u5199\u5728\u8282\u70b9\u4e0a\uff1b\u4f46\u662f\u8fb9\u4e0a\u4ecd\u7136\u9700\u8981\u5199 input\uff0c\u8fd9\u662f\u51b3\u5b9a\u5f80\u54ea\u4e2a\u72b6\u6001\u8f6c\u79fb</p> <p>\u4f8b</p> <p>\u5e8f\u5217\u8bc6\u522b\u5668\uff1a\u8f93\u5165\u7ec4\u5408\u5728\u89e6\u53d1\u70b9\u7684\u62bd\u8c61</p> <p>proper sequence\uff1a\u9700\u8981\u5339\u914d\u7684\u5e8f\u5217\u7684\u6240\u6709\u524d\u7f00\u5b50\u5e8f\u5217</p> <p></p> <p>\u72b6\u6001\u8868\u4e5f\u662f\u53ef\u4ee5\u5408\u5e76\u7684</p> <p></p> <p>13\u53ef\u4ee5\u5408\u5e76\uff0c246\u4e5f\u53ef\u4ee5\u5408\u5e76</p> <p></p> <p>\u800c\u5982\u679c\u7528 Moore Model \u5b9e\u73b0\u5e8f\u5217\u8bc6\u522b\u5668\uff0c\u90a3\u9700\u8981\u591a\u4e00\u4e2a\u72b6\u6001\u6765\u4fdd\u5b58\u6700\u7ec8\u6001\u3002Moore Model \u5f80\u5f80\u4f1a\u6bd4 Mealy Model \u4e2d\u8282\u70b9\u66f4\u591a</p> <p>\u72b6\u6001\u7f16\u7801\u65b9\u5f0f</p> <p>\u5982 ABCD 4 \u79cd\u72b6\u6001 4 \u9009 1 \u53ef\u4ee5\u7528 A=00, B=01, C=10, D=11 \u7b49 24 \u79cd\u8868\u8fbe\u65b9\u5f0f\u3002</p> <p>\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u5f0f\u53ef\u80fd\u6709\u4e0d\u540c\u7684 Cost\uff1a</p> <p>\u56e0\u4e3a\u8f6c\u79fb\u8fc7\u7a0b\u540e\uff0c\u9700\u8981\u53d8\u5316\u7684 bit \u6570\u9700\u8981\u5c3d\u53ef\u80fd\u76f8\u540c\u3002</p> <p>\u786e\u5b9a\u7f16\u7801\u4e4b\u540e\uff0c\u7528\u7c7b\u4f3c\u5361\u8bfa\u56fe\u7684\u65b9\u5f0f\u5316\u7b80\u3002</p> <p>\u4e0b\u9762\u8fd9\u4e2a\u56fe\u600e\u4e48\u6765\u7684\uff1f\uff1f\uff1f\uff1f\uff1f</p> <p>\u5206\u522b\u5bf9 D1, D2, Output \u62ce\u51fa\u6765\uff0c\u7528 X1, X2(input) \u4f5c\u4e3a\u53d8\u91cf\u7684\u4e0d\u540c\u53d6\u503c</p> <p>\u4e0d\u76f4\u63a5\u7528\u683c\u96f7\u7801\u65f6\uff0c\u9700\u8981\u628a3\u548c4\u4e24\u884c\u6362\u987a\u5e8f\uff1b\u7528\u683c\u96f7\u7801\u5c31\u65e0\u9700\u3002\u4e0d\u540c\u7f16\u7801\u5f97\u5230\u7684\u7ed3\u679c\u53ef\u80fd\u4e0d\u4e00\u6837\u3002</p> <p></p> <p>\u65f6\u5e8f\u903b\u8f91\u7684 Cost = \u6240\u6709\u7684\u7f16\u7801\u7684\u7ec4\u5408\u903b\u8f91 Cost\uff08\u53d8\u91cf\u6570 + Gate \u6570\uff09+ Flip-flop \u7684 Cost</p> <p>\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f</p> <p>\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u5982\u679c\u7ec4\u5408\u903b\u8f91\u90e8\u5206\u53ea\u5269\u4e00\u6839\u5bfc\u7ebf\uff0c\u5c31\u4e0d\u7528\u7b97\u90a3\u4e2a 1 \u4e86\u3002</p> <p>\u72b6\u6001\u8bbe\u8ba1\u89c4\u5219\uff1a</p> <ul> <li>\u4e0b\u4e00\u72b6\u6001\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u5c3d\u53ef\u80fd\u5206\u914d\u5230\u76f8\u540c\u7684\u7f16\u7801</li> <li> <p>\u5171\u540c\u4f5c\u4e3a\u67d0\u4e00\u72b6\u6001\u7684\u4e0b\u4e00\u53ef\u80fd\u72b6\u6001\u7684\uff0c\u5c3d\u53ef\u80fd\u5206\u914d\u5230\u76f8\u540c\u7684\u7f16\u7801</p> </li> <li> <p>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u5c3d\u53ef\u80fd\u5206\u914d\u5230\u76f8\u540c\u7684\u7f16\u7801</p> </li> </ul> <p>\u5f53\u7136\u5927\u591a\u6570\u60c5\u51b5\u662f\u4e0d\u53ef\u4ee5\u5168\u90e8\u9075\u5b88\u7684\uff0c\u800c\u4e14\u89c4\u5219\u53ea\u662f\u7ecf\u9a8c\u6027\u7684</p> <p></p> <p>Z=A(t) \u56e0\u4e3a t+1 \u5b9e\u9645\u4e0a\u662f\u4e0b\u6b21\u7b97\u51fa\u6765\u7684\u4e1c\u897f\uff0cZ \u5b9e\u9645\u4e0a\u8fd8\u662f\u8fd9\u6b21\u7684 A\u3002</p> <p>\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u672a\u4f7f\u7528\u7684\u72b6\u6001\u4e5f\u8ba9\u4ed6\u8f6c\u79fb\u5230\u5faa\u73af\u91cc\uff1f\u4e3a\u4e86\u907f\u514d\u6302\u8d77\u540e\u53d8\u4e3a\u968f\u673a\u503c\u7684\u60c5\u51b5\uff0c\u4f7f\u5f97\u5b83\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u6062\u590d\u6b63\u5e38\u3002</p> <p>\u5f53\u7136\u4e5f\u53ef\u4ee5\u52a0\u4e00\u4e2a Reset \u6765\u8ba9\u5b83\u542f\u52a8\u65f6\u5f3a\u5236\u6e05\u96f6\u3002</p> <p>\u672a\u7528\u72b6\u6001\u600e\u4e48\u7528\uff1f</p> <p>\u4ee3\u5165\u5230\u901a\u8fc7\u5361\u8bfa\u56fe\u5316\u7b80\u5176\u4ed6\u5df2\u77e5\u72b6\u6001\u5f97\u5230\u7684\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u672a\u7528\u72b6\u6001\u65f6\u5bf9\u5e94\u7684\u4e0b\u4e00\u72b6\u6001\u548c\u8f93\u51fa\u3002</p> <p>\u56e0\u4e3a\u5361\u8bfa\u56fe\u5316\u7b80\u7684\u65f6\u5019\uff0c\u5229\u7528\u4e86 XX\uff0c\u4f46\u662f\u8fd9\u53ef\u80fd\u51fa\u73b0\u8fc7\u5ea6\u4f18\u5316\uff08\u6bd4\u5982\u8ba9\u672a\u7528\u72b6\u6001\u4e5f\u8f93\u51fa 1\uff09\uff0c\u51fa\u73b0\u628a\u672a\u77e5\u72b6\u6001\u4ee3\u5165\u540e\u4e0e\u5b9e\u9645\u60c5\u51b5\u4e0d\u7b26\u7684\u60c5\u5f62\u3002\u6240\u4ee5\u8981\u66f4\u6539\u5361\u8bfa\u56fe\u4f18\u5316\u7684\u8868\u8fbe\u5f0f\u3002</p> <p>\u8fd9\u662f\u8fb9\u7f18\u89e6\u53d1\uff01</p> <p>t_{clk}\uff0c\u65f6\u949f\u4fe1\u53f7\u5468\u671f</p> <p>t_{setup}\uff0c\u65f6\u949f\u8df3\u53d8\u4e4b\u524d\uff0c\u8f93\u5165\u9700\u8981\u4fdd\u6301\u7a33\u5b9a\u8fd9\u4e48\u4e45\uff0c\u624d\u53ef\u4ee5\u8ba9\u540e\u7eed\u7535\u8def\u6b63\u5e38\u6355\u6349\u5230\u3002</p> <p>t_{hold}\uff0c\u65f6\u949f\u8df3\u53d8\u4e4b\u540e\uff0c\u8f93\u5165\u9700\u8981\u4fdd\u6301\u7a33\u5b9a\u8fd9\u4e48\u4e45\uff0c\u624d\u53ef\u4ee5\u8ba9\u540e\u7eed\u7535\u8def\u6b63\u5e38\u6355\u6349\u5230\u3002</p> <p>t_{\\mathit{ffpd}}\uff0c\u65f6\u949f\u4fe1\u53f7\u53d8\u5316\u540e\uff0c\u5230\u89e6\u53d1\u5668\u8f93\u51fa\u6539\u53d8\u4e4b\u95f4\u7684\u5ef6\u8fdf\uff1a\u5728\u89e6\u53d1\u5668\u91cc\u4f20\u64ad\u6240\u9700\u8981\u7684\u5ef6\u8fdf\u3002\u5c31\u662f Flip-Flop Propagation delay\uff0c\u89e6\u53d1\u5668\u7684 t_{\\mathit{pd}}</p> <p>t_{comb}\uff0c\u5728\u8f93\u51fa\u4e0b\u4e00\u6b21\u72b6\u6001\u4e4b\u540e\uff0c\u4f1a\u7ecf\u8fc7\u4e00\u6bb5\u7ec4\u5408\u7535\u8def\u624d\u80fd\u8ba9\u8fd9\u4e2a\u4e0b\u4e00\u72b6\u6001\u4f5c\u4e3a\u6d41\u5165\u72b6\u6001</p> <p>\u4e24\u4e2a\u5173\u7cfb\uff1a $$ t_{\\mathit{clk}}\\geq t_{\\mathit{ffpd}} + t_{\\mathit{comb}} + t_{\\mathit{setup}} $$ $$ t_{\\mathit{hold}} \\leq t_{\\mathit{ffpd}} + t_{\\mathit{comb}} $$</p> <p>\u5982\u679c t_{\\mathit{hold}} &gt; t_{\\mathit{ffpd}} + t_{\\mathit{comb}}\uff0c\u90a3\u4e0a\u4e00\u6b21\u7684\u72b6\u6001\u4ecd\u7136\u4f1a\u6b8b\u7559\u5728\u7535\u8def\u91cc\uff1f\uff1f\uff1f</p> <p>\u5e94\u7528\uff1a\u53ef\u4ee5\u7528\u4e0d\u7b49\u5f0f\u6c42\u6700\u5c0f\u65f6\u949f\u5468\u671f/\u6700\u5927\u65f6\u949f\u9891\u7387\u3002</p>"},{"location":"System/Digital%20Logic/#classic-sequential-logic-elements","title":"Classic sequential logic elements","text":"<p>Register, Counter e.g. PC (Program Counter \u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u5730\u5740) in CPU</p> <p>\u6bcf\u4e2a Flip-Flop \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a Bit \u7684 Register</p> <p>2-bit register</p> <p>Moore \u578b\uff0cOutput \u8ddf Input \u6ca1\u5173\u7cfb\uff0cInput \u53ea\u662f\u786e\u5b9a\u4e86\u4e0b\u4e00\u4e2a\u72b6\u6001</p> <p>Reset \u4e00\u822c\u90fd\u662f\u5728\u503c\u4e3a 0 \u7684\u65f6\u5019\u8fdb\u884c reset</p> <p>\u65f6\u949f\u516c\u7528\u7684\u65f6\u5019\u7684\u52a0\u8f7d\u79f0\u4e3a\u5e76\u884c\u52a0\u8f7d\uff08\u628a Memory \u4e2d\u7684 Load \u5230 Register \u4e2d\uff0c\u518d\u8fdb\u884c\u8fd0\u7b97\uff09</p> <p>\u95e8\u63a7\u65f6\u949f\uff1a\u6307\u4e3b\u65f6\u949f\u7ecf\u8fc7\u4e00\u4e2a\u95e8\u7535\u8def\u624d\u5bfc\u5165\u540e\u7eed\u7535\u8def\u4f5c\u4e3a\u65f6\u949f\uff0c\u4f1a\u51fa\u73b0\u65f6\u949f\u504f\u79fb\uff0c\u53ef\u80fd\u96be\u4ee5\u4fdd\u6301\u540c\u6b65\u7535\u8def\u3002</p> <p>\u5982\u679c\u6709\u989d\u5916\u63a7\u5236\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 D \u800c\u4e0d\u662f\u63a7\u5236\u65f6\u949f\u6765\u5b9e\u73b0\uff0c\u5728 D \u6d41\u5165\u89e6\u53d1\u5668\u4e4b\u524d\uff0c\u52a0\u5165\u4e00\u4e9b\u7ec4\u5408\u7535\u8def\uff0c\u8ba9\u53e6\u4e00\u4e2a Input \u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u3002</p> <p>RTL: Register Transfer Language \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00</p> <pre><code>if (K1 == 1)\n    R2 &lt;- R1\n</code></pre> <p>\u652f\u6301\u4f20\u8f93\u3001\u7b97\u6570\u3001\u903b\u8f91\u3001\u79fb\u4f4d</p> <p>\u5bc4\u5b58\u5668\u4f20\u8f93 Register Transfer Structure \uff08\u72ed\u4e49\u7684\u4f20\u8f93\uff09</p> <p>\u591a\u8def\u9009\u62e9\u5668\uff08Multiplexer-Based\uff09\u3001\u603b\u7ebf\u5f0f\uff08Bus-Based\uff09\uff0c\u4e09\u6001\u95e8\uff08Three-State\uff0c\u7528 <code>z</code> \u63a7\u5236\u7535\u8def\u901a\u4e0d\u901a\uff09</p> <p>\u4e09\u6001\u603b\u7ebf\u7528\u7684\u66f4\u591a\uff0c\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\uff0cCost \u5c0f</p> <p>\u79fb\u4f4d Shift</p> <p>\u628a\u51e0\u4e2a D Flip-Flop \u4e32\u8d77\u6765\uff0c\u5229\u7528\u65f6\u95f4\u4fe1\u53f7\u7684\u5ef6\u8fdf\u6765\u8fdb\u884c\u79fb\u4f4d\u3002</p> <p>\u5e76\u884c\u52a0\u8f7d\uff1a\u65f6\u949f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u628a\u65f6\u949f\u548c\u4e00\u4e9b\u4fe1\u53f7\u53d6 AND \u540e\uff0c\u5e76\u884c\u5730\u4f20\u5165\u5404\u4e2a\u89e6\u53d1\u5668\u4f5c\u4e3a\u65f6\u949f</p> <p>hold\uff1a\u628a\u4fe1\u53f7\u5b58\u5728 D \u89e6\u53d1\u5668\u91cc</p> <p>Counter</p> <p>\u72b6\u6001\u8dc3\u8fc1\uff1acount down, count up, or count through other fixed sequences.</p> <p>\u53ef\u4ee5\u7528 counter \u6765\u8bb0\u5f55\u65f6\u95f4/\u8ba1\u6570</p> <p>Program Counter \u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u5730\u5740</p> <p>IR \u5bc4\u5b58\u5668 \u5b58\u50a8\u5f53\u524d\u6307\u4ee4\u7684\u5185\u5bb9</p> <p>\u4e24\u79cd\u5e38\u7528\u7684\u5bc4\u5b58\u5668\uff1a</p> <ul> <li>Ripple Counters \u4e32\u884c\u3001\u5f02\u6b65\u3001\u7b2c\u4e8c\u4e2a\u89e6\u53d1\u5668\u7684\u65f6\u949f\u5b9e\u9645\u4e0a\u662f\u7b2c\u4e00\u4e2a\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u518d\u53d6\u53cd</li> <li>Synchronous Counters</li> </ul> <p>Ripple Counter Example \u56fe\u89c1 slides</p> <p></p> <p>t_{PHL}\uff0c\u4ece\u4e0a\u4e00\u89e6\u53d1\u5668\u63a5\u53d7\u5230\u65f6\u949f\u6539\u53d8\u4fe1\u53f7\u5f00\u59cb\uff0c\u5230\u4e0b\u4e00\u89e6\u53d1\u5668\u6536\u5230\u4fe1\u53f7\u6240\u9700\u8981\u7684\u65f6\u95f4</p> <p>Worst Case: \u5ef6\u8fdf\u53ef\u4ee5\u8fbe\u5230 nt_{PHL}</p> <p>Synchronous Counters</p> <p>\u540c\u6b65 Counter\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u65f6\u949f\u9a71\u52a8</p> <p>Intermenter \u76f8\u5f53\u4e8e\u6bcf\u6b21\u81ea\u589e 1 \u7684\u7b80\u5316\u7248\u534a\u52a0\u5668\u7ec4\u5408</p> <p>\u521a\u521a\u7684\u4ecd\u7136\u662f\u4e32\u884c\u95e8\u63a7\uff0c\u4f46\u53ef\u4ee5\u4f18\u5316\u4e3a\u5e76\u884c\u95e8\u63a7</p> <p>Divide-by-n Counter, Modulo-n Counter</p> <p>\u5b9e\u9645\u4e0a\u53ef\u4ee5\u51e0\u4f4d\u51e0\u4f4d\u7684\u589e\uff0c\u800c\u4e0d\u662f\u4e00\u4f4d\u4e00\u4f4d\u7684\u589e\uff1a\u6bd4\u5982\u589e\u5230\u67d0\u4e2a\u6570\u4e4b\u540e\uff0c\u5c31\u628a 1 \u8f93\u51fa\uff0c\u7136\u540e counter \u5185\u53c8\u4ece 0 \u5f00\u59cb\u3002</p> <p>\u5982\uff0cBCD \u7f16\u7801\uff0c\u4f7f\u75284\u4f4d\u4e8c\u8fdb\u5236\u5bf9\u5341\u8fdb\u5236\u7f16\u7801\uff08\u67096\u79cd\u72b6\u6001\u672a\u5b9a\u4e49\uff0c\u88ab\u6d6a\u8d39\uff09</p>"},{"location":"Tips/Shell/","title":"The Missing Semester of Your CS Education - \u8ba1\u7b97\u673a\u6559\u80b2\u4e2d\u7f3a\u5931\u7684\u4e00\u8bfe","text":""},{"location":"Tips/Shell/#video","title":"Video","text":"<p>https://www.youtube.com/watch?v=Wz50FvGG6xU&amp;t=446s</p> <p>Bilibili</p>"},{"location":"Tips/Shell/#_1","title":"\u8d44\u6599","text":"<p>MIT\uff1ahttps://missing.csail.mit.edu/</p> <p>\u4e2d\u6587\uff1ahttps://missing-semester-cn.github.io/</p>"},{"location":"Tips/Shell/#shell","title":"Shell","text":""},{"location":"Tips/Shell/#_2","title":"\u5e73\u5e38\u4f7f\u7528\u9047\u5230\u7684\u5c0f\u95ee\u9898","text":""},{"location":"Tips/Shell/#sudo-sthsh-command-not-found","title":"\u6267\u884c <code>sudo sth.sh</code> \u65f6\uff0ccommand not found","text":"<pre><code>$ ./sth.sh\n-bash: ./sth.sh: Permission denied\n$ sudo ./sth.sh\nsudo: command not found\n</code></pre> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> <p>\u9996\u5148\u6267\u884c <code>chmod +x ./sth.sh</code>\uff0c\u518d\u4f7f\u7528 <code>sudo</code> \u8fd0\u884c</p> <pre><code>$ chmod +x ./sth.sh\n$ sudo ./sth.sh\n</code></pre>"},{"location":"Tips/Shell/#_3","title":"\u5355\u6587\u4ef6","text":""},{"location":"Tips/Shell/#_4","title":"\u5f15\u5165","text":"<p><code>date</code> \u6253\u5370\u5f53\u524d\u65e5\u671f\u65f6\u95f4</p> <pre><code>date\n</code></pre> <p><code>echo</code> \u6253\u5370\u540e\u9762\u7684\u53c2\u6570</p> <pre><code>$ echo hello\nhello\n$ echo $SHELL\n/bin/bash\n$ echo Hello\\ World\nHello World\n$ echo Hello World\nHello World\n$ echo \"Hello World\"\nHello World\n$ echo 'Hello World'\nHello World\n</code></pre> <p>\u4f7f\u7528\u7a7a\u683c\u6765\u5206\u5272\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u4f7f\u7528\u8f6c\u4e49\u7b26\u5c31\u6572\u7a7a\u683c\uff0c\u5f97\u5230\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u800c\u662f\u4e24\u4e2a\u53c2\u6570\u3002</p>"},{"location":"Tips/Shell/#_5","title":"\u73af\u5883\u53d8\u91cf","text":"<p>\u5b58\u6709\u7528\u6237\u4fe1\u606f\u3001home\u76ee\u5f55\u3001path\u7b49</p> <pre><code>echo $PATH\n</code></pre> <p>\u8fd0\u884c\u6587\u4ef6\u65f6\uff0c\u4f1a\u904d\u5386 path \u4e2d\u7684\u547d\u4ee4\u6765\u8fd0\u884c\u3002</p> <p>\u5982\u679c\u60f3\u77e5\u9053\u8fd0\u884c\u7684\u547d\u4ee4\u7684\u76ee\u5f55\u5728\u54ea\u513f</p> <pre><code>$ which echo\n/usr/bin/echo\n</code></pre> <p>\u6253\u5370\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff08Print Working Directory\uff09</p> <pre><code>pwd\n</code></pre> <p>\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff08List\uff09</p> <pre><code>ls\nls ..\n</code></pre> <p>\u9000\u56de\u4e0a\u4e00\u76ee\u5f55</p> <pre><code>cd -\n</code></pre>"},{"location":"Tips/Shell/#ls","title":"<code>ls</code>","text":"<p>\u4f7f\u7528 <code>ls --help</code> \u53ef\u4ee5\u67e5\u770b\u8bb8\u591a\u547d\u4ee4</p> <p>\u67e5\u770b\u6587\u4ef6\u4fe1\u606f\u8be6\u60c5</p> <pre><code>$ ls -l\ntotal 98080\n-rw-r--r-- 1 ohg ohg 66709754 Jul 22 00:13 Miniconda3-latest-Linux-x86_64.sh\n-rw-r--r-- 1 ohg ohg 33719965 Oct  8 22:51 R-4.1.1.tar.gz\n-rw-r--r-- 1 ohg ohg        0 Oct 20 14:54 fish\ndrwxr-xr-x 1 ohg ohg     4096 Dec 31 12:46 githubPy\ndrwxr-xr-x 1 ohg ohg     4096 Sep 24 16:31 miniconda3\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u82e5\u662f <code>d</code>\uff0c\u4ee3\u8868 directory\uff1b\u540e\u4e09\u7ec4\u5b57\u6bcd\u4ee3\u8868\u6743\u9650 permission: read, write, execute</p> <p>\u5bf9\u6587\u4ef6\u800c\u8a00\uff0c\u8bfb\u6307\u8bfb\u53d6\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5199\u6307\u66f4\u6539\u6587\u4ef6\u5185\u5bb9\uff0c\u6267\u884c\u6307\u6267\u884c\u6587\u4ef6</p> <p>\u5bf9\u76ee\u5f55\u800c\u8a00\uff0c\u8bfb\u6307\u8bfb\u53d6\u76ee\u5f55\u5185\u7684\u6587\u4ef6\u540d\uff0c\u5199\u6307\u53ef\u4ee5\u5bf9\u76ee\u5f55\u5185\u7684\u6587\u4ef6\u8fdb\u884c\u5220\u9664\u6216\u91cd\u547d\u540d\uff0c\u6267\u884c\u6307\u662f\u5426\u6709\u6743\u9650\u8fdb\u5165\u8fd9\u4e2a\u76ee\u5f55\uff0c\u82e5\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a\u6587\u4ef6\uff0c\u5219\u9700\u8981\u5bf9\u5176\u76ee\u5f55\u6811\u4e0a\u7684\u6240\u6709\u76ee\u5f55\u90fd\u6709\u6267\u884c\u6743\u9650\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u8bbf\u95ee\u5230\u8981\u8bbf\u95ee\u7684\u6587\u4ef6\u3002</p>"},{"location":"Tips/Shell/#mv-cp-rm-rmdir-mkdir","title":"<code>mv</code> <code>cp</code> <code>rm</code> <code>rmdir</code> <code>mkdir</code>","text":"<p><code>mv</code> \u91cd\u547d\u540d/\u526a\u5207</p> <p><code>cp</code> \u590d\u5236</p> <p><code>rm</code> \u5220\u9664\u6587\u4ef6</p> <p><code>rmdir</code> \u5220\u9664\u7a7a\u76ee\u5f55</p> <p><code>mkdir</code> \u5efa\u7acb\u65b0\u76ee\u5f55\uff0c\u5982\u679c <code>mkdir My Document</code> \u5219\u4f1a\u5efa\u7acb 2 \u4e2a\u65b0\u76ee\u5f55\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5bf9\u7a7a\u683c\u4f7f\u7528\u8f6c\u4e49\u7b26\u6216\u5916\u9762\u52a0\u5f15\u53f7\u3002</p> <p>\u4e00\u4e9b\u5c1d\u8bd5\uff1a</p> <pre><code>$ mkdir TouhcFish\n$ mv ./TouhcFish ./TouchFish\n$ ls\nMiniconda3-latest-Linux-x86_64.sh  R-4.1.1.tar.gz  TouchFish  fish  githubPy  miniconda3\n$ mv ./fish ./TouchFish/\n$ ls\nMiniconda3-latest-Linux-x86_64.sh  R-4.1.1.tar.gz  TouchFish  githubPy  miniconda3\n$ ls TouchFish\nfish\n$ touch fish2\n$ mv ./fish2 ./TouchFish\n$ ls TouchFish\nfish  fish2\n$ mv ./TouchFish ./TouchFish/TouchFishsh\nmv: cannot move './TouchFish' to a subdirectory of itself, './TouchFish/TouchFishsh'\n$ mv ./TouchFish ./Touch4Fish/TouchFishsh\nmv: cannot move './TouchFish' to './Touch4Fish/TouchFishsh': No such file or directory\n$ mv ./TouchFish ./Touch\n$ ls\nMiniconda3-latest-Linux-x86_64.sh  R-4.1.1.tar.gz  Touch  githubPy  miniconda3\n$ ls Touch\nfish  fish2\n$ rmdir Touch\nrmdir: failed to remove 'Touch': Directory not empty\n$ rm -r Touch\n$ ls\nMiniconda3-latest-Linux-x86_64.sh  R-4.1.1.tar.gz  githubPy  miniconda3\n</code></pre>"},{"location":"Tips/Shell/#man","title":"<code>man</code>","text":"<p><code>man command</code> \u53ef\u4ee5\u83b7\u5f97\u66f4\u52a0\u8be6\u5b9e\u7684\u5e2e\u52a9\u3002</p>"},{"location":"Tips/Shell/#_6","title":"\u6e05\u5c4f","text":"<p>Ctrl L</p> <p><code>clear</code></p> <p>\u672c\u8d28\u662f\u7ec8\u7aef\u5411\u540e\u7ffb\u4e86\u4e00\u9875\uff0c\u5f80\u524d\u8fd8\u662f\u80fd\u627e\u5230\u521a\u521a\u7684\u5185\u5bb9\u3002</p>"},{"location":"Tips/Shell/#_7","title":"\u6d41","text":"<p>\u9ed8\u8ba4\u7684\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u662f\u5c4f\u5e55\u3002</p> <pre><code>$ echo hello &gt; hello.txt\n</code></pre> <p>\u5c06\u8f93\u51fa\u4fdd\u5b58\u5230 <code>hello.txt</code> \u4e2d\u3002</p> <p>\u8981\u60f3\u67e5\u770b\u6587\u672c\u6587\u6863\u7684\u5185\u5bb9\uff0c\u4f7f\u7528 <code>cat</code> \u547d\u4ee4\u3002</p> <pre><code>$ cat hello.txt\nhello\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u628a <code>hello.txt</code> \u4e2d\u7684\u5185\u5bb9\u4e22\u7ed9 <code>cat</code>\uff0c\u4f5c\u4e3a\u5b83\u7684\u8f93\u5165\u6d41\u3002</p> <pre><code>$ cat &lt; hello.txt\nhello\n</code></pre> <p>\u4f7f\u7528 <code>cat</code> \u8fd8\u53ef\u4ee5\u5b9e\u73b0 <code>cp</code> \u7684\u4f5c\u7528\u3002</p> <pre><code>$ cat &lt; hello.txt &gt; hello2.txt\n</code></pre> <p>\u5982\u679c\u4f7f\u7528 <code>&gt;&gt;</code>\uff0c\u5219\u662f\u8d77\u5230 append \u7684\u4f5c\u7528\uff0c\u628a\u65b0\u7684\u8f93\u51fa\u653e\u5728\u6587\u6863\u672b\u5c3e\u3002</p> <pre><code>$ cat &lt; hello.txt &gt;&gt; hello2.txt\n$ cat hello2.txt\nhello\nhello\n</code></pre> <p>Pipe\uff1a<code>|</code> \u53ef\u4ee5\u5c06\u5de6\u8fb9\u7684\u8f93\u51fa\u4f5c\u4e3a\u53f3\u8fb9\u7684\u8f93\u5165\u3002</p> <pre><code>$ ls -l ./ &gt; hey.txt\n$ cat hey.txt\ntotal 98080\n-rw-r--r-- 1 ohg ohg 66709754 Jul 22 00:13 Miniconda3-latest-Linux-x86_64.sh\n-rw-r--r-- 1 ohg ohg 33719965 Oct  8 22:51 R-4.1.1.tar.gz\ndrwxr-xr-x 1 ohg ohg     4096 Dec 31 12:46 githubPy\n-rw-r--r-- 1 ohg ohg        0 Jan 17 16:01 hey.txt\ndrwxr-xr-x 1 ohg ohg     4096 Sep 24 16:31 miniconda3\n$ tail -n2 hey.txt\n-rw-r--r-- 1 ohg ohg        0 Jan 17 16:01 hey.txt\ndrwxr-xr-x 1 ohg ohg     4096 Sep 24 16:31 miniconda3\n$ tail -n2 &lt; hey.txt\n-rw-r--r-- 1 ohg ohg        0 Jan 17 16:01 hey.txt\ndrwxr-xr-x 1 ohg ohg     4096 Sep 24 16:31 miniconda3\n$ ls -l ./ | tail -n2\n-rw-r--r-- 1 ohg ohg      304 Jan 17 16:01 hey.txt\ndrwxr-xr-x 1 ohg ohg     4096 Sep 24 16:31 miniconda3\n$ ls -l ./ | tail -n1 &gt; ls.txt\n</code></pre> <p>### root</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u88ab\u4fdd\u62a4\u7684\u6587\u4ef6\uff0c\u5982\u679c\u60f3\u8981\u4f7f\u7528 <code>echo</code> \u518d\u52a0\u6d41\u7684\u91cd\u5b9a\u5411\u53bb\u66f4\u6539\u4ed6\u4eec\uff0c\u53ea\u7528 <code>sudo</code> \u662f\u62ff\u4e0d\u5230\u6700\u9ad8\u6743\u9650\u7684\u3002</p> <pre><code>$ sudo echo 7e:59:c2:91:84:7f &gt; address\n</code></pre> <p>\u8fd9\u6837\u7684 <code>sudo</code> \u53ea\u4fee\u9970\u7684 <code>echo</code>\uff0c\u5374\u5bf9\u6d41\u7684\u53e6\u4e00\u8fb9\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002</p> <p>\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 <code>tee</code> \u547d\u4ee4\u7ed3\u5408\u7ba1\u9053\uff0c\u800c\u4e0d\u53ea\u662f\u6d41\u7684\u91cd\u5b9a\u5411\u3002</p> <pre><code>$ touch fish\n$ tee fish\n600\n600\nexit\nexit\n^C\n$ cat fish\n600\nexit\n$ echo 500 | tee fish\n500\n$ cat fish\n500\n</code></pre> <p>\u7b2c\u4e8c\u884c\u547d\u4ee4\u4e2d\u91cd\u590d\u7684\u90e8\u5206\u91cc\uff0c\u524d\u4e00\u4e2a\u662f\u901a\u8fc7\u952e\u76d8\u8f93\u5165\u7684\uff0c\u540e\u4e00\u4e2a\u662f <code>tee</code> \u547d\u4ee4\u8f93\u51fa\u7684\u3002</p> <p>\u6240\u4ee5\u6700\u5f00\u59cb\u7684\u547d\u4ee4\u4f7f\u7528 <code>tee</code> \u547d\u4ee4\u4e4b\u540e\uff0c\u5c31\u4e0d\u4f1a\u6709 Permission Denied \u4e86\u3002</p> <pre><code>$ echo 7e:59:c2:91:84:7f | sudo tee address\n</code></pre>"}]}